import{_ as s,o as n,c as a,a as l}from"./app.210eb53c.js";const p="/assets/堆.91929b98.png",e="/assets/设置内存.7f57060f.png",o="/assets/GC.f0bef90c.png",r="/assets/GC过程.ab516271.png",t="/assets/TALB.0ad09326.png",c="/assets/TALB过程.399734a8.png",v=JSON.parse('{"title":"jvm-堆","description":"","frontmatter":{},"headers":[{"level":2,"title":"堆核心","slug":"堆核心","link":"#堆核心","children":[{"level":3,"title":"堆与进程","slug":"堆与进程","link":"#堆与进程","children":[]},{"level":3,"title":"堆内存细分","slug":"堆内存细分","link":"#堆内存细分","children":[]}]},{"level":2,"title":"设置堆内存大小和OOM","slug":"设置堆内存大小和oom","link":"#设置堆内存大小和oom","children":[{"level":3,"title":"OOM","slug":"oom","link":"#oom","children":[]}]},{"level":2,"title":"年轻代与老年代","slug":"年轻代与老年代","link":"#年轻代与老年代","children":[]},{"level":2,"title":"对象分配过程","slug":"对象分配过程","link":"#对象分配过程","children":[{"level":3,"title":"特殊情况","slug":"特殊情况","link":"#特殊情况","children":[]}]},{"level":2,"title":"GC分类","slug":"gc分类","link":"#gc分类","children":[{"level":3,"title":"young GC==Minor GC","slug":"young-gc-minor-gc","link":"#young-gc-minor-gc","children":[]},{"level":3,"title":"Major GC","slug":"major-gc","link":"#major-gc","children":[]},{"level":3,"title":"FullGC","slug":"fullgc","link":"#fullgc","children":[]}]},{"level":2,"title":"堆空间分配","slug":"堆空间分配","link":"#堆空间分配","children":[{"level":3,"title":"分配原则","slug":"分配原则","link":"#分配原则","children":[]}]},{"level":2,"title":"TLAB为对象分配内存（保证线程安全）","slug":"tlab为对象分配内存-保证线程安全","link":"#tlab为对象分配内存-保证线程安全","children":[{"level":3,"title":"为什么有TALB","slug":"为什么有talb","link":"#为什么有talb","children":[]},{"level":3,"title":"什么是TALB","slug":"什么是talb","link":"#什么是talb","children":[]},{"level":3,"title":"TALB分配的过程","slug":"talb分配的过程","link":"#talb分配的过程","children":[]}]},{"level":2,"title":"堆空间参数设置","slug":"堆空间参数设置","link":"#堆空间参数设置","children":[{"level":3,"title":"空间分配担保","slug":"空间分配担保","link":"#空间分配担保","children":[]},{"level":3,"title":"堆是分配空间的唯一选择吗","slug":"堆是分配空间的唯一选择吗","link":"#堆是分配空间的唯一选择吗","children":[]},{"level":3,"title":"逃逸分析","slug":"逃逸分析","link":"#逃逸分析","children":[]},{"level":3,"title":"代码优化","slug":"代码优化","link":"#代码优化","children":[]}]}],"relativePath":"jvm/jvm3.md","lastUpdated":1675436020000}'),i={name:"jvm/jvm3.md"},y=l(`<h1 id="jvm-堆" tabindex="-1">jvm-堆 <a class="header-anchor" href="#jvm-堆" aria-hidden="true">#</a></h1><p>作者: fbk 时间：2023-1-30 地点：济南</p><h2 id="堆核心" tabindex="-1">堆核心 <a class="header-anchor" href="#堆核心" aria-hidden="true">#</a></h2><h3 id="堆与进程" tabindex="-1">堆与进程 <a class="header-anchor" href="#堆与进程" aria-hidden="true">#</a></h3><ol><li>一个进程中只有一个JVM实例，一个JVM实例只有一个运行时数据区，一个运行时数据区只有一个堆和方法区</li><li>进程包含多个线程，共享同一堆空间</li><li>JVM堆区域在JVM启动时就创建了，空间大小也就确定了，堆是JVM管理的最大的内存空间，并且堆是可以调节的</li><li>堆可以处于物理上不连续的内存空间，但是逻辑上可以视为连续的</li><li>所有的线程可以共享堆，并且还可以划分线程私有的缓冲区</li><li>数组和对象可能永远不会存储在栈上（不一定），因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</li><li>在方法结束后，堆中的对象不会马上移除，仅仅在垃圾收集的时候才会移除</li></ol><ul><li>也就是触发了GC的时候，才会进行回收</li><li>如果堆中对象马上被回收，那么用户线程就会收到影响，因为有stop the word</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SimpleHeap</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//属性、成员变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SimpleHeap</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">show</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My ID is </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SimpleHeap</span><span style="color:#A6ACCD;"> sl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SimpleHeap</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SimpleHeap</span><span style="color:#A6ACCD;"> s2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SimpleHeap</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> arr1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><img src="`+p+`" alt=""></p><h3 id="堆内存细分" tabindex="-1">堆内存细分 <a class="header-anchor" href="#堆内存细分" aria-hidden="true">#</a></h3><ol><li>java7之前堆内存逻辑上分为新生区+养老区+永久区</li><li>java8之后分为新生区+养老区+元空间</li><li>约定：新生区 &lt;–&gt; 新生代 &lt;–&gt; 年轻代 、 养老区 &lt;–&gt; 老年区 &lt;–&gt; 老年代、 永久区 &lt;–&gt; 永久代</li></ol><h2 id="设置堆内存大小和oom" tabindex="-1">设置堆内存大小和OOM <a class="header-anchor" href="#设置堆内存大小和oom" aria-hidden="true">#</a></h2><ol><li>java堆区用于储存java对象实例，可以通过<code>-Xms(最小)</code>和<code>-Xmx(最大)</code>查看</li><li>一旦堆区超过最大的-Xmx，就会出现OOM现象</li><li>默认情况下</li></ol><ul><li>最小内存是物理电脑内存大小的1/64</li><li>最大内存是物理电脑的1/4</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">//返回java虚拟的的堆总内存</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> initialMemory </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Runtime</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getRuntime</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">totalMemory</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//获取虚拟机使用的最大内存</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> maxMemory </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Runtime</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getRuntime</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">maxMemory</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-Xms : </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> initialMemory </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">M</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-Xmx : </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> maxMemory </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">M</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">系统内存大小为：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> initialMemory </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">64.0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">G</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">系统内存大小为：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> maxMemory </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4.0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">G</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">-Xms : 241M</span></span>
<span class="line"><span style="color:#A6ACCD;">-Xmx : 3580M</span></span>
<span class="line"><span style="color:#A6ACCD;">系统内存大小为：15.0625G</span></span>
<span class="line"><span style="color:#A6ACCD;">系统内存大小为：13.984375G</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>电脑是16G内存，因为操作系统还占据部分内存 <img src="`+e+`" alt=""> 输出结果</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">-Xms : 575M</span></span>
<span class="line"><span style="color:#A6ACCD;">-Xmx : 575M</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>为什么会少25M</p><blockquote><p>使用JPS查看java进程 使用tstat -gc进程ID <img src="`+o+`" alt=""></p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">SOC: S0区总共容量</span></span>
<span class="line"><span style="color:#A6ACCD;">S1C: S1区总共容量</span></span>
<span class="line"><span style="color:#A6ACCD;">S0U: S0区使用的量</span></span>
<span class="line"><span style="color:#A6ACCD;">S1U: S1区使用的量</span></span>
<span class="line"><span style="color:#A6ACCD;">EC: 伊甸园区总共容量</span></span>
<span class="line"><span style="color:#A6ACCD;">EU: 伊甸园区使用的量</span></span>
<span class="line"><span style="color:#A6ACCD;">OC: 老年代总共容量</span></span>
<span class="line"><span style="color:#A6ACCD;">OU: 老年代使用的量</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>S0或者S1只能使用一个，另一个用不了，所以就造成了栈内存比定义的内存少25M</p><h3 id="oom" tabindex="-1">OOM <a class="header-anchor" href="#oom" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Demo2</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Picture</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> list</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(true){</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">InterruptedException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">                e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Picture</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Random</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">nextInt</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">)));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Picture</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> bytes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Picture</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">length</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>输出结果</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">Exception</span><span style="color:#A6ACCD;"> in thread </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> java</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lang</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OutOfMemoryError</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Java</span><span style="color:#A6ACCD;"> heap space</span></span>
<span class="line"><span style="color:#A6ACCD;">	at com</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">atguigu</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">java</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Picture</span><span style="color:#89DDFF;">.&lt;</span><span style="color:#A6ACCD;">init</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">OOMTest</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">java</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#F78C6C;">29</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	at com</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">atguigu</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">java</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OOMTest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">OOMTest</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">java</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">Process</span><span style="color:#A6ACCD;"> finished with exit code </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol><li><p>堆内存变化</p></li><li><p>大对象导致堆内存溢出</p></li></ol><h2 id="年轻代与老年代" tabindex="-1">年轻代与老年代 <a class="header-anchor" href="#年轻代与老年代" aria-hidden="true">#</a></h2><ol><li>储存在JVM中的java对象可以划分为两类</li></ol><ul><li>一类是生命周期较短的瞬间对象，这类对象的创建和消亡都非常迅速</li><li>另一类生命对象的周期很长，在某些极端的情况下还能够与JVM生命周期保持一致</li></ul><ol start="2"><li>java堆区可以划分为年轻代和老年代</li><li>年轻代又有Eden区，Survivor0和Survivor0</li><li>新生代和老年代的分配</li></ol><ul><li>默认**-XX:NewRatio**=2，表示新生代占1，老年代占2，新生代占整个堆的1/3</li><li>可以修改**-XX:NewRatio**=4，表示新生代占1，老年代占4，新生代占整个堆的1/5</li></ul><ol start="5"><li>在HotSpot虚拟机下，Eden和另外两个survivor的比例是8：1：1，并且可以调整-XX:SurvivorRatio=8</li><li>几乎所有的java对象都是在Eden创建出来的</li><li>可以使用选项”-Xmn”设置新生代最大内存大小，但这个参数一般使用默认值就可以了。</li></ol><h2 id="对象分配过程" tabindex="-1">对象分配过程 <a class="header-anchor" href="#对象分配过程" aria-hidden="true">#</a></h2><ol><li>new的对象先放在Eden区，此区大小有限制</li><li>当Eden空间填满，当需要创建对象，JVM垃圾回收器对Eden进行垃圾回收，没有被回收的对象放入from区（有可能是s1区，或者是s2区）</li><li>当Eden区满，继续进行GC，并且survivor区也要进行GC，他们的年龄不断增加，如果没有回收，继续进行survivor区切换，从form区变为to区，之后from区变为to区，to区变为from区</li><li>当对象的年龄到达15，对象放入老年代</li></ol><h3 id="特殊情况" tabindex="-1">特殊情况 <a class="header-anchor" href="#特殊情况" aria-hidden="true">#</a></h3><ol><li>如果新对象放入Eden，先看Eden是否放得下</li></ol><ul><li>如果Eden放得下，则放入Eden区</li><li>如果Eden放不下，首先进行YGC,执行垃圾回收，看看是否放得下</li></ul><ol start="2"><li>将对象放入到老年区有两种情况</li></ol><ul><li>如果 Eden 执行了 YGC 还是无法放不下该对象，那没得办法，只能说明是超大对象，只能直接放到老年代</li><li>那万一老年代都放不下，则先触发FullGC ，再看看能不能放下，放得下最好，但如果还是放不下，那只能报 OOM</li></ul><ol start="3"><li>如果 Eden 区满了，将对象往幸存区拷贝时，发现幸存区放不下啦，那只能便宜了某些新对象，让他们直接晋升至老年区 <img src="`+r+'" alt=""></li></ol><h2 id="gc分类" tabindex="-1">GC分类 <a class="header-anchor" href="#gc分类" aria-hidden="true">#</a></h2><ol><li>JVM调优的环节，需要尽量避免垃圾回收，因为在垃圾回收中，容易出现（STW），<code>而 Major GC 和 Full GC出现STW的时间，是Minor GC的10倍以上</code></li><li>JVM在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。针对Hotspot VM的实现，它里面的GC按照回收区域又分为两大种类型：一种是<code>部分收集（Partial GC）</code>，一种是<code>整堆收集（FullGC）</code></li></ol><ul><li>部分收集 <ul><li>新生代收集（Minor GC/Young GC）：只是新生代（Eden，s0，s1）的垃圾收集</li><li>老年代收集（Major GC/Old GC）：只是老年代的圾收集。</li><li>混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集。目前，只有G1 GC会有这种行为</li></ul></li><li>整堆收集（Full GC）</li></ul><h3 id="young-gc-minor-gc" tabindex="-1">young GC==Minor GC <a class="header-anchor" href="#young-gc-minor-gc" aria-hidden="true">#</a></h3><ol><li>当年轻代空间不足时，就会触发Minor GC，这里的年轻代满指的是Eden代满。Survivor满不会主动引发GC，在Eden区满的时候，会顺带触发s0区的GC，也就是被动触发GC（每次Minor GC会清理年轻代的内存）</li><li>因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。</li></ol><h3 id="major-gc" tabindex="-1">Major GC <a class="header-anchor" href="#major-gc" aria-hidden="true">#</a></h3><ol><li>发生在老年代的GC</li><li>出现在MajorGC，会伴随至少一次MinorGC <ul><li>在老年代空间不足的时候，也要进行一次MinorGC，很奇怪</li></ul></li><li>MajorGC一般比MinorGC慢10倍，发生STW的几率也大</li><li>如果MajorGC内存不足的时候，就会出现OOM</li></ol><h3 id="fullgc" tabindex="-1">FullGC <a class="header-anchor" href="#fullgc" aria-hidden="true">#</a></h3><p><code>出现的情况</code></p><ol><li>调用System.gc(),系统建议FullGC，但是不一定执行</li><li>老年代空间不足</li><li>方法区空间不足</li><li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</li><li>由Eden区、survivor space0（From Space）区向survivor space1（To Space）区复制时，对象大小大于To Space可 用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</li><li>在java调优的时候一定要减少FullGC，这样STW时间会减少</li></ol><h2 id="堆空间分配" tabindex="-1">堆空间分配 <a class="header-anchor" href="#堆空间分配" aria-hidden="true">#</a></h2><p>为什么要把java堆进行分配，因为在不同的生命周期下，70%-99%的对象都是临时对象</p><ol><li>如果没有分代，所有的对象都被存在统一内存中，那么GC找对象就在所有的所有的内存中进行，性能太低</li><li>但是很多对象都是朝升夕死的，如果分代的话，把新创建的对象放在某一个地方，当GC的时候先把这个朝升夕死对象的区域进行回收</li></ol><h3 id="分配原则" tabindex="-1">分配原则 <a class="header-anchor" href="#分配原则" aria-hidden="true">#</a></h3><ol><li>大对象直接进入老年代（尽量要避免大对象）</li><li>长期存活的对象分配到老年代</li><li>优先分配到Eden：开发中比较长的字符串或者数组，会直接存在老年代，但是因为新创建的对象都是朝生夕死的，所以这个大对象可能也很快被回收，但是因为老年代触发Major GC的次数比 Minor GC要更少，因此可能回收起来就会比较慢</li><li>动态对象年龄判断：如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。</li><li>空间分配担保： -XX:HandlePromotionFailure 。</li></ol><h2 id="tlab为对象分配内存-保证线程安全" tabindex="-1">TLAB为对象分配内存（保证线程安全） <a class="header-anchor" href="#tlab为对象分配内存-保证线程安全" aria-hidden="true">#</a></h2><h3 id="为什么有talb" tabindex="-1">为什么有TALB <a class="header-anchor" href="#为什么有talb" aria-hidden="true">#</a></h3><ol><li>堆区是线程共享的区域，任何线程都可以访问到堆区的共同区域</li><li>对象在JVM创建频繁，并且在并发环境下从堆区中划分内存空间是线程不安全的</li><li>为避免多个线程同时操作同一地址，需要使用加锁等机制，会影响性能</li></ol><h3 id="什么是talb" tabindex="-1">什么是TALB <a class="header-anchor" href="#什么是talb" aria-hidden="true">#</a></h3><ol><li>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为每个线程分配了一个私有缓存区域，它包含在Eden空间内。</li><li>多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为快速分配策略。 <img src="'+t+'" alt=""></li><li>每个线程都有一个TALB</li><li>当一个线程的TLAB存满时，可以使用公共区域（蓝色）的</li></ol><h3 id="talb分配的过程" tabindex="-1">TALB分配的过程 <a class="header-anchor" href="#talb分配的过程" aria-hidden="true">#</a></h3><ol><li>尽管不是所有的对象实例都能在TALB分配空间，但是JVM仍将TALB作为分配空间的首选</li><li>一旦JVM在TALB分配空间失败，JVM就会进行加锁操作，直接在Eden进行内存分配</li><li>默认情况下，TLAB空间的内存非常小，仅占有整个Eden空间的1%，当然我们可以通过选项<code>-XX:TLABWasteTargetPercent</code>设置TLAB空间所占用Eden空间的百分比大小。</li><li>在程序中，开发人员可以通过选项<code>-XX:UseTLAB</code>设置是否开启TLAB空间。</li></ol><p><img src="'+c+`" alt=""></p><h2 id="堆空间参数设置" tabindex="-1">堆空间参数设置 <a class="header-anchor" href="#堆空间参数设置" aria-hidden="true">#</a></h2><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 测试堆空间常用的jvm参数：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * -XX:+PrintFlagsInitial : 查看所有的参数的默认初始值</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * -XX:+PrintFlagsFinal  ：查看所有的参数的最终值（可能会存在修改，不再是初始值）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *      具体查看某个参数的指令： jps：查看当前运行中的进程</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *                             jinfo -flag SurvivorRatio 进程id</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * -Xms：初始堆空间内存 （默认为物理内存的1/64）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * -Xmx：最大堆空间内存（默认为物理内存的1/4）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * -Xmn：设置新生代的大小。(初始值及最大值)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * -XX:NewRatio：配置新生代与老年代在堆结构的占比</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * -XX:SurvivorRatio：设置新生代中Eden和S0/S1空间的比例</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * -XX:MaxTenuringThreshold：设置新生代垃圾的最大年龄</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * -XX:+PrintGCDetails：输出详细的GC处理日志</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 打印gc简要信息：① -XX:+PrintGC   ② -verbose:gc</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * -XX:HandlePromotionFailure：是否设置空间分配担保</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="空间分配担保" tabindex="-1">空间分配担保 <a class="header-anchor" href="#空间分配担保" aria-hidden="true">#</a></h3><p>在进行Minor GC的时候，首先虚拟机会检查老年代最大可用的连续空间是否大于新生代所有的内存空间</p><ul><li>如果大于，此次GC是安全的</li><li>如果小于，则虚拟机会查看**-XX:HandlePromotionFailure**设置值是否允担保失败。 <ul><li>如果HandlePromotionFailure=true，那么会继续检查老年代的连续空间是否大于历次晋升到老年代的对象的平均大小 <ul><li>如果大于，进行一次MinorGC</li><li>如果小于，进行一次FullGC</li></ul></li><li>如果HandlePromotionFailure=false，则进行一次Full GC。</li></ul></li></ul><blockquote><p>JDK6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行Full GC。即 HandlePromotionFailure=true</p></blockquote><h3 id="堆是分配空间的唯一选择吗" tabindex="-1">堆是分配空间的唯一选择吗 <a class="header-anchor" href="#堆是分配空间的唯一选择吗" aria-hidden="true">#</a></h3><p><code>在《深入理解Java虚拟机》中关于Java堆内存有这样一段描述：</code></p><ol><li>随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。</li><li>在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是<code>如果经过逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配</code>。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。</li><li>此外，前面提到的基于OpenJDK深度定制的TaoBao VM，其中创新的GCIH（GC invisible heap）技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。</li></ol><h3 id="逃逸分析" tabindex="-1">逃逸分析 <a class="header-anchor" href="#逃逸分析" aria-hidden="true">#</a></h3><ol><li>如何将堆上的对象分配到栈，需要使用逃逸分析手段。</li><li>这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。</li><li>通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。</li><li>逃逸分析的基本行为就是分析对象动态作用域：</li></ol><ul><li>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li><li>当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。</li></ul><h4 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-hidden="true">#</a></h4><p>没有发生逃逸现象的对象，可以分配到栈，随着方法的结束，栈空间就会被移除</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Demo1</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">V</span><span style="color:#A6ACCD;"> v</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">V</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">  v</span><span style="color:#89DDFF;">=null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>下面的StringBuilder就会发生逃逸现象</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">StringBuilder</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Demo1</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> s1</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> s2</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">StringBuilder</span><span style="color:#A6ACCD;"> sb </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StringBuilder</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> sb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果想要StringBuilder不会出现逃逸的现象</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Demo1</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> s1</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> s2</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">StringBuilder</span><span style="color:#A6ACCD;"> sb </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StringBuilder</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 逃逸分析</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  如何快速的判断是否发生了逃逸分析，大家就看new的对象实体是否有可能在方法外被调用。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EscapeAnalysis</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">EscapeAnalysis</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    方法返回EscapeAnalysis对象，发生逃逸</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">EscapeAnalysis</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EscapeAnalysis</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    为成员属性赋值，发生逃逸</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setObj</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EscapeAnalysis</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//思考：如果当前的obj引用声明为static的？仍然会发生逃逸。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    对象的作用域仅在当前方法中有效，没有发生逃逸</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useEscapeAnalysis</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">EscapeAnalysis</span><span style="color:#A6ACCD;"> e </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EscapeAnalysis</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    引用成员变量的值，发生逃逸</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useEscapeAnalysis1</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">EscapeAnalysis</span><span style="color:#A6ACCD;"> e </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//getInstance().xxx()同样会发生逃逸</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h4><p>开发中可以适用局部变量的，就不要再外边方法定义</p><h3 id="代码优化" tabindex="-1">代码优化 <a class="header-anchor" href="#代码优化" aria-hidden="true">#</a></h3><ol><li><code>栈上分配</code>：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会发生逃逸，对象可能是栈上分配的候选，而不是堆上分配</li><li><code>同步省略</code>：如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</li><li>\`\`</li></ol>`,87),D=[y];function C(A,F,b,u,d,m){return n(),a("div",null,D)}const g=s(i,[["render",C]]);export{v as __pageData,g as default};
