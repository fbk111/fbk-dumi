import{_ as s,o as n,c as a,a as l}from"./app.19465836.js";const p="/assets/堆.91929b98.png",o="/assets/设置内存.7f57060f.png",e="/assets/GC.f0bef90c.png",r="/assets/GC过程.ab516271.png",m=JSON.parse('{"title":"jvm-堆","description":"","frontmatter":{},"headers":[{"level":2,"title":"堆核心","slug":"堆核心","link":"#堆核心","children":[{"level":3,"title":"堆与进程","slug":"堆与进程","link":"#堆与进程","children":[]},{"level":3,"title":"堆内存细分","slug":"堆内存细分","link":"#堆内存细分","children":[]}]},{"level":2,"title":"设置堆内存大小和OOM","slug":"设置堆内存大小和oom","link":"#设置堆内存大小和oom","children":[{"level":3,"title":"OOM","slug":"oom","link":"#oom","children":[]}]},{"level":2,"title":"年轻代与老年代","slug":"年轻代与老年代","link":"#年轻代与老年代","children":[]},{"level":2,"title":"对象分配过程","slug":"对象分配过程","link":"#对象分配过程","children":[{"level":3,"title":"特殊情况","slug":"特殊情况","link":"#特殊情况","children":[]}]},{"level":2,"title":"GC分类","slug":"gc分类","link":"#gc分类","children":[{"level":3,"title":"young GC==Minor GC","slug":"young-gc-minor-gc","link":"#young-gc-minor-gc","children":[]},{"level":3,"title":"Major GC","slug":"major-gc","link":"#major-gc","children":[]}]}],"relativePath":"jvm/jvm3.md","lastUpdated":1675090210000}'),t={name:"jvm/jvm3.md"},c=l(`<h1 id="jvm-堆" tabindex="-1">jvm-堆 <a class="header-anchor" href="#jvm-堆" aria-hidden="true">#</a></h1><p>作者: fbk 时间：2023-1-30 地点：济南</p><h2 id="堆核心" tabindex="-1">堆核心 <a class="header-anchor" href="#堆核心" aria-hidden="true">#</a></h2><h3 id="堆与进程" tabindex="-1">堆与进程 <a class="header-anchor" href="#堆与进程" aria-hidden="true">#</a></h3><ol><li>一个进程中只有一个JVM实例，一个JVM实例只有一个运行时数据区，一个运行时数据区只有一个堆和方法区</li><li>进程包含多个线程，共享同一堆空间</li><li>JVM堆区域在JVM启动时就创建了，空间大小也就确定了，堆是JVM管理的最大的内存空间，并且堆是可以调节的</li><li>堆可以处于物理上不连续的内存空间，但是逻辑上可以视为连续的</li><li>所有的线程可以共享堆，并且还可以划分线程私有的缓冲区</li><li>数组和对象可能永远不会存储在栈上（不一定），因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</li><li>在方法结束后，堆中的对象不会马上移除，仅仅在垃圾收集的时候才会移除</li></ol><ul><li>也就是触发了GC的时候，才会进行回收</li><li>如果堆中对象马上被回收，那么用户线程就会收到影响，因为有stop the word</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SimpleHeap</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//属性、成员变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SimpleHeap</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">show</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My ID is </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SimpleHeap</span><span style="color:#A6ACCD;"> sl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SimpleHeap</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SimpleHeap</span><span style="color:#A6ACCD;"> s2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SimpleHeap</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> arr1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><img src="`+p+`" alt=""></p><h3 id="堆内存细分" tabindex="-1">堆内存细分 <a class="header-anchor" href="#堆内存细分" aria-hidden="true">#</a></h3><ol><li>java7之前堆内存逻辑上分为新生区+养老区+永久区</li><li>java8之后分为新生区+养老区+元空间</li><li>约定：新生区 &lt;–&gt; 新生代 &lt;–&gt; 年轻代 、 养老区 &lt;–&gt; 老年区 &lt;–&gt; 老年代、 永久区 &lt;–&gt; 永久代</li></ol><h2 id="设置堆内存大小和oom" tabindex="-1">设置堆内存大小和OOM <a class="header-anchor" href="#设置堆内存大小和oom" aria-hidden="true">#</a></h2><ol><li>java堆区用于储存java对象实例，可以通过<code>-Xms(最小)</code>和<code>-Xmx(最大)</code>查看</li><li>一旦堆区超过最大的-Xmx，就会出现OOM现象</li><li>默认情况下</li></ol><ul><li>最小内存是物理电脑内存大小的1/64</li><li>最大内存是物理电脑的1/4</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">//返回java虚拟的的堆总内存</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> initialMemory </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Runtime</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getRuntime</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">totalMemory</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//获取虚拟机使用的最大内存</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> maxMemory </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Runtime</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getRuntime</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">maxMemory</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-Xms : </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> initialMemory </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">M</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-Xmx : </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> maxMemory </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">M</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">系统内存大小为：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> initialMemory </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">64.0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">G</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">系统内存大小为：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> maxMemory </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4.0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">G</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">-Xms : 241M</span></span>
<span class="line"><span style="color:#A6ACCD;">-Xmx : 3580M</span></span>
<span class="line"><span style="color:#A6ACCD;">系统内存大小为：15.0625G</span></span>
<span class="line"><span style="color:#A6ACCD;">系统内存大小为：13.984375G</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>电脑是16G内存，因为操作系统还占据部分内存 <img src="`+o+`" alt=""> 输出结果</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">-Xms : 575M</span></span>
<span class="line"><span style="color:#A6ACCD;">-Xmx : 575M</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>为什么会少25M</p><blockquote><p>使用JPS查看java进程 使用tstat -gc进程ID <img src="`+e+`" alt=""></p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">SOC: S0区总共容量</span></span>
<span class="line"><span style="color:#A6ACCD;">S1C: S1区总共容量</span></span>
<span class="line"><span style="color:#A6ACCD;">S0U: S0区使用的量</span></span>
<span class="line"><span style="color:#A6ACCD;">S1U: S1区使用的量</span></span>
<span class="line"><span style="color:#A6ACCD;">EC: 伊甸园区总共容量</span></span>
<span class="line"><span style="color:#A6ACCD;">EU: 伊甸园区使用的量</span></span>
<span class="line"><span style="color:#A6ACCD;">OC: 老年代总共容量</span></span>
<span class="line"><span style="color:#A6ACCD;">OU: 老年代使用的量</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>S0或者S1只能使用一个，另一个用不了，所以就造成了栈内存比定义的内存少25M</p><h3 id="oom" tabindex="-1">OOM <a class="header-anchor" href="#oom" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Demo2</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Picture</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> list</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(true){</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">InterruptedException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">                e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Picture</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Random</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">nextInt</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">)));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Picture</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> bytes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Picture</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">length</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>输出结果</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">Exception</span><span style="color:#A6ACCD;"> in thread </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> java</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lang</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OutOfMemoryError</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Java</span><span style="color:#A6ACCD;"> heap space</span></span>
<span class="line"><span style="color:#A6ACCD;">	at com</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">atguigu</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">java</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Picture</span><span style="color:#89DDFF;">.&lt;</span><span style="color:#A6ACCD;">init</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">OOMTest</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">java</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#F78C6C;">29</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	at com</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">atguigu</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">java</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OOMTest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">OOMTest</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">java</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">Process</span><span style="color:#A6ACCD;"> finished with exit code </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol><li><p>堆内存变化</p></li><li><p>大对象导致堆内存溢出</p></li></ol><h2 id="年轻代与老年代" tabindex="-1">年轻代与老年代 <a class="header-anchor" href="#年轻代与老年代" aria-hidden="true">#</a></h2><ol><li>储存在JVM中的java对象可以划分为两类</li></ol><ul><li>一类是生命周期较短的瞬间对象，这类对象的创建和消亡都非常迅速</li><li>另一类生命对象的周期很长，在某些极端的情况下还能够与JVM生命周期保持一致</li></ul><ol start="2"><li>java堆区可以划分为年轻代和老年代</li><li>年轻代又有Eden区，Survivor0和Survivor0</li><li>新生代和老年代的分配</li></ol><ul><li>默认**-XX:NewRatio**=2，表示新生代占1，老年代占2，新生代占整个堆的1/3</li><li>可以修改**-XX:NewRatio**=4，表示新生代占1，老年代占4，新生代占整个堆的1/5</li></ul><ol start="5"><li>在HotSpot虚拟机下，Eden和另外两个survivor的比例是8：1：1，并且可以调整-XX:SurvivorRatio=8</li><li>几乎所有的java对象都是在Eden创建出来的</li><li>可以使用选项”-Xmn”设置新生代最大内存大小，但这个参数一般使用默认值就可以了。</li></ol><h2 id="对象分配过程" tabindex="-1">对象分配过程 <a class="header-anchor" href="#对象分配过程" aria-hidden="true">#</a></h2><ol><li>new的对象先放在Eden区，此区大小有限制</li><li>当Eden空间填满，当需要创建对象，JVM垃圾回收器对Eden进行垃圾回收，没有被回收的对象放入from区（有可能是s1区，或者是s2区）</li><li>当Eden区满，继续进行GC，并且survivor区也要进行GC，他们的年龄不断增加，如果没有回收，继续进行survivor区切换，从form区变为to区，之后from区变为to区，to区变为from区</li><li>当对象的年龄到达15，对象放入老年代</li></ol><h3 id="特殊情况" tabindex="-1">特殊情况 <a class="header-anchor" href="#特殊情况" aria-hidden="true">#</a></h3><ol><li>如果新对象放入Eden，先看Eden是否放得下</li></ol><ul><li>如果Eden放得下，则放入Eden区</li><li>如果Eden放不下，首先进行YGC,执行垃圾回收，看看是否放得下</li></ul><ol start="2"><li>将对象放入到老年区有两种情况</li></ol><ul><li>如果 Eden 执行了 YGC 还是无法放不下该对象，那没得办法，只能说明是超大对象，只能直接放到老年代</li><li>那万一老年代都放不下，则先触发FullGC ，再看看能不能放下，放得下最好，但如果还是放不下，那只能报 OOM</li></ul><ol start="3"><li>如果 Eden 区满了，将对象往幸存区拷贝时，发现幸存区放不下啦，那只能便宜了某些新对象，让他们直接晋升至老年区 <img src="`+r+'" alt=""></li></ol><h2 id="gc分类" tabindex="-1">GC分类 <a class="header-anchor" href="#gc分类" aria-hidden="true">#</a></h2><ol><li>JVM调优的环节，需要尽量避免垃圾回收，因为在垃圾回收中，容易出现（STW），<code>而 Major GC 和 Full GC出现STW的时间，是Minor GC的10倍以上</code></li><li>JVM在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。针对Hotspot VM的实现，它里面的GC按照回收区域又分为两大种类型：一种是<code>部分收集（Partial GC）</code>，一种是<code>整堆收集（FullGC）</code></li></ol><ul><li>部分收集 <ul><li>新生代收集（Minor GC/Young GC）：只是新生代（Eden，s0，s1）的垃圾收集</li><li>老年代收集（Major GC/Old GC）：只是老年代的圾收集。</li><li>混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集。目前，只有G1 GC会有这种行为</li></ul></li><li>整堆收集（Full GC）</li></ul><h3 id="young-gc-minor-gc" tabindex="-1">young GC==Minor GC <a class="header-anchor" href="#young-gc-minor-gc" aria-hidden="true">#</a></h3><ol><li>当年轻代空间不足时，就会触发Minor GC，这里的年轻代满指的是Eden代满。Survivor满不会主动引发GC，在Eden区满的时候，会顺带触发s0区的GC，也就是被动触发GC（每次Minor GC会清理年轻代的内存）</li><li>因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。</li></ol><h3 id="major-gc" tabindex="-1">Major GC <a class="header-anchor" href="#major-gc" aria-hidden="true">#</a></h3>',46),i=[c];function D(y,C,A,F,u,d){return n(),a("div",null,i)}const h=s(t,[["render",D]]);export{m as __pageData,h as default};
