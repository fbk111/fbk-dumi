import{_ as l,o as i,c as e,a}from"./app.9287c781.js";const h="/assets/数据表示范围.8f3b3fb5.png",r="/assets/层次化结构.f5b85eff.png",d="/assets/磁盘时间.923f38ba.png",t="/assets/磁盘时间例1.c93239c4.png",n="/assets/磁盘时间例2.4cea70a2.png",c="/assets/串并联.8cb405d1.png",s="/assets/海明校验码.52e062bf.png",u="/assets/进程状态.b1765f1c.png",o="/assets/pv.274f784c.png",p="/assets/pv案例.ee92a868.png",g="/assets/冷热备份.d1d8d107.png",b="/assets/数据故障.3a950ca7.png",f="/assets/网络的协议和标准.d9c9524f.png",v="/assets/网络的规划和设计.ce590023.png",_="/assets/特殊ip.62a2c51c.png",T=JSON.parse('{"title":"1","description":"","frontmatter":{},"headers":[{"level":2,"title":"数据的表示","slug":"数据的表示","link":"#数据的表示","children":[{"level":3,"title":"数据的表示范围","slug":"数据的表示范围","link":"#数据的表示范围","children":[]}]},{"level":2,"title":"计算机结构","slug":"计算机结构","link":"#计算机结构","children":[]},{"level":2,"title":"流水线","slug":"流水线","link":"#流水线","children":[]},{"level":2,"title":"流水线吞吐率计算","slug":"流水线吞吐率计算","link":"#流水线吞吐率计算","children":[]},{"level":2,"title":"流水线加速比","slug":"流水线加速比","link":"#流水线加速比","children":[]},{"level":2,"title":"流水线的效率","slug":"流水线的效率","link":"#流水线的效率","children":[]},{"level":2,"title":"层次化的存储结构","slug":"层次化的存储结构","link":"#层次化的存储结构","children":[]},{"level":2,"title":"cahche","slug":"cahche","link":"#cahche","children":[]},{"level":2,"title":"局部性原理","slug":"局部性原理","link":"#局部性原理","children":[]},{"level":2,"title":"主存分类","slug":"主存分类","link":"#主存分类","children":[{"level":3,"title":"=主存和cache的映射关系","slug":"主存和cache的映射关系","link":"#主存和cache的映射关系","children":[]}]},{"level":2,"title":"磁盘结构和参数","slug":"磁盘结构和参数","link":"#磁盘结构和参数","children":[]},{"level":2,"title":"总线","slug":"总线","link":"#总线","children":[]},{"level":2,"title":"串联系统-并联系统","slug":"串联系统-并联系统","link":"#串联系统-并联系统","children":[]},{"level":2,"title":"差错控制-CRC与海明校验码","slug":"差错控制-crc与海明校验码","link":"#差错控制-crc与海明校验码","children":[]},{"level":2,"title":"进程状态转换","slug":"进程状态转换","link":"#进程状态转换","children":[]},{"level":2,"title":"进程的同步和互斥（PV）","slug":"进程的同步和互斥-pv","link":"#进程的同步和互斥-pv","children":[]},{"level":2,"title":"PV操作","slug":"pv操作","link":"#pv操作","children":[]},{"level":2,"title":"死锁问题","slug":"死锁问题","link":"#死锁问题","children":[]},{"level":2,"title":"死锁地避免","slug":"死锁地避免","link":"#死锁地避免","children":[]},{"level":2,"title":"数据库","slug":"数据库","link":"#数据库","children":[{"level":3,"title":"键","slug":"键","link":"#键","children":[]},{"level":3,"title":"范式","slug":"范式","link":"#范式","children":[]},{"level":3,"title":"并发控制","slug":"并发控制","link":"#并发控制","children":[]}]},{"level":2,"title":"大数据","slug":"大数据","link":"#大数据","children":[]},{"level":2,"title":"七层模型","slug":"七层模型","link":"#七层模型","children":[]},{"level":2,"title":"网络技术标准和协议","slug":"网络技术标准和协议","link":"#网络技术标准和协议","children":[]},{"level":2,"title":"网络结构-拓扑结构","slug":"网络结构-拓扑结构","link":"#网络结构-拓扑结构","children":[]},{"level":2,"title":"网络的规划和设计","slug":"网络的规划和设计","link":"#网络的规划和设计","children":[]},{"level":2,"title":"ip地址-子网划分","slug":"ip地址-子网划分","link":"#ip地址-子网划分","children":[]},{"level":2,"title":"网络接入技术","slug":"网络接入技术","link":"#网络接入技术","children":[]},{"level":2,"title":"ipv6","slug":"ipv6","link":"#ipv6","children":[]},{"level":2,"title":"安全属性","slug":"安全属性","link":"#安全属性","children":[]},{"level":2,"title":"加密技术","slug":"加密技术","link":"#加密技术","children":[{"level":3,"title":"对称加密技术","slug":"对称加密技术","link":"#对称加密技术","children":[]},{"level":3,"title":"非对称加密算法","slug":"非对称加密算法","link":"#非对称加密算法","children":[]},{"level":3,"title":"数字签名","slug":"数字签名","link":"#数字签名","children":[]},{"level":3,"title":"例题","slug":"例题","link":"#例题","children":[]}]}],"relativePath":"软件设计师/1.md","lastUpdated":1677681209000}'),x={name:"软件设计师/1.md"},k=a('<h1 id="_1" tabindex="-1">1 <a class="header-anchor" href="#_1" aria-hidden="true">#</a></h1><p>作者: fbk 时间：2023-2-21 地点：济南</p><blockquote><p>足够优秀再大方拥有</p></blockquote><h2 id="数据的表示" tabindex="-1">数据的表示 <a class="header-anchor" href="#数据的表示" aria-hidden="true">#</a></h2><ul><li>原码</li><li>反码 <ul><li>正数的原码和反码相同</li><li>负数的原码<code>除符号位</code>取反</li></ul></li><li>补码 <ul><li>正数的补码和原码相同</li><li>负数的补码是反码+1</li></ul></li><li>移码：作为浮点运算的介码，不管是正数还是负数，都在补码的基础上对<code>符号位取反</code></li></ul><h3 id="数据的表示范围" tabindex="-1">数据的表示范围 <a class="header-anchor" href="#数据的表示范围" aria-hidden="true">#</a></h3><p><img src="'+h+'" alt=""></p><h2 id="计算机结构" tabindex="-1">计算机结构 <a class="header-anchor" href="#计算机结构" aria-hidden="true">#</a></h2><ul><li>运算器 <ol><li>算术逻辑单元ALU： 跟运算相关</li><li>累加寄存器AC： 常用于ALU执行算数逻辑运算提供数据并暂存运算结果的寄存器</li><li>数据缓冲寄存器DR： 对内存储器进行读写操作的时候，用来暂存数据的寄存器</li><li>状态条件寄存器PSW： 记录运算中产生的标志信息，每一位单独使用，成为标志位（进位，溢出，中断…）</li></ol></li><li>控制器：控制整个计算机各部件有条不紊的工作，其基本功能是取指令与执行指令 <ol><li>程序计数器PC： 用来存放指令地址，运行时用来获取下一条指令的位置。</li><li>指令寄存器IR： 存储正在执行的指令，存储位数由指令字长决定。</li><li>指令译码器ID： 分析指令的操作码，来决定操作的性质与分法。</li><li>时序部件： CPU执行指令时根据时序部件发出的时钟信号进行相应操作，在取指阶段读取指令，在分析和执行阶段读取数据。</li></ol></li></ul><h2 id="流水线" tabindex="-1">流水线 <a class="header-anchor" href="#流水线" aria-hidden="true">#</a></h2><ul><li>如果把流水线的一条指令分为取值，分析和执行三部分，且三部分的时间分别是取指2ns，分析2ns，执行1ns</li><li>流水线周期是执行时间最长的一段，也就是2ns</li><li>100条指令全部执行完毕需要多长时间 <ul><li>1条指令执行的时间<code>1条指令执行的时间+（指令条数-1）*流水线周期</code></li><li>流水线计算理论公式是<code>(t1+t2+...tk)+(n-1)*t</code></li><li>流水线计算实践公式是<code>(k+n-1)*t</code></li></ul></li></ul><h2 id="流水线吞吐率计算" tabindex="-1">流水线吞吐率计算 <a class="header-anchor" href="#流水线吞吐率计算" aria-hidden="true">#</a></h2><h2 id="流水线加速比" tabindex="-1">流水线加速比 <a class="header-anchor" href="#流水线加速比" aria-hidden="true">#</a></h2><p>完成同样一批任务，不使用流水线所用的时间与使用流水线所用的时间之比称为流水线加速比</p><h2 id="流水线的效率" tabindex="-1">流水线的效率 <a class="header-anchor" href="#流水线的效率" aria-hidden="true">#</a></h2><p>流水线的设备利用率</p><h2 id="层次化的存储结构" tabindex="-1">层次化的存储结构 <a class="header-anchor" href="#层次化的存储结构" aria-hidden="true">#</a></h2><p><img src="'+r+'" alt=""></p><h2 id="cahche" tabindex="-1">cahche <a class="header-anchor" href="#cahche" aria-hidden="true">#</a></h2><ul><li>cahce的功能：提高CPU的传出数据</li><li>子啊计算机的系统体系中，cache是访问速度最快的一层</li><li>使用cache改善系统性能的依据是程序的局部性原理</li></ul><p>如果以h代表队cache的访问命中率，t1表示cache的周期时间，t2表示主存储器周期时间，以读操作为例，使用cache+主存储器的系统平均周期位t3</p><p>t3=h*t1+(1-h)*t2</p><p>1-h被称为失效率</p><h2 id="局部性原理" tabindex="-1">局部性原理 <a class="header-anchor" href="#局部性原理" aria-hidden="true">#</a></h2><ul><li>空间局部性</li><li>时间局部性</li></ul><h2 id="主存分类" tabindex="-1">主存分类 <a class="header-anchor" href="#主存分类" aria-hidden="true">#</a></h2><ul><li>随机存取存储器(RAM)：断电后存储的信息丢失</li><li>只读存储器（ROM）：断电后存储的信息不丢失</li></ul><h3 id="主存和cache的映射关系" tabindex="-1">=主存和cache的映射关系 <a class="header-anchor" href="#主存和cache的映射关系" aria-hidden="true">#</a></h3><ol><li>全相联映射:主存的任意一块可以映射到cache的任意一块</li><li>直接相连：主存中一块只能映射到cache的一个特定块中</li><li>组相联映射：各区中某一块只能存入缓存同组号空间，但组内各块之间则可以任意存放</li><li></li></ol><h2 id="磁盘结构和参数" tabindex="-1">磁盘结构和参数 <a class="header-anchor" href="#磁盘结构和参数" aria-hidden="true">#</a></h2><p>存取时间=寻道时间+等待时间（平均定位时间+转动延迟） <img src="'+d+'" alt=""></p><ul><li>第一空 <img src="'+t+'" alt=""></li></ul><ol><li>开始读取R0的数据，消耗3ns的时间，但是这样的话就不能读取到R1的数据，所以圆盘需要绕一周才能读取R1的数据</li><li>因为有11个扇区，所以绕一周的时间加上自己去读取的时间就是33+3</li><li>一共需要自己读取10个扇区数据，因为R0是直接读的，所以只需要计算R1到R10</li><li>也就是(33+3)*10+6=366</li></ol><ul><li>第二空</li></ul><p><img src="'+n+'" alt=""></p><ol><li>这样读取也就是先读取R0的数据，然后经过3ns解析，此时数据正好经过的是R6，也就是不需要转一圈就可以接着读取R1</li><li>所以时间是每个读取解析的时间6ns乘上11个</li></ol><h2 id="总线" tabindex="-1">总线 <a class="header-anchor" href="#总线" aria-hidden="true">#</a></h2><ul><li>内部总线</li><li>系统总线 <ul><li>数据总线</li><li>地址总线</li><li>控制总线</li></ul></li><li>外部总线</li></ul><h2 id="串联系统-并联系统" tabindex="-1">串联系统-并联系统 <a class="header-anchor" href="#串联系统-并联系统" aria-hidden="true">#</a></h2><p><img src="'+c+'" alt=""></p><h2 id="差错控制-crc与海明校验码" tabindex="-1">差错控制-CRC与海明校验码 <a class="header-anchor" href="#差错控制-crc与海明校验码" aria-hidden="true">#</a></h2><p><img src="'+s+'" alt=""></p><p>校验码都是存放在2的n次方位，也就是2^r&gt;=x+r+1</p><p>x就是信息位的个数，r就是检验位</p><p>确定校验码位3位，也就是2^3&gt;=8,只能放在2^0,2^1,2^2这几个地方</p><h2 id="进程状态转换" tabindex="-1">进程状态转换 <a class="header-anchor" href="#进程状态转换" aria-hidden="true">#</a></h2><p><img src="'+u+'" alt=""></p><h2 id="进程的同步和互斥-pv" tabindex="-1">进程的同步和互斥（PV） <a class="header-anchor" href="#进程的同步和互斥-pv" aria-hidden="true">#</a></h2><ul><li>互斥：千军万马过独木桥</li><li>同步：速度有差异，在一定情况停下等待</li></ul><h2 id="pv操作" tabindex="-1">PV操作 <a class="header-anchor" href="#pv操作" aria-hidden="true">#</a></h2><ul><li>临界资源：诸进程间需要互斥方式对其进行共享的资源</li><li>临界区：每个进程中访问临界资源的那段代码称为临界区</li><li>信号量：是一种特殊的变量</li></ul><p><img src="'+o+'" alt=""></p><p>p相当于把一个进程在不符合条件的情况下放入进程队列，而v操作就相当于是否取出进程队列的操作，p就是阻塞，v就是唤醒</p><p><img src="'+p+'" alt=""></p><ol><li>如果把a1，a2，b1，b2去掉的话，可以设想一下，收银员可能会立刻执行收费，但是这样不符合逻辑</li><li>所以在b1，如果没有人付款，就要一直进行p操作，直到a1有人付款，就会执行v操作唤醒b1</li><li>如果有人想要离开，为了确定他是否真的付了款，所以要在a2一直等待b2提示是否付款成功，所以a2就执行p操作，b2就执行v操作</li></ol><h2 id="死锁问题" tabindex="-1">死锁问题 <a class="header-anchor" href="#死锁问题" aria-hidden="true">#</a></h2><p>如果线程中有三个进程A,B,C,这三个进程都需要5个系统资源，那么至少需要几个资源？</p><ul><li>如果只给她分配10个资源，那么334依然导致死锁问题</li><li>如果分配13个，那么每个我们可以给他先分配4个资源，然后最后的资源不管给谁，他都可以完成5个资源的要求，从而释放资源</li><li>所以公式就是<code>线程个数*(每个线程需要的系统资源-1)+1</code></li></ul><h2 id="死锁地避免" tabindex="-1">死锁地避免 <a class="header-anchor" href="#死锁地避免" aria-hidden="true">#</a></h2><ul><li>有序资源分配法：先分给a，后分给b，再分给c，但是这样存在的问题就是效率太低</li><li>银行家算法 <ul><li>当一个线程对资源的最大需求不超过系统中的资源数时可以接纳线程</li><li>线程可以分期请求资源，但请求的总数不能超过最大需求量</li><li>当线程现有的资源不能满足进程尚需资源时，对线程的请求可以延迟分配，但总能使进程在有限的时间得到资源</li></ul></li></ul><h2 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-hidden="true">#</a></h2><h3 id="键" tabindex="-1">键 <a class="header-anchor" href="#键" aria-hidden="true">#</a></h3><ol><li>超键 <ul><li>唯一标识元组</li></ul></li><li>候选键 <ul><li>消除多余属性，唯一标识元组</li><li>候选键和超键的区别就是候选键要消除多余的冗余属性</li><li>比如说（名字+学号）可以确定性别，那他就是超键，但它不是候选键，因为学号就可以确定性别了，再加上姓名就冗余了</li></ul></li><li>主键 <ul><li>主键只能有一个</li></ul></li><li>外键</li></ol><h4 id="求候选键" tabindex="-1">求候选键 <a class="header-anchor" href="#求候选键" aria-hidden="true">#</a></h4><ul><li>采用图示法求候选键，将给定关系采用连线的方式连接</li><li>筛选结果 <ul><li>入度为0，只能它指向别人，不能别人指向它</li><li>并且可以遍历整个循环</li></ul></li></ul><h3 id="范式" tabindex="-1">范式 <a class="header-anchor" href="#范式" aria-hidden="true">#</a></h3><ol><li>第一范式 <ul><li>属性值都是原子不可分</li></ul></li><li>第二范式 <ul><li>属性值时原子不可分，并且消除非主属性对候选键的部份依赖</li></ul></li><li>第三范式 <ul><li>属性值时原子不可分，并且消除非主属性对候选键的部份依赖，消除主属性对候选键的1传递依赖</li></ul></li></ol><h3 id="并发控制" tabindex="-1">并发控制 <a class="header-anchor" href="#并发控制" aria-hidden="true">#</a></h3><ol><li>原子性</li><li>一致性</li><li>隔离性</li><li>持续性</li></ol><h4 id="并发操作和并行操作的问题" tabindex="-1">并发操作和并行操作的问题 <a class="header-anchor" href="#并发操作和并行操作的问题" aria-hidden="true">#</a></h4><ol><li>丢失更新 <ol><li>t1先读取A=10</li><li>t2读取A=10</li><li>t1对A-5</li><li>t2对A-10</li><li>最终结果是0</li><li>这就证明了t1的结果没有修改，所以这就是丢失更新</li></ol></li><li>不可重复度 <ol><li>t1读取A=20，b=30，求和是50，t1为了验证结果再次进行烟瘴</li><li>t2读取A=20，将A+50变成70</li><li>验证的时候t1再次读取A=70，b=30，验证失败</li></ol></li><li>读脏数据 <ol><li>t1读取A=20，将A加上50返回A=70</li><li>t2读A=70</li><li>t1回滚数据又让A变成20</li></ol></li></ol><h4 id="数据库安全" tabindex="-1">数据库安全 <a class="header-anchor" href="#数据库安全" aria-hidden="true">#</a></h4><ol><li>用户标识和鉴定 <ul><li>最外层的安全保护措施，可以使用用户账户、口令及随机数检验等方式</li></ul></li><li>存取控制 <ul><li>对用户进行授权，包括操作类型（查找，插入，修改，删除等动作）和数据对象的权限</li></ul></li><li>密码储存和传输 <ul><li>对远程中断信息用密码传输</li></ul></li><li>视图的保护 <ul><li>对试图进行授权</li></ul></li><li>审计 <ul><li>使用一个专用文件和数据库，自动将用户对数据库的操作记录下来</li></ul></li></ol><h4 id="冷备份" tabindex="-1">冷备份 <a class="header-anchor" href="#冷备份" aria-hidden="true">#</a></h4><ol><li>冷备份是静态备份，将数据库停下来将文件备份</li><li>热备份是利用备份软件在数据库正常运行的状态进行备份 <img src="'+g+'" alt=""></li></ol><h4 id="数据备份" tabindex="-1">数据备份 <a class="header-anchor" href="#数据备份" aria-hidden="true">#</a></h4><ul><li>完全备份:备份所有的数据</li><li>差量备份：仅备份上一次完全备份之后的变化数据</li><li>增量备份：备份上一次备份之后变化的数据 <img src="'+b+'" alt=""></li></ul><h2 id="大数据" tabindex="-1">大数据 <a class="header-anchor" href="#大数据" aria-hidden="true">#</a></h2><ol><li>数据量</li><li>速度</li><li>多样性</li><li>值</li></ol><h2 id="七层模型" tabindex="-1">七层模型 <a class="header-anchor" href="#七层模型" aria-hidden="true">#</a></h2><ol><li><p>物理层</p></li><li><p>数据链路层</p><ul><li>传输以桢为单位的信息</li><li></li></ul></li><li><p>网络层</p><ul><li>分组传输和路由选择</li></ul></li><li><p>传输层</p></li><li><p>会话层</p></li><li><p>表示层</p></li><li><p>应用层</p></li></ol><h2 id="网络技术标准和协议" tabindex="-1">网络技术标准和协议 <a class="header-anchor" href="#网络技术标准和协议" aria-hidden="true">#</a></h2><p><img src="'+f+'" alt=""></p><ul><li>TCP/IP协议：Internet，可拓展，可靠，应用最广，牺牲速度和效率</li><li>IPX/SPX协议：NOVELL，路由，大型企业网</li><li>NETBEUI协议：IBM，非路由，快速</li><li>DHCP协议：负责动态分配ip协议，服务器会自动向客户机分配ip，默认租约是8天 <ul><li>当租约是过半，客户机要向DHCP服务器申请租约</li><li>当租约超过87.5%，如果没有和当初分配ip的DHCP联系起来，则开始联系其他DHCP服务器</li><li>当window下分配的ip是169.254.xx或者是0.0.0.0，这就证明你和DHCP服务器联系丢失</li></ul></li><li>DNS服务器： <ul><li>将ip转化为域名</li><li>递归查询 <ul><li>中间域名服务器</li></ul></li><li>迭代查询 <ul><li>根域名服务器</li></ul></li></ul></li></ul><h2 id="网络结构-拓扑结构" tabindex="-1">网络结构-拓扑结构 <a class="header-anchor" href="#网络结构-拓扑结构" aria-hidden="true">#</a></h2><ul><li>按分布范围分 <ul><li>局域网</li><li>城域网</li><li>广域网</li><li>因特网</li></ul></li><li>按拓扑结构分 <ul><li>总线型</li><li>星形</li><li>环形</li></ul></li></ul><h2 id="网络的规划和设计" tabindex="-1">网络的规划和设计 <a class="header-anchor" href="#网络的规划和设计" aria-hidden="true">#</a></h2><p><img src="'+v+'" alt=""></p><h2 id="ip地址-子网划分" tabindex="-1">ip地址-子网划分 <a class="header-anchor" href="#ip地址-子网划分" aria-hidden="true">#</a></h2><ul><li>将B类IP地址168.195.0.0划分成27个子网，子网掩码为多少?</li></ul><p>将十进制168.195.0.0改成二级制，因为是B类IP，所以默认网络标号是前16个bit位 1个bit位可以取2个子网，2个bit位可以取得4个子网，3个bit位可以取得8个子网，所以最终的计算公式是2^k=n,k代表几个bit位，n是最终的主机号，二进制中1代表网络号，0代表主机号 <img src="'+_+'" alt=""></p><h2 id="网络接入技术" tabindex="-1">网络接入技术 <a class="header-anchor" href="#网络接入技术" aria-hidden="true">#</a></h2><ul><li>有线接入 <ul><li>共用电话（PSTN）</li><li>数字数据网（DDN）</li><li>综合业务数字网（ISDN）</li><li>非对称数字用户线路（ADSL）</li><li>同轴光纤接入（HFC）</li></ul></li><li>无线接入 <ul><li>WIFI</li><li>蓝牙</li><li>红外</li><li>WAPI</li></ul></li><li>3G,4G <ul><li>WCDMA</li><li>CDMA2000</li><li>TD-SCDMA</li><li>LTE-Advanced</li><li>WireLessMAN-Advanced</li></ul></li></ul><h2 id="ipv6" tabindex="-1">ipv6 <a class="header-anchor" href="#ipv6" aria-hidden="true">#</a></h2><p>IPv6是替代现行版本IPv4的下一代IP协议</p><h2 id="安全属性" tabindex="-1">安全属性 <a class="header-anchor" href="#安全属性" aria-hidden="true">#</a></h2><ul><li>保密性：最小授权原则，防暴露，信息加密，物理保密</li><li>完整性：安全协议，校验码，密码校验，数字签名，公证</li><li>可用性：综合保证</li><li>不可抵赖性：数字签名</li></ul><h2 id="加密技术" tabindex="-1">加密技术 <a class="header-anchor" href="#加密技术" aria-hidden="true">#</a></h2><h3 id="对称加密技术" tabindex="-1">对称加密技术 <a class="header-anchor" href="#对称加密技术" aria-hidden="true">#</a></h3><ul><li>DES:替换+移位，56位密钥，64位数据块，速度快，密钥容易产生</li><li>3DES（3重DES）:两个56位密钥K1,K2 <ul><li>加密：K1加密-&gt;K2解密（还是加密）-&gt;K1加密</li><li>解密：K1解密-&gt;K2加密-&gt;K1解密</li></ul></li><li>AES</li><li>RC-5</li><li>IDEA算法：128位密钥，64位数据块，比DES加密行好</li></ul><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-hidden="true">#</a></h4><ol><li>加密强度不高</li><li>密钥分发困难</li></ol><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-hidden="true">#</a></h4><ol><li>适合数据较小的数据</li></ol><h3 id="非对称加密算法" tabindex="-1">非对称加密算法 <a class="header-anchor" href="#非对称加密算法" aria-hidden="true">#</a></h3><p>像github上，我们每个用户都有自己的公钥和私钥，我们的公钥是可以暴露给任何人的，但是我们的私钥不能暴露给任何人，如果我们向另一个人传递数据，我们必须使用另一个人的公钥去进行加密，然后只有另一个人的私钥才能进行解密</p><ul><li>RSA：512位或者1024位，计算量极大，、难破解</li><li>Elgamal</li><li>ECC</li><li>背包算法</li><li>Rabin</li><li>D-H</li></ul><h3 id="数字签名" tabindex="-1">数字签名 <a class="header-anchor" href="#数字签名" aria-hidden="true">#</a></h3><h3 id="例题" tabindex="-1">例题 <a class="header-anchor" href="#例题" aria-hidden="true">#</a></h3><p>要求邮件以加密方式传递，邮件最大附件内容可达500M，发送者不可抵赖，若邮件被第三方解惑，第三方无法篡改</p>',110),m=[k];function A(P,C,D,I,R,S){return i(),e("div",null,m)}const N=l(x,[["render",A]]);export{T as __pageData,N as default};
