import{_ as l}from"./chunks/jvm中文.db4606ad.js";import{_ as e,o as i,c as a,a as r}from"./app.1382543f.js";const h="/assets/ailjdk.90b8e0c9.jpg",t="/assets/线程内存空间.44e01638.png",d="/assets/pc简介.69d985c0.png",j=JSON.parse('{"title":"jvm-基础","description":"","frontmatter":{},"headers":[{"level":2,"title":"运行时数据区","slug":"运行时数据区","link":"#运行时数据区","children":[]},{"level":2,"title":"线程内存空间","slug":"线程内存空间","link":"#线程内存空间","children":[]},{"level":2,"title":"runtime","slug":"runtime","link":"#runtime","children":[]},{"level":2,"title":"线程","slug":"线程","link":"#线程","children":[{"level":3,"title":"JVM线程","slug":"jvm线程","link":"#jvm线程","children":[]},{"level":3,"title":"JVM系统线程","slug":"jvm系统线程","link":"#jvm系统线程","children":[]}]},{"level":2,"title":"程序计数器（PC计数器）","slug":"程序计数器-pc计数器","link":"#程序计数器-pc计数器","children":[{"level":3,"title":"作用","slug":"作用","link":"#作用","children":[]}]},{"level":2,"title":"本地方法栈","slug":"本地方法栈","link":"#本地方法栈","children":[]},{"level":2,"title":"虚拟机栈","slug":"虚拟机栈","link":"#虚拟机栈","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"内存中的栈和堆","slug":"内存中的栈和堆","link":"#内存中的栈和堆","children":[]},{"level":3,"title":"基本内容","slug":"基本内容","link":"#基本内容","children":[]},{"level":3,"title":"作用","slug":"作用-1","link":"#作用-1","children":[]},{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"虚拟机栈可能的异常","slug":"虚拟机栈可能的异常","link":"#虚拟机栈可能的异常","children":[]},{"level":3,"title":"储存单位","slug":"储存单位","link":"#储存单位","children":[]},{"level":3,"title":"运行原理","slug":"运行原理","link":"#运行原理","children":[]},{"level":3,"title":"内存结构","slug":"内存结构","link":"#内存结构","children":[]}]},{"level":2,"title":"局部变量表","slug":"局部变量表","link":"#局部变量表","children":[]}],"relativePath":"jvm/jvm2.md","lastUpdated":null}'),n={name:"jvm/jvm2.md"},s=r('<h1 id="jvm-基础" tabindex="-1">jvm-基础 <a class="header-anchor" href="#jvm-基础" aria-hidden="true">#</a></h1><p>作者: fbk 时间：2023-1-28 地点：济南</p><h2 id="运行时数据区" tabindex="-1">运行时数据区 <a class="header-anchor" href="#运行时数据区" aria-hidden="true">#</a></h2><p><img src="'+l+'" alt=""> 在上阶段经历类的加载-验证-准备-解析-初始化阶段完成后，会在运行时数据区（Runtime Data Area）进行</p><ol><li><p>内存是非常重要的系统资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM内存布局规定了Java在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。不同的JVM对于内存的划分方式和管理机制存在着部分差异。结合JVM虚拟机规范，来探讨一下经典的JVM内存布局。</p></li><li><p>我们通过磁盘或者网络IO得到的数据，都需要先加载到内存中，然后CPU从内存中获取数据进行读取，也就是说内存充当了CPU和磁盘之间的桥梁</p></li></ol><p><img src="'+h+'" alt=""></p><h2 id="线程内存空间" tabindex="-1">线程内存空间 <a class="header-anchor" href="#线程内存空间" aria-hidden="true">#</a></h2><p><img src="'+t+'" alt=""> 其中红的是线程共享的，包括堆内存和方法去，绿色的是每个线程单独拥有的，包括本地方法栈，虚拟机栈，方法区</p><h2 id="runtime" tabindex="-1">runtime <a class="header-anchor" href="#runtime" aria-hidden="true">#</a></h2><p>每个JVM只有一个Runtime实例，即为运行时环境</p><h2 id="线程" tabindex="-1">线程 <a class="header-anchor" href="#线程" aria-hidden="true">#</a></h2><h3 id="jvm线程" tabindex="-1">JVM线程 <a class="header-anchor" href="#jvm线程" aria-hidden="true">#</a></h3><ol><li>线程是一个程序运行单元，一个JVM中可以包含多个线程</li><li>在HostPot JVM中，每个线程都与操作系统的线程映射</li></ol><ul><li>在JVM中创建了一个线程，此时操作系统的本地线程也同时创建，操作系统会调用java线程的run方法，执行完后，java线程销毁，操作系统线程销毁</li></ul><h3 id="jvm系统线程" tabindex="-1">JVM系统线程 <a class="header-anchor" href="#jvm系统线程" aria-hidden="true">#</a></h3><ol><li>虚拟机线程</li><li>周期任务线程</li><li>GC线程</li><li>编译线程</li><li>信号调度线程</li></ol><h2 id="程序计数器-pc计数器" tabindex="-1">程序计数器（PC计数器） <a class="header-anchor" href="#程序计数器-pc计数器" aria-hidden="true">#</a></h2><h3 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-hidden="true">#</a></h3><p><img src="'+d+'" alt=""><code>使用PC寄存器存储字节码指令地址有什么用呢？或者问为什么使用 PC 寄存器来记录当前线程的执行地址呢？</code></p><ol><li>因为CPU需要不停切换线程，所以在线程切换完后，可以知道是从哪开始的</li><li>JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令</li></ol><p><code>PC寄存器为什么被设定为私有的？</code></p><ol><li>我们都知道所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停地做任务切换，这样必然导致经常中断或恢复，如何保证分毫无差呢？为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程都分配一个PC寄存器，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。</li><li>由于CPU时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</li><li>这样必然导致经常中断或恢复，如何保证分毫无差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。</li></ol><h2 id="本地方法栈" tabindex="-1">本地方法栈 <a class="header-anchor" href="#本地方法栈" aria-hidden="true">#</a></h2><h2 id="虚拟机栈" tabindex="-1">虚拟机栈 <a class="header-anchor" href="#虚拟机栈" aria-hidden="true">#</a></h2><h3 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-hidden="true">#</a></h3><ol><li>由于跨平台性的设计，java的指令都是根据栈来设计的，不同平台CPU的架构不同，所以不能设计为基于寄存器的【如果设计成基于寄存器的，耦合度高，性能会有所提升，因为可以对具体的CPU架构进行优化，但是跨平台性大大降低】。</li><li>优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令</li></ol><h3 id="内存中的栈和堆" tabindex="-1">内存中的栈和堆 <a class="header-anchor" href="#内存中的栈和堆" aria-hidden="true">#</a></h3><ol><li>首先栈是运行时的单位，而堆是存储的单位。</li><li>即：栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。堆解决的是数据存储的问题，即数据怎么放，放哪里</li></ol><h3 id="基本内容" tabindex="-1">基本内容 <a class="header-anchor" href="#基本内容" aria-hidden="true">#</a></h3><ul><li>虚拟机栈是什么 <ul><li>java虚拟机栈，每个线程都会创建一个虚拟机栈，每个虚拟机栈储存多个栈帧，对应着一次次的java方法调用，栈是线程私有的</li></ul></li></ul><h3 id="作用-1" tabindex="-1">作用 <a class="header-anchor" href="#作用-1" aria-hidden="true">#</a></h3><ul><li>主管java程序的运行，保存的是方法中的（8种基本数据，对象的引用地址），部分结果，方法的返回</li></ul><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-hidden="true">#</a></h3><ul><li>栈是一种快速有效的分配方式，访问速度仅次于程序计数器</li><li>JVM直接对Java栈的操作只有两个： <ul><li>每个方法执行，伴随着进栈（入栈、压栈）</li><li>执行结束后的出栈工作</li></ul></li><li>对于栈来说不存在垃圾回收问题</li><li>栈不需要GC，但是可能存在OOM</li></ul><h3 id="虚拟机栈可能的异常" tabindex="-1">虚拟机栈可能的异常 <a class="header-anchor" href="#虚拟机栈可能的异常" aria-hidden="true">#</a></h3><ol><li>当一个虚拟机栈的大小固定，每个线程创建请求的虚拟机栈容量超过虚拟机栈允许的最大容量，就会出现stackoverFlowError</li><li>java虚拟机栈会动态的扩展容量，如果没有申请到足够的内存，就会出现ssc（stackOutofMemory）</li></ol><h3 id="储存单位" tabindex="-1">储存单位 <a class="header-anchor" href="#储存单位" aria-hidden="true">#</a></h3><ul><li>每个线程都有自己的栈，栈中的数据都是以栈帧（Stack Frame）的格式存在</li><li>在这个线程上正在执行的每个方法都各自对应一个栈帧（Stack Frame）。</li><li>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息。</li></ul><h3 id="运行原理" tabindex="-1">运行原理 <a class="header-anchor" href="#运行原理" aria-hidden="true">#</a></h3><h3 id="内存结构" tabindex="-1">内存结构 <a class="header-anchor" href="#内存结构" aria-hidden="true">#</a></h3><ul><li>局部变量表</li><li>操作数栈</li><li>动态链接（或指向运行时常量池的方法引用）</li><li>方法返回地址</li><li>一些附加信息</li></ul><h2 id="局部变量表" tabindex="-1">局部变量表 <a class="header-anchor" href="#局部变量表" aria-hidden="true">#</a></h2>',42),c=[s];function o(u,v,m,p,_,f){return i(),a("div",null,c)}const x=e(n,[["render",o]]);export{j as __pageData,x as default};
