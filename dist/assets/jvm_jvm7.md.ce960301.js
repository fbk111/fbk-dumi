import{_ as a,o as l,c as n,a as e}from"./app.1adc42ab.js";const p="/assets/引用计数算法.4c16c029.png",o="/assets/引用是否GC.65c557bc.png",i="/assets/可达性算法.52f93bc2.png",s="/assets/标记清除算法.d28cab2d.png",r="/assets/复制清除算法.8f17ba17.png",c="/assets/引用关系.8cfb6b2d.png",t="/assets/复制实例.3b8bd1f8.png",y="/assets/总结.bb862968.png",C="/assets/分区算法.a09303b5.png",x=JSON.parse('{"title":"jvm-垃圾回收简述","description":"","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"大厂面试题","slug":"大厂面试题","link":"#大厂面试题","children":[]},{"level":2,"title":"什么是垃圾","slug":"什么是垃圾","link":"#什么是垃圾","children":[]},{"level":2,"title":"为什么需要GC","slug":"为什么需要gc","link":"#为什么需要gc","children":[]},{"level":2,"title":"早期垃圾回收","slug":"早期垃圾回收","link":"#早期垃圾回收","children":[]},{"level":2,"title":"java垃圾回收机制","slug":"java垃圾回收机制","link":"#java垃圾回收机制","children":[{"level":3,"title":"自动内存管理","slug":"自动内存管理","link":"#自动内存管理","children":[]},{"level":3,"title":"内存回收的区域","slug":"内存回收的区域","link":"#内存回收的区域","children":[]}]},{"level":2,"title":"垃圾回收的相关算法","slug":"垃圾回收的相关算法","link":"#垃圾回收的相关算法","children":[{"level":3,"title":"标记阶段：引用计数算法","slug":"标记阶段-引用计数算法","link":"#标记阶段-引用计数算法","children":[]},{"level":3,"title":"标记算法：可达性分析算法","slug":"标记算法-可达性分析算法","link":"#标记算法-可达性分析算法","children":[]},{"level":3,"title":"对象的finalization","slug":"对象的finalization","link":"#对象的finalization","children":[]},{"level":3,"title":"清除阶段","slug":"清除阶段","link":"#清除阶段","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]},{"level":3,"title":"分代收集算法","slug":"分代收集算法","link":"#分代收集算法","children":[]},{"level":3,"title":"增量收集算法和分区算法","slug":"增量收集算法和分区算法","link":"#增量收集算法和分区算法","children":[]}]}],"relativePath":"jvm/jvm7.md","lastUpdated":null}'),D={name:"jvm/jvm7.md"},d=e(`<h1 id="jvm-垃圾回收简述" tabindex="-1">jvm-垃圾回收简述 <a class="header-anchor" href="#jvm-垃圾回收简述" aria-hidden="true">#</a></h1><p>作者: fbk 时间：2023-2-9 地点：济南</p><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-hidden="true">#</a></h2><ol><li>java和c++语言的区别，就在于垃圾收集技术和内存动态分配上，c++没有垃圾收集技术，需要程序员手动的收集</li><li>垃圾收集，不是Java语言的伴生产物。早在1960年，第一门开始使用内存动态分配和垃圾收集技术的Lisp语言诞生。</li><li>关于垃圾收集有三个经典问题： <ul><li>哪些内存需要回收？</li><li>什么时候回收？</li><li>如何回收？</li></ul></li><li>垃圾收集机制是Java的招牌能力，极大地提高了开发效率。如今，垃圾收集几乎成为现代语言的标配，即使经过如此长时间的发展，Java的垃圾收集机制仍然在不断的演进中，不同大小的设备、不同特征的应用场景，对垃圾收集提出了新的挑战，这当然也是面试的热点。</li></ol><h2 id="大厂面试题" tabindex="-1">大厂面试题 <a class="header-anchor" href="#大厂面试题" aria-hidden="true">#</a></h2><ol><li>蚂蚁金服 <ul><li>你知道哪几种垃圾回收器，各自的优缺点，重点讲一下CMS和G1？</li><li>JVM GC算法有哪些，目前的JDK版本采用什么回收算法？</li><li>G1回收器讲下回收过程GC是什么？为什么要有GC？</li><li>GC的两种判定方法？CMS收集器与G1收集器的特点</li></ul></li><li>百度 <ul><li>说一下GC算法，分代回收说下</li><li>垃圾收集策略和算法</li></ul></li><li>天猫 <ul><li>JVM GC原理，JVM怎么回收内存</li><li>CMS特点，垃圾回收算法有哪些？各自的优缺点，他们共同的缺点是什么？</li></ul></li><li>滴滴 <ul><li>Java的垃圾回收器都有哪些，说下G1的应用场景，平时你是如何搭配使用垃圾回收器的</li></ul></li><li>京东 <ul><li>你知道哪几种垃圾收集器，各自的优缺点，重点讲下CMS和G1，</li><li>包括原理，流程，优缺点。垃圾回收算法的实现原理</li></ul></li><li>阿里 <ul><li>讲一讲垃圾回收算法。</li><li>什么情况下触发垃圾回收？</li><li>如何选择合适的垃圾收集算法？</li><li>JVM有哪三种垃圾回收器？</li></ul></li><li>字节跳动 <ul><li>常见的垃圾回收器算法有哪些，各有什么优劣？</li><li>System.gc()和Runtime.gc()会做什么事情？</li><li>Java GC机制？GC Roots有哪些？</li><li>Java对象的回收方式，回收算法。</li><li>CMS和G1了解么，CMS解决什么问题，说一下回收的过程。</li><li>CMS回收停顿了几次，为什么要停顿两次?</li></ul></li></ol><h2 id="什么是垃圾" tabindex="-1">什么是垃圾 <a class="header-anchor" href="#什么是垃圾" aria-hidden="true">#</a></h2><ol><li>垃圾是指在<code>运行程序中没有任何指针指向的现象</code>，这就是需要被回收的垃圾</li><li>如果不及时对内存中的垃圾进行清理，那么，这些垃圾对象所占的内存空间会一直保留到应用程序结束，被保留的空间无法被其他对象使用。甚至可能导致内存溢出。</li></ol><h2 id="为什么需要gc" tabindex="-1">为什么需要GC <a class="header-anchor" href="#为什么需要gc" aria-hidden="true">#</a></h2><p><code>想要学习GC，首先需要理解为什么需要GC？</code></p><ol><li>对于高级语言来说，如果不进行垃圾回收，<code>内存将会消耗完</code>，因为内存不停的被分配但是不清除</li><li>除了释放没有的对象，垃圾回收也可以清除内存里的记录碎片，碎片整理将所占用的堆内存移到堆的一端，<code>以便JVM将整理出的内存分配给新的对象。</code></li><li>随着应用程序所应付的业务越来越庞大、复杂，用户越来越多，<code>没有GC就不能保证应用程序的正常进行</code>。而经常造成<code>STW</code>的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。</li></ol><h2 id="早期垃圾回收" tabindex="-1">早期垃圾回收 <a class="header-anchor" href="#早期垃圾回收" aria-hidden="true">#</a></h2><ol><li>在早期的C/C++时代，垃圾回收基本上是手工进行的。开发人员可以使用new关键字进行内存申请，并使用delete关键字进行内存释放。比如以下代码：</li></ol><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">MibBridge </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pBridge</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> new cmBaseGroupBridge（）；</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//如果注册失败，使用Delete释放该对象所占内存区域</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">（pBridge</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">Register（kDestroy）！</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">NO ERROR）</span></span>
<span class="line"><span style="color:#A6ACCD;">	delete pBridge；</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>这种方式可以灵活控制内存释放的时间，但是会给开发人员带来频繁申请和释放内存的管理负担。倘若有一处内存区间由于程序员编码的问题忘记被回收，那么就会产生内存泄漏，垃圾对象永远无法被清除，随着系统运行时间的不断增长，垃圾对象所耗内存可能持续上升，直到出现内存溢出并造成应用程序崩溃。</li><li>有了垃圾回收机制后，上述代码极有可能变成这样</li></ol><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">MibBridge </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">pBridge</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">new </span><span style="color:#82AAFF;">cmBaseGroupBridge</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">pBridge</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">Register</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">kDestroy</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="java垃圾回收机制" tabindex="-1">java垃圾回收机制 <a class="header-anchor" href="#java垃圾回收机制" aria-hidden="true">#</a></h2><h3 id="自动内存管理" tabindex="-1">自动内存管理 <a class="header-anchor" href="#自动内存管理" aria-hidden="true">#</a></h3><ul><li>优点 <ol><li>自动内存管理可以自动回收垃圾，不需要开发人员参与内存分配，降低内存泄露和溢出的风险</li><li>自动内存管理机制，将程序员从繁重的内存管理中释放出来，可以更专心地专注于业务开发</li></ol></li><li>关于自动内存管理的担忧 <ol><li>自动内存管理就像一个黑匣子，如果过度依赖于“自动”，那么这将会是一场灾难，<code>最严重的就会弱化Java开发人员在程序出现内存溢出时定位问题和解决问题的能力。</code></li><li>此时，了解JVM的自动内存分配和内存回收原理就显得非常重要，只有在真正了解JVM是如何管理内存后，我们才能够在遇见OutofMemoryError时，快速地根据错误异常日志定位问题和解决问题。</li><li>当需要排查各种内存溢出、内存泄漏问题时，当垃圾收集成为系统达到更高并发量的瓶颈时，我们就必须对这些“自动 化”的技术实施必要的监控和调节。</li></ol></li></ul><h3 id="内存回收的区域" tabindex="-1">内存回收的区域 <a class="header-anchor" href="#内存回收的区域" aria-hidden="true">#</a></h3><ul><li>方法区</li><li>堆</li></ul><h2 id="垃圾回收的相关算法" tabindex="-1">垃圾回收的相关算法 <a class="header-anchor" href="#垃圾回收的相关算法" aria-hidden="true">#</a></h2><h3 id="标记阶段-引用计数算法" tabindex="-1">标记阶段：引用计数算法 <a class="header-anchor" href="#标记阶段-引用计数算法" aria-hidden="true">#</a></h3><h4 id="标记阶段的目的" tabindex="-1">标记阶段的目的 <a class="header-anchor" href="#标记阶段的目的" aria-hidden="true">#</a></h4><p><code>垃圾标记阶段：主要是为了判断对象是否存活</code></p><ol><li>在堆内存几乎放了所有对象的实例，在进行GC的时候，<code>要首先区分出内存哪些是存活的对象，哪些是死亡的对象，</code>只有被标记为己经死亡的对象，GC才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们可以称为<code>垃圾标记阶段</code>。</li><li>怎么判断对象是否死亡？如果对象不再被任何存活的对象引用，就是死亡</li><li>判断对象存活一般有两种方式：<code>引用计数算法</code>和<code>可达性分析算法</code>。</li></ol><h4 id="引用计数算法" tabindex="-1">引用计数算法 <a class="header-anchor" href="#引用计数算法" aria-hidden="true">#</a></h4><ol><li>为每个对象保存一个整型的引用计数器，用于记录对象内引用的情况</li><li>对于对象A，如果有对象引用，计数器+1,当引用失效，计数器-1，只要对象计数器为0，那么对象就会进行回收</li><li>优点 <ul><li>实现简单，垃圾对象便于标识</li><li>判定效率高，回收没有延迟</li></ul></li><li>缺点 <ul><li>增加内存空间开销</li><li>每次赋值都要更新计数器，增加了时间的开销</li><li>引用计数器有一个严重的问题，即无法处理循环引用的情况。这是一条致命缺陷，导致在Java的垃圾回收器中没有使用这类算法。 <img src="`+p+`" alt=""> 当p指针断开，内部的引用就造成了一个循环，计数器都是1，也就无法被回收</li></ul></li></ol><h4 id="证明java不是使用的引用算法" tabindex="-1">证明java不是使用的引用算法 <a class="header-anchor" href="#证明java不是使用的引用算法" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * -XX:+PrintGCDetails</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 证明：java使用的不是引用计数算法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RefCountGC</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//这个成员属性唯一的作用就是占用一点内存</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> bigSize </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">//5MB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> reference </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">RefCountGC</span><span style="color:#A6ACCD;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RefCountGC</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">RefCountGC</span><span style="color:#A6ACCD;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RefCountGC</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        obj1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">reference </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> obj2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        obj2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">reference </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> obj1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//显式的执行垃圾回收行为</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//这里发生GC，obj1和obj2能否被回收？</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">gc</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><img src="`+o+`" alt=""></p><p>如果将Obj1.reference和Obj2.reference的引用设置为null</p><ul><li>没有进行GC</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Heap</span></span>
<span class="line"><span style="color:#A6ACCD;"> PSYoungGen      total 38400K, used 14234K [0x00000000d5f80000, 0x00000000d8a00000, 0x0000000100000000)</span></span>
<span class="line"><span style="color:#A6ACCD;">  eden space 33280K, 42% used [0x00000000d5f80000,0x00000000d6d66be8,0x00000000d8000000)</span></span>
<span class="line"><span style="color:#A6ACCD;">  from space 5120K, 0% used [0x00000000d8500000,0x00000000d8500000,0x00000000d8a00000)</span></span>
<span class="line"><span style="color:#A6ACCD;">  to   space 5120K, 0% used [0x00000000d8000000,0x00000000d8000000,0x00000000d8500000)</span></span>
<span class="line"><span style="color:#A6ACCD;"> ParOldGen       total 87552K, used 0K [0x0000000081e00000, 0x0000000087380000, 0x00000000d5f80000)</span></span>
<span class="line"><span style="color:#A6ACCD;">  object space 87552K, 0% used [0x0000000081e00000,0x0000000081e00000,0x0000000087380000)</span></span>
<span class="line"><span style="color:#A6ACCD;"> Metaspace       used 3496K, capacity 4498K, committed 4864K, reserved 1056768K</span></span>
<span class="line"><span style="color:#A6ACCD;">  class space    used 387K, capacity 390K, committed 512K, reserved 1048576K</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">Process finished with exit code 0</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>进行GC</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">[GC (System.gc()) [PSYoungGen: 13569K-&gt;808K(38400K)] 13569K-&gt;816K(125952K), 0.0012717 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span></span>
<span class="line"><span style="color:#A6ACCD;">[Full GC (System.gc()) [PSYoungGen: 808K-&gt;0K(38400K)] [ParOldGen: 8K-&gt;670K(87552K)] 816K-&gt;670K(125952K), [Metaspace: 3491K-&gt;3491K(1056768K)], 0.0051769 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span></span>
<span class="line"><span style="color:#A6ACCD;">Heap</span></span>
<span class="line"><span style="color:#A6ACCD;"> PSYoungGen      total 38400K, used 333K [0x00000000d5f80000, 0x00000000d8a00000, 0x0000000100000000)</span></span>
<span class="line"><span style="color:#A6ACCD;">  eden space 33280K, 1% used [0x00000000d5f80000,0x00000000d5fd34a8,0x00000000d8000000)</span></span>
<span class="line"><span style="color:#A6ACCD;">  from space 5120K, 0% used [0x00000000d8000000,0x00000000d8000000,0x00000000d8500000)</span></span>
<span class="line"><span style="color:#A6ACCD;">  to   space 5120K, 0% used [0x00000000d8500000,0x00000000d8500000,0x00000000d8a00000)</span></span>
<span class="line"><span style="color:#A6ACCD;"> ParOldGen       total 87552K, used 670K [0x0000000081e00000, 0x0000000087380000, 0x00000000d5f80000)</span></span>
<span class="line"><span style="color:#A6ACCD;">  object space 87552K, 0% used [0x0000000081e00000,0x0000000081ea7990,0x0000000087380000)</span></span>
<span class="line"><span style="color:#A6ACCD;"> Metaspace       used 3498K, capacity 4498K, committed 4864K, reserved 1056768K</span></span>
<span class="line"><span style="color:#A6ACCD;">  class space    used 387K, capacity 390K, committed 512K, reserved 1048576K</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">Process finished with exit code 0</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ol><li><p>从打印日志就可以明显看出来，已经进行了GC</p></li><li><p>如果使用引用计数算法，那么这两个对象将会无法回收。而现在两个对象被回收了，说明Java使用的不是引用计数算法来进行标记的。</p></li></ol><h4 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h4><ol><li>引用计数算法，是很多语言的资源回收选择，例如因人工智能而更加火热的Python，它更是同时支持引用计数和垃圾收集机制。</li><li>具体哪种最优是要看场景的，业界有大规模实践中仅保留引用计数机制，以提高吞吐量的尝试。</li><li>Java并没有选择引用计数，是因为其存在一个基本的难题，也就是很难处理循环引用关系。</li><li>Python如何解决循环引用？ <ul><li>手动解除：很好理解，就是在合适的时机，解除引用关系。</li><li>使用弱引用weakref，weakref是Python提供的标准库，旨在解决循环引用。</li></ul></li></ol><h3 id="标记算法-可达性分析算法" tabindex="-1">标记算法：可达性分析算法 <a class="header-anchor" href="#标记算法-可达性分析算法" aria-hidden="true">#</a></h3><p><code>也称为根搜索算法，追踪性垃圾收集</code></p><ol><li>相对于引用计数算法而言，可达性分析算法不仅同样具备实现简单和执行高效等特点，<code>更重要的是该算法可以有效地解决在引用计数算法中循环引用的问题，防止内存泄漏的发生</code>。</li><li>相较于引用计数算法，这里的可达性分析就是Java、C#选择的。这种类型的垃圾收集通常也叫作追踪性垃圾收集（Tracing Garbage Collection）</li></ol><h4 id="可达性分析实现思路" tabindex="-1">可达性分析实现思路 <a class="header-anchor" href="#可达性分析实现思路" aria-hidden="true">#</a></h4><ol><li>可达性分析算法是以根对象集合（GCRoots）为起始点，按照从上至下的方式<code>搜索被根对象集合所连接的目标对象是否可达。</code></li><li>使用可达性分析算法后，内存中的存活对象都会被<code>根对象集合直接或间接连接着</code>，搜索所走过的路径称为引用链（Reference Chain）</li><li>如果目标对象<code>没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。</code></li><li>在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。</li></ol><p><img src="`+i+`" alt=""></p><h4 id="gc-roots可以是哪些元素" tabindex="-1">GC Roots可以是哪些元素？ <a class="header-anchor" href="#gc-roots可以是哪些元素" aria-hidden="true">#</a></h4><ol><li>虚拟机栈中的各种元素 <ul><li>各个线程被调用的方法中使用的参数，局部变量</li></ul></li><li>本地方法栈内JNI（本地方法）引用的对象</li><li>方法区中的静态属性引用对象 <ul><li>java的引用静态变量</li></ul></li><li>方法区中常量引用的对象 <ul><li>比如：字符串常量池（StringTable）里的引用</li></ul></li><li>所有被同步锁synchronize持有的对象</li><li>java虚拟机的内部引用 <ul><li>基本数据类型对应的Class对象，一些常驻的异常对象（如：NullPointerException、OutofMemoryError），系统类加载器。</li></ul></li><li>反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</li></ol><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h4><ol><li>除了栈空间的周边，比如虚拟机栈，本地方法栈，方法区，字符串常量池等地方对堆空间进行引用的，都可以作为GC roots的可达性分析</li><li>除了固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象临时性的加入，共同构成完整的GC Roots，比如：分代收集和局部回收</li></ol><p><code>由于Root采用栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己又不存放在堆内存里面，那它就是一个Root。</code></p><h3 id="对象的finalization" tabindex="-1">对象的finalization <a class="header-anchor" href="#对象的finalization" aria-hidden="true">#</a></h3><h4 id="finaliza方法机制" tabindex="-1">finaliza方法机制 <a class="header-anchor" href="#finaliza方法机制" aria-hidden="true">#</a></h4><p><code>对象销毁前的回调函数finalize</code></p><ol><li>java语言提供了对象终止（finalization） 机制来允许开发人员提供<code>对象销毁之前的自定义处理逻辑</code></li><li>当垃圾回收器发现没有引用指向一个对象，<code>即：垃圾回收此对象之前，总会先调用这个对象的finalize()方法。</code></li><li>finalize() 方法允许在子类中被重写，<code>用于在对象被回收时进行资源释放</code>。通常在这个方法中进行一些资源释放和清理的工作，比如关闭文件、套接字和数据库连接等。</li></ol><p><code>源码</code></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">finalize</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> throws Throwable </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li>永远不要主动调用finalize方法，应该交给垃圾回收机制调用 <ol><li>在finalize时可能导致对象复活</li><li>finalize()方法的执行时间是没有保障的，它完全由GC线程决定，极端情况下，若不发生GC，则finalize()方法将没有执行机会。</li><li>一个糟糕的finalize()会严重影响GC的性能。比如finalize是个死循环</li></ol></li><li>从功能上来说，finalize()方法与C++中的析构函数比较相似，但是Java采用的是基于垃圾回收器的自动内存管理机制，所以finalize()方法在本质上不同于C++中的析构函数。</li><li>finalize()方法对应了一个finalize线程，因为优先级比较低，即使主动调用该方法，也不会因此就直接进行回收</li></ol><h4 id="生存还是死亡" tabindex="-1">生存还是死亡 <a class="header-anchor" href="#生存还是死亡" aria-hidden="true">#</a></h4><p>由于finalize()方法的存在，<code>虚拟机中的对象一般处于三种可能的状态。</code></p><ol><li>如果从所有的根节点都无法访问到某个对象，说明对象己经不再使用了。一般来说，此对象需要被回收。但事实上，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段。一个无法触及的对象有可能在某一个条件下“复活”自己，如果这样，那么对它立即进行回收就是不合理的。为此，定义虚拟机中的对象可能的三种状态。如下： <ol><li>可触及的：从根节点开始，可以到达这个对象。</li><li>可复活的：对象的所有引用都被释放，但是对象有可能在finalize()中复活。</li><li>不可触及的：对象的finalize()被调用，并且没有复活，那么就会进入不可触及状态。不可触及的对象不可能被复活，因为finalize()只会被调用一次。</li></ol></li><li>以上3种状态中，是由于finalize()方法的存在，进行的区分。只有在对象不可触及时才可以被回收。</li></ol><h4 id="具体过程" tabindex="-1">具体过程 <a class="header-anchor" href="#具体过程" aria-hidden="true">#</a></h4><p><code>判定一个对象objA是否可回收，至少要经历两次标记过程：</code></p><ol><li>如果对象objA到GC Roots没有引用链，则进行第一次标记。</li><li>进行筛选，判断此对象是否有必要执行finalize()方法</li><li>如果对象objA没有重写finalize()方法，或者finalize()方法已经被虚拟机调用过，则虚拟机视为“没有必要执行”，objA被判定为不可触及的。</li><li>如果对象objA重写了finalize()方法，且还未执行过，那么objA会被插入到F-Queue队列中，由一个虚拟机自动创建的、低优先级的Finalizer线程触发其finalize()方法执行。</li><li>finalize()方法是对象逃脱死亡的最后机会，稍后GC会对F-Queue队列中的对象进行第二次标记。如果objA在finalize()方法中与引用链上的任何一个对象建立了联系，那么在第二次标记时，objA会被移出“即将回收”集合。之后，对象会再次出现没有引用存在的情况。在这个情况下，finalize()方法不会被再次调用，对象会直接变成不可触及的状态，也就是说，一个对象的finalize()方法只会被调用一次。</li></ol><h4 id="演示finalize方法可以复活对象" tabindex="-1">演示finalize方法可以复活对象 <a class="header-anchor" href="#演示finalize方法可以复活对象" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 测试Object类中finalize()方法，即对象的finalization机制。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CanReliveObj</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">CanReliveObj</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//类变量，属于 GC Root</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//此方法只能被调用一次</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">finalize</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Throwable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        super</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">finalize</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">调用当前类重写的finalize()方法</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this;</span><span style="color:#676E95;font-style:italic;">//当前待回收的对象在finalize()方法中与引用链上的一个对象obj建立了联系</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CanReliveObj</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 对象第一次成功拯救自己</span></span>
<span class="line"><span style="color:#A6ACCD;">            obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">gc</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;">//调用垃圾回收器</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">第1次 gc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 因为Finalizer线程优先级很低，暂停2秒，以等待它</span></span>
<span class="line"><span style="color:#A6ACCD;">            Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">obj is dead</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">obj is still alive</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">第2次 gc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 下面这段代码与上面的完全相同，但是这次自救却失败了</span></span>
<span class="line"><span style="color:#A6ACCD;">            obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">gc</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 因为Finalizer线程优先级很低，暂停2秒，以等待它</span></span>
<span class="line"><span style="color:#A6ACCD;">            Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">obj is dead</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">obj is still alive</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">InterruptedException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><ul><li>去除finalize方法</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">第1次 gc</span></span>
<span class="line"><span style="color:#A6ACCD;">obj is dead</span></span>
<span class="line"><span style="color:#A6ACCD;">第2次 gc</span></span>
<span class="line"><span style="color:#A6ACCD;">obj is dead</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>不去除finalize方法，只能调用1次</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">第1次 gc</span></span>
<span class="line"><span style="color:#A6ACCD;">调用当前类重写的finalize()方法</span></span>
<span class="line"><span style="color:#A6ACCD;">obj is still alive</span></span>
<span class="line"><span style="color:#A6ACCD;">第2次 gc</span></span>
<span class="line"><span style="color:#A6ACCD;">obj is dead</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="清除阶段" tabindex="-1">清除阶段 <a class="header-anchor" href="#清除阶段" aria-hidden="true">#</a></h3><ul><li>当成功区分出内存中存活对象和死亡对象后，GC接下来的任务就是执行垃圾回收，释放掉无用对象所占用的内存空间，以便有足够的可用内存空间为新对象分配内存。目前在JVM中比较常见的三种垃圾收集算法是 <ol><li>标记-清除算法（Mark-Sweep）</li><li>复制算法（Copying）</li><li>标记-压缩算法（Mark-Compact）</li></ol></li></ul><h4 id="标记清除算法" tabindex="-1">标记清除算法 <a class="header-anchor" href="#标记清除算法" aria-hidden="true">#</a></h4><p>当堆中的有效内存空间（available memory）被耗尽的时候，就会停止整个程序（也被称为stop the world），然后进行两项工作，第一项则是标记，第二项则是清除</p><ol><li>标记：Collector从引用根节点开始遍历，标记所有被引用的对象。一般是在对象的Header中记录为可达对象。 <ul><li>注意：标记的是被引用的对象，也就是可达对象，并非标记的是即将被清除的垃圾对象</li></ul></li><li>清除：Collector对堆内存从头到尾进行线性的遍历，如果发现某个对象在其Header中没有标记为可达对象，则将其回收 <img src="`+s+'" alt=""><code>特点</code></li><li>标记清除算法的效率不算高</li><li>在进行GC的时候，需要停止整个应用程序，用户体验差</li><li>这种方式清理出来的空闲内存是不连续的，产生内碎片，需要维护一个空闲列表</li></ol><p><code>何为清除</code></p><p>清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表中，下次有新对象加载，首先判断垃圾位置是否能够，如果够，就存放（覆盖原有的指针）</p><p>关于空闲列表是在为对象分配内存的时候提过：</p><ol><li>如果内存规整 <ul><li>采用指针碰撞的方式进行内存分配</li></ul></li><li>如果内存不规整 <ul><li>虚拟机需要维护一个空闲列表</li><li>采用空闲列表分配内存</li></ul></li></ol><h4 id="复制算法" tabindex="-1">复制算法 <a class="header-anchor" href="#复制算法" aria-hidden="true">#</a></h4><p><code>背景</code></p><p>为了解决标记-清除算法在垃圾收集效率方面的缺陷，M.L.Minsky于1963年发表了著名的论文，“使用双存储区的Lisp语言垃圾收集器CA LISP Garbage Collector Algorithm Using Serial Secondary Storage）”。M.L.Minsky在该论文中描述的算法被人们称为复制（Copying）算法，它也被M.L.Minsky本人成功地引入到了Lisp语言的一个实现版本中。</p><p><code>核心思想</code></p><p>将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收 <img src="'+r+'" alt=""></p><blockquote><p>新生代里面就用到了复制算法，Eden区和S0区存活对象整体复制到S1区</p></blockquote><ul><li>优点 <ol><li>没有标记和清除过程，运行高效</li><li>复制后保证空间的连续性，不会出现碎片问题</li></ol></li><li>缺点 <ol><li>需要两倍的内存空间</li><li>对于G1这种分拆成为大量region的GC，复制而不是移动，意味着GC需要维护region之间对象引用关系，不管是内存占用或者时间开销也不小 <img src="'+c+'" alt=""></li></ol></li><li>使用场景 <ol><li>如果系统中的垃圾对象很多，复制算法需要复制存活对象数量不算很大，效率高</li><li>老年代大量的对象存活，那么复制的对象将会有很多，效率会很低</li><li>在新生代，因为新生代的对象70%-99%都是朝生夕死的，所以不管是从eden复制到surive区还是from区复制到to区，回收的性价比都很高 <img src="'+t+'" alt=""></li></ol></li></ul><h4 id="标记-压缩算法" tabindex="-1">标记-压缩算法 <a class="header-anchor" href="#标记-压缩算法" aria-hidden="true">#</a></h4><h5 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-hidden="true">#</a></h5><ol><li>复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活对象较多，复制的成本也将很高。因此，基于老年代垃圾回收的特性，需要使用其他的算法。</li><li>标记-清除算法的确可以应用在老年代中，但是该算法不仅执行效率低下，而且在执行完内存回收后还会产生内存碎片，所以JVM的设计者需要在此基础之上进行改进。标记-压缩（Mark-Compact）算法由此诞生。</li><li>1970年前后，G.L.Steele、C.J.Chene和D.s.Wise等研究者发布标记-压缩算法。在许多现代的垃圾收集器中，人们都使用了标记-压缩算法或其改进版本。</li></ol><h5 id="执行过程" tabindex="-1">执行过程 <a class="header-anchor" href="#执行过程" aria-hidden="true">#</a></h5><ol><li>第一阶段和标记清除算法一样，从根节点开始标记所有被引用对象</li><li>第二阶段将所有的存活对象压缩到内存的一端，按顺序排放。之后，清理边界外所有的空间。 <img src="'+s+'" alt=""></li></ol><h5 id="标记压缩和标记清除的比较" tabindex="-1">标记压缩和标记清除的比较 <a class="header-anchor" href="#标记压缩和标记清除的比较" aria-hidden="true">#</a></h5><ol><li>标记压缩算法相当于标记清除算法再进行一次内存碎片整理</li><li>标记清除算法是一个<code>非移动式的回收算法</code>，标记-压缩是<code>移动式的</code>。是否移动回收后的存活对象是<code>一项优缺点并存的风险决策。</code></li><li>可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。</li></ol><h6 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-hidden="true">#</a></h6><ol><li>消除了标记-清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可。</li><li>消除了复制算法当中，内存减半的高额代价。</li></ol><h6 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-hidden="true">#</a></h6><ol><li>从效率上来说，标记-整理算法要低于复制算法。</li><li>移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址（因为HotSpot虚拟机采用的不是句柄池的方式，而是直接指针）</li><li>移动过程中，需要全程暂停用户应用程序。即：STW</li></ol><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-hidden="true">#</a></h3><ol><li>复制算法是最快的，但内存的消耗也是最多的 <img src="'+y+'" alt=""></li></ol><h3 id="分代收集算法" tabindex="-1">分代收集算法 <a class="header-anchor" href="#分代收集算法" aria-hidden="true">#</a></h3><ol><li>因为上述的算法各有优缺点，所以在各个生命周期采取不同的算法进行垃圾回收才是最正确的，在堆内存中把java分成新生代和老年代，这样就可以根据各个年代的特点使用不同的回收算法，提高效率</li><li>在Java程序运行的过程中，会产生大量的对象，其中有些对象是与业务信息相关: <ul><li>比如Http请求中的Session对象、线程、Socket连接，这类对象跟业务直接挂钩，因此生命周期比较长。</li><li>但是还有一些对象，主要是程序运行过程中生成的临时变量，这些对象生命周期会比较短，比如：String对象，由于其不变类的特性，系统会产生大量的这些对象，有些对象甚至只用一次即可回收。 <code>目前几乎所有的GC都采用分代收集算法执行垃圾回收的</code></li></ul></li><li>年轻代 <ul><li>年轻代特点：区域相对老年代较小，对象生命周期短，存活率低，回收频繁</li><li>适合使用复制算法</li></ul></li><li>老年代 <ul><li>区域较大，对象生命周期长，存活率高，回收低</li><li>这种情况存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记-清除或者是标记-清除与标记-整理的混合实现。 <ul><li>Mark阶段的开销与存活对象的数量成正比。</li><li>Sweep阶段的开销与所管理区域的大小成正相关。</li><li>Compact阶段的开销与存活对象的数据成正比。</li></ul></li></ul></li><li>以HotSpot中的CMS回收器为例，CMS是基于Mark-Sweep实现的，对于对象的回收效率很高。对于碎片问题，CMS采用基于Mark-Compact算法的Serial Old回收器作为补偿措施：当内存回收不佳（碎片导致的Concurrent Mode Failure时），将采用Serial Old执行Full GC以达到对老年代内存的整理。</li><li>分代的思想被现有的虚拟机广泛使用。几乎所有的垃圾回收器都区分新生代和老年代</li></ol><h3 id="增量收集算法和分区算法" tabindex="-1">增量收集算法和分区算法 <a class="header-anchor" href="#增量收集算法和分区算法" aria-hidden="true">#</a></h3><h4 id="增量收集算法" tabindex="-1">增量收集算法 <a class="header-anchor" href="#增量收集算法" aria-hidden="true">#</a></h4><p>上述现有的算法，在垃圾回收过程中，应用软件将处于一种Stop the World的状态。在<code>Stop the World</code>状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算法的研究直接导致了增量收集（Incremental Collecting）算法的诞生。</p><h5 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-hidden="true">#</a></h5><ol><li>如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让GC线程和应用程序线程交替执行，<code>每次，垃圾收集线程只能收集一小片区域，接着切换到应用线程，依次反复，直到垃圾收集完成</code></li><li>总的来说，<code>增量收集算法的基础仍是传统的标记-清除和复制算法</code>。增量收集算法通过对线程间冲突的妥善处理，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作</li></ol><h5 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-hidden="true">#</a></h5><p>使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，<code>造成系统吞吐量的下降。</code></p><h4 id="分区算法" tabindex="-1">分区算法 <a class="header-anchor" href="#分区算法" aria-hidden="true">#</a></h4><ol><li>一般来说，在相同条件下，堆空间越大，一次GC时所需要的时间就越长，有关GC产生的停顿也越长。为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。</li><li>分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间。每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。</li></ol><p><img src="'+C+'" alt=""></p>',110),A=[d];function F(b,u,h,m,f,g){return l(),n("div",null,A)}const j=a(D,[["render",F]]);export{x as __pageData,j as default};
