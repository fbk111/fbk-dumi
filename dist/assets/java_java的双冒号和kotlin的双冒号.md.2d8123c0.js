import{_ as s,o as a,c as n,a as l}from"./app.1ab3fa21.js";const F=JSON.parse('{"title":"java的双冒号和kotlin的双冒号","description":"","frontmatter":{},"headers":[{"level":2,"title":"java","slug":"java","link":"#java","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[]},{"level":3,"title":"例子","slug":"例子","link":"#例子","children":[]}]}],"relativePath":"java/java的双冒号和kotlin的双冒号.md","lastUpdated":1674294569000}'),e={name:"java/java的双冒号和kotlin的双冒号.md"},p=l(`<h1 id="java的双冒号和kotlin的双冒号" tabindex="-1">java的双冒号和kotlin的双冒号 <a class="header-anchor" href="#java的双冒号和kotlin的双冒号" aria-hidden="true">#</a></h1><p>作者: fbk 时间：2023-1-19 地点：济南</p><blockquote><p>足够优秀再大方拥有</p></blockquote><h2 id="java" tabindex="-1">java <a class="header-anchor" href="#java" aria-hidden="true">#</a></h2><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-hidden="true">#</a></h3><p>双冒号在java8中被用作叫做方法引用，大致意思就是lambda表达式创建匿名方法，但有时候需要使用一个lambda表达式只调用一个已经存在的方法</p><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-hidden="true">#</a></h3><ul><li>静态方法引用 classname::methodname 例如:Person::getAge</li><li>对象的实例方法引用语法 instancename::methodname 例如 System.out::println</li><li>对象的超类方法引用语法 super::methodname</li><li>类构造器引用方法: classname::new 例如 ArrayList::new</li><li>数组构造器引用语法: typename[]::new 例如 String[]::new</li></ul><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Demo1</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">method</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">str</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        return new Integer(str);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> Integer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parseInt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        a a</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">str </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> Integer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parseInt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//这里的Integer.parseInt方法是静态引用，所以可以使用双冒号形式</span></span>
<span class="line"><span style="color:#A6ACCD;">        a a1</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">Integer</span><span style="color:#89DDFF;font-style:italic;">::</span><span style="color:#A6ACCD;">parseInt</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        a a2</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">Integer</span><span style="color:#89DDFF;font-style:italic;">::new</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">method</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">str</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,10),o=[p];function t(r,c,i,y,A,D){return a(),n("div",null,o)}const d=s(e,[["render",t]]);export{F as __pageData,d as default};
