import{_ as s,o as n,c as a,a as l}from"./app.9287c781.js";const C=JSON.parse('{"title":"selector","description":"","frontmatter":{},"headers":[{"level":2,"title":"阻塞和非阻塞","slug":"阻塞和非阻塞","link":"#阻塞和非阻塞","children":[{"level":3,"title":"阻塞","slug":"阻塞","link":"#阻塞","children":[]},{"level":3,"title":"服务器端","slug":"服务器端","link":"#服务器端","children":[]},{"level":3,"title":"客户端","slug":"客户端","link":"#客户端","children":[]}]},{"level":2,"title":"非阻塞模式","slug":"非阻塞模式","link":"#非阻塞模式","children":[{"level":3,"title":"服务器端修改","slug":"服务器端修改","link":"#服务器端修改","children":[]},{"level":3,"title":"多路复用","slug":"多路复用","link":"#多路复用","children":[]}]},{"level":2,"title":"selector","slug":"selector-1","link":"#selector-1","children":[{"level":3,"title":"好处","slug":"好处","link":"#好处","children":[]},{"level":3,"title":"创建","slug":"创建","link":"#创建","children":[]},{"level":3,"title":"绑定socketChannel事件","slug":"绑定socketchannel事件","link":"#绑定socketchannel事件","children":[]},{"level":3,"title":"监听channel事件","slug":"监听channel事件","link":"#监听channel事件","children":[]},{"level":3,"title":"💡 select 何时不阻塞","slug":"💡-select-何时不阻塞","link":"#💡-select-何时不阻塞","children":[]}]},{"level":2,"title":"处理accept事件","slug":"处理accept事件","link":"#处理accept事件","children":[{"level":3,"title":"为什么进行iter.remove()","slug":"为什么进行iter-remove","link":"#为什么进行iter-remove","children":[]},{"level":3,"title":"💡 cancel","slug":"💡-cancel","link":"#💡-cancel","children":[]},{"level":3,"title":"不处理边界的问题","slug":"不处理边界的问题","link":"#不处理边界的问题","children":[]}]}],"relativePath":"Netty/selector.md","lastUpdated":1674743384000}'),p={name:"Netty/selector.md"},e=l(`<h1 id="selector" tabindex="-1">selector <a class="header-anchor" href="#selector" aria-hidden="true">#</a></h1><p>作者: fbk 时间：2023-1-3 地点：济南</p><blockquote><p>足够优秀再大方拥有</p></blockquote><h2 id="阻塞和非阻塞" tabindex="-1">阻塞和非阻塞 <a class="header-anchor" href="#阻塞和非阻塞" aria-hidden="true">#</a></h2><h3 id="阻塞" tabindex="-1">阻塞 <a class="header-anchor" href="#阻塞" aria-hidden="true">#</a></h3><ul><li>阻塞模式下面的方法都会让线程暂停 <ul><li>ServerSocketChannel.accept在没有连接的时候线程暂停</li><li>SocketChannel.read会在没有数据可读让线程暂停</li><li>阻塞就是线程暂停了并且不会占用cpu，相当于线程闲置</li></ul></li><li>单线程下，阻塞方法之间相互影响，不能工作，需要多线程</li><li>但多线程也有问题 <ul><li>32 位 jvm 一个线程 320k，64 位 jvm 一个线程 1024k，如果连接数过多，必然导致 OOM，并且线程太多，反而会因为频繁上下文切换导致性能降低</li><li>可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接</li></ul></li></ul><h3 id="服务器端" tabindex="-1">服务器端 <a class="header-anchor" href="#服务器端" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> throws IOException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ServerSocketChannel</span><span style="color:#A6ACCD;"> ssc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ServerSocketChannel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;">//创建服务器</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ByteBuffer</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ByteBuffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">allocate</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        ssc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">InetSocketAddress</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">8080</span><span style="color:#89DDFF;">));</span><span style="color:#676E95;font-style:italic;">//监听8080端口</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//创建连接</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">SocketChannel</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> channels</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(true){</span></span>
<span class="line"><span style="color:#A6ACCD;">            log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">debug</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">connecting</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">SocketChannel</span><span style="color:#A6ACCD;"> socketChannel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ssc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">accept</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;">//线程停止运行</span></span>
<span class="line"><span style="color:#A6ACCD;">            channels</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">socketChannel</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">SocketChannel</span><span style="color:#A6ACCD;"> channel </span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> channels</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                channel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">flip</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="客户端" tabindex="-1">客户端 <a class="header-anchor" href="#客户端" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">SocketChannel</span><span style="color:#A6ACCD;"> sc</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">SocketChannel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">sc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connent</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">InetSocketAddress</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">localhost</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">8080</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">waiting</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="非阻塞模式" tabindex="-1">非阻塞模式 <a class="header-anchor" href="#非阻塞模式" aria-hidden="true">#</a></h2><ul><li>非阻塞模式不管是accept还是read都不会让线程暂停 <ul><li>在ServerSocketChannel.accept()没有建立连接会返回SocketChannel是null</li><li>在SocketChannel.read没有数据时，会返回0，不会阻塞，也可以执行read或者accept方法</li></ul></li><li>但是缺点是没有建立连接和刻度数据，线程仍然需要运行，浪费cpu</li><li>数据复制，线程还是阻塞</li></ul><h3 id="服务器端修改" tabindex="-1">服务器端修改 <a class="header-anchor" href="#服务器端修改" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> throws IOException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ByteBuffer</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ByteBuffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">allocate</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ServerSocketChannel</span><span style="color:#A6ACCD;"> ssc</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">ServerSocketChannel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        ssc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">configureBlocking</span><span style="color:#89DDFF;">(false);</span><span style="color:#676E95;font-style:italic;">//设置非阻塞模式</span></span>
<span class="line"><span style="color:#A6ACCD;">        ssc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">InetSocketAddress</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">8080</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">SocketChannel</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> channels</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(true){</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">SocketChannel</span><span style="color:#A6ACCD;"> sc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ssc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">accept</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sc</span><span style="color:#89DDFF;">!=null){</span></span>
<span class="line"><span style="color:#A6ACCD;">                sc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">configureBlocking</span><span style="color:#89DDFF;">(false);</span></span>
<span class="line"><span style="color:#A6ACCD;">                channels</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sc</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">SocketChannel</span><span style="color:#A6ACCD;"> channel </span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> channels</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> read </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> channel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">read</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">                    buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">flip</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                    buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="多路复用" tabindex="-1">多路复用 <a class="header-anchor" href="#多路复用" aria-hidden="true">#</a></h3><p>单线程可以配合Selector完成对多个channel可读写事件的监控，称为多路复用</p><ul><li>多路复用只针对网络，IO，普通文件没法利用多路复用</li><li>如果不使用selector，线程在没有连接请求的时候也会占用cpu，但是selector可以保证 <ul><li>有事件连接才去读取</li><li>有可读事件才去读取</li><li>有可写事件才去读取 <ul><li>限于网络传输能力，channel未必时时可写，一旦channel可写，会触发selector的可写事件</li></ul></li></ul></li></ul><h2 id="selector-1" tabindex="-1">selector <a class="header-anchor" href="#selector-1" aria-hidden="true">#</a></h2><h3 id="好处" tabindex="-1">好处 <a class="header-anchor" href="#好处" aria-hidden="true">#</a></h3><ul><li>一个线程配合selector可以监控多个channel事件，事件发生线程才去处理</li><li>线程充分利用</li><li>节约线程数量</li><li>减少线程上下文切换</li></ul><h3 id="创建" tabindex="-1">创建 <a class="header-anchor" href="#创建" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Selector</span><span style="color:#A6ACCD;"> selector </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Selector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="绑定socketchannel事件" tabindex="-1">绑定socketChannel事件 <a class="header-anchor" href="#绑定socketchannel事件" aria-hidden="true">#</a></h3><p>只有注册后的事件selector才会关心</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Selector</span><span style="color:#A6ACCD;"> selector </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Selector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SocketChannel</span><span style="color:#A6ACCD;"> socketChannel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> SocketChannel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        socketChannel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">register</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">selector</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">绑定事件</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>channel必须工作在非阻塞模式</li><li>fileChannel没有非阻塞模式也就不能使用selector</li><li>绑定事件类型 <ul><li>connent - 客户端连接成功触发</li><li>accept - 服务器端成功接受触发</li><li>read - 数据可读入触发</li><li>write - 数据可写入触发</li></ul><h3 id="监听channel事件" tabindex="-1">监听channel事件 <a class="header-anchor" href="#监听channel事件" aria-hidden="true">#</a></h3><h4 id="方法1-阻塞到绑定事件发生" tabindex="-1">方法1:阻塞到绑定事件发生 <a class="header-anchor" href="#方法1-阻塞到绑定事件发生" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">selector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">select</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="方法2-阻塞到绑定事件发生或者超时" tabindex="-1">方法2：阻塞到绑定事件发生或者超时 <a class="header-anchor" href="#方法2-阻塞到绑定事件发生或者超时" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">selector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">select</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> times</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="方法3-不会阻塞-也就是不管有没有事件-立刻返回-自己根据返回值检查是否有事件" tabindex="-1">方法3：不会阻塞，也就是不管有没有事件，立刻返回，自己根据返回值检查是否有事件 <a class="header-anchor" href="#方法3-不会阻塞-也就是不管有没有事件-立刻返回-自己根据返回值检查是否有事件" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">selector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">selectNow</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="💡-select-何时不阻塞" tabindex="-1">💡 select 何时不阻塞 <a class="header-anchor" href="#💡-select-何时不阻塞" aria-hidden="true">#</a></h3></li></ul><blockquote><ul><li>事件发生时 <ul><li>客户端发起连接请求，会触发 accept 事件</li><li>客户端发送数据过来，客户端正常、异常关闭时，都会触发 read 事件，另外如果发送的数据大于 buffer 缓冲区，会触发多次读取事件</li><li>channel 可写，会触发 write 事件</li><li>在 linux 下 nio bug 发生时</li></ul></li><li>调用 selector.wakeup()</li><li>调用 selector.close()</li><li>selector 所在线程 interrupt</li></ul></blockquote><h2 id="处理accept事件" tabindex="-1">处理accept事件 <a class="header-anchor" href="#处理accept事件" aria-hidden="true">#</a></h2><p>客户端代码</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> throws IOException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Socket</span><span style="color:#A6ACCD;"> socket </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Socket</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">localhost</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8080</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">socket</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            socket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOutputStream</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBytes</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">in</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>服务器端代码</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> throws IOException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ServerSocketChannel</span><span style="color:#A6ACCD;"> channel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ServerSocketChannel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            channel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">InetSocketAddress</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">8080</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">Selector</span><span style="color:#A6ACCD;"> selector </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Selector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            channel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">configureBlocking</span><span style="color:#89DDFF;">(false);</span></span>
<span class="line"><span style="color:#A6ACCD;">            channel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">register</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">selector</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SelectionKey</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OP_ACCEPT</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(true){</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> selector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">select</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;">//没有绑定事件的时候阻塞，也就是没有服务端响应客户端连接前一直阻塞</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">Set</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">SelectionKey</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> keys </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> selector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">selectedKeys</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;">//获取所有事件accept</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">Iterator</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">SelectionKey</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> iter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> keys</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">iterator</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">iter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasNext</span><span style="color:#89DDFF;">()){</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//为什么不使用增强for循环，在增强for中我们不能删除元素，但是在迭代器中我们可以删除元素</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#C792EA;">SelectionKey</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> iter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isAcceptable</span><span style="color:#89DDFF;">()){</span></span>
<span class="line"><span style="color:#89DDFF;">                        </span><span style="color:#676E95;font-style:italic;">//判断事件类型</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#C792EA;">ServerSocketChannel</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ServerSocketChannel</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">channel</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#C792EA;">ByteBuffer</span><span style="color:#A6ACCD;"> buffer</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">ByteBuffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">allocate</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> read</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">channel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">//正常断开返回-1</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">read</span><span style="color:#89DDFF;">==-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">                            key</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cancel</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                            buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">flip</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                            </span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">IOEcpection</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">                            e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStarce</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                            key</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cancel</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">                    iter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;">//删除事件</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h3 id="为什么进行iter-remove" tabindex="-1">为什么进行iter.remove() <a class="header-anchor" href="#为什么进行iter-remove" aria-hidden="true">#</a></h3><ul><li>在select事件触发后，将相关的key放在selectKeys中，但不会移除，such as</li><li>第一次触发accept事件，没有移除sscKey</li><li>第二次触发scKey中的read事件，在集合中还有上次的sscKey，在处理没有serverSocket连接，就会导致空指针</li></ul><h3 id="💡-cancel" tabindex="-1">💡 cancel <a class="header-anchor" href="#💡-cancel" aria-hidden="true">#</a></h3><ul><li>cancel会取消注册在selector的channel，并从keys集合删除key，selector不再监听channel</li></ul><h3 id="不处理边界的问题" tabindex="-1">不处理边界的问题 <a class="header-anchor" href="#不处理边界的问题" aria-hidden="true">#</a></h3><p>服务器端</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Server</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">ServerSocket</span><span style="color:#A6ACCD;"> ss </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ServerSocket</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">8080</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(true){</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">Socket</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ss</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">accept</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">InputStream</span><span style="color:#A6ACCD;"> in </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInputStream</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(true){</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> read </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> in</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">read</span><span style="color:#89DDFF;">==-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">read</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>客户端</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">Socket</span><span style="color:#A6ACCD;"> socket</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Socket</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">localhost</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">8080</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">OutputStream</span><span style="color:#A6ACCD;"> out</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">socket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOutputStream</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBytes</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">sicket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,41),o=[e];function c(r,t,D,y,F,i){return n(),a("div",null,o)}const u=s(p,[["render",c]]);export{C as __pageData,u as default};
