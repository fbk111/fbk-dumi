import{_ as s,o as n,c as a,a as l}from"./app.9287c781.js";const p="/assets/concurrentHashMap.df3cf7f3.png",e="/assets/concurment扩容.0acb3d45.png",o="/assets/准备bena.ea668a68.png",r="/assets/依赖循环.2be2fee2.png",t="/assets/三级缓存实例.e0c1770f.png",m=JSON.parse('{"title":"java面试题","description":"","frontmatter":{},"headers":[{"level":2,"title":"HashMap","slug":"hashmap","link":"#hashmap","children":[{"level":3,"title":"1.7的HashMap和1.8的HashMap的有什么区别","slug":"_1-7的hashmap和1-8的hashmap的有什么区别","link":"#_1-7的hashmap和1-8的hashmap的有什么区别","children":[]},{"level":3,"title":"为什么要使用红黑树","slug":"为什么要使用红黑树","link":"#为什么要使用红黑树","children":[]},{"level":3,"title":"为什么一上来不树化","slug":"为什么一上来不树化","link":"#为什么一上来不树化","children":[]},{"level":3,"title":"树化的条件","slug":"树化的条件","link":"#树化的条件","children":[]},{"level":3,"title":"退化的条件","slug":"退化的条件","link":"#退化的条件","children":[]},{"level":3,"title":"索引如何计算","slug":"索引如何计算","link":"#索引如何计算","children":[]},{"level":3,"title":"hashCode都有了，为什么还要提供二次hash","slug":"hashcode都有了-为什么还要提供二次hash","link":"#hashcode都有了-为什么还要提供二次hash","children":[]},{"level":3,"title":"数组的容量为什么选择2的n次方幂","slug":"数组的容量为什么选择2的n次方幂","link":"#数组的容量为什么选择2的n次方幂","children":[]},{"level":3,"title":"数组扩容后怎么判断要要移位","slug":"数组扩容后怎么判断要要移位","link":"#数组扩容后怎么判断要要移位","children":[]},{"level":3,"title":"计算索引时，如果时","slug":"计算索引时-如果时","link":"#计算索引时-如果时","children":[]},{"level":3,"title":"HashTable和ConcurrentHashMap","slug":"hashtable和concurrenthashmap","link":"#hashtable和concurrenthashmap","children":[]},{"level":3,"title":"扩容的流程","slug":"扩容的流程","link":"#扩容的流程","children":[]}]},{"level":2,"title":"ArrayList","slug":"arraylist","link":"#arraylist","children":[]},{"level":2,"title":"iterator","slug":"iterator","link":"#iterator","children":[{"level":3,"title":"iterator_FailFast_Fail","slug":"iterator-failfast-fail","link":"#iterator-failfast-fail","children":[]},{"level":3,"title":"iterator_FailSafe_Fail","slug":"iterator-failsafe-fail","link":"#iterator-failsafe-fail","children":[]}]},{"level":2,"title":"linkedList","slug":"linkedlist","link":"#linkedlist","children":[]},{"level":2,"title":"spring refresh","slug":"spring-refresh","link":"#spring-refresh","children":[{"level":3,"title":"解析属性的注解","slug":"解析属性的注解","link":"#解析属性的注解","children":[]},{"level":3,"title":"obtainFreshBeanFactory","slug":"obtainfreshbeanfactory","link":"#obtainfreshbeanfactory","children":[]},{"level":3,"title":"准备bean工厂","slug":"准备bean工厂","link":"#准备bean工厂","children":[]},{"level":3,"title":"postProcessBeanFactory","slug":"postprocessbeanfactory","link":"#postprocessbeanfactory","children":[]},{"level":3,"title":"invokeBenaFactoryPostProcessors","slug":"invokebenafactorypostprocessors","link":"#invokebenafactorypostprocessors","children":[]},{"level":3,"title":"registerBeanPostProcessors","slug":"registerbeanpostprocessors","link":"#registerbeanpostprocessors","children":[]},{"level":3,"title":"拓展beanFactory处理器","slug":"拓展beanfactory处理器","link":"#拓展beanfactory处理器","children":[]},{"level":3,"title":"initMessageSource","slug":"initmessagesource","link":"#initmessagesource","children":[]},{"level":3,"title":"initApplicationEventMulticaster","slug":"initapplicationeventmulticaster","link":"#initapplicationeventmulticaster","children":[]},{"level":3,"title":"onRresh","slug":"onrresh","link":"#onrresh","children":[]},{"level":3,"title":"registerListeners","slug":"registerlisteners","link":"#registerlisteners","children":[]},{"level":3,"title":"finishBeanFactoryInitlialization","slug":"finishbeanfactoryinitlialization","link":"#finishbeanfactoryinitlialization","children":[]},{"level":3,"title":"finishRefresh","slug":"finishrefresh","link":"#finishrefresh","children":[]}]},{"level":2,"title":"springBean生命周期","slug":"springbean生命周期","link":"#springbean生命周期","children":[{"level":3,"title":"处理名称，检查缓存","slug":"处理名称-检查缓存","link":"#处理名称-检查缓存","children":[]},{"level":3,"title":"处理父子容器","slug":"处理父子容器","link":"#处理父子容器","children":[]},{"level":3,"title":"dependsOn","slug":"dependson","link":"#dependson","children":[]},{"level":3,"title":"按scope创建bean","slug":"按scope创建bean","link":"#按scope创建bean","children":[]},{"level":3,"title":"创建bean","slug":"创建bean","link":"#创建bean","children":[]}]},{"level":2,"title":"spring事务","slug":"spring事务","link":"#spring事务","children":[]},{"level":2,"title":"springMvc 执行流程","slug":"springmvc-执行流程","link":"#springmvc-执行流程","children":[{"level":3,"title":"初始化阶段","slug":"初始化阶段","link":"#初始化阶段","children":[]},{"level":3,"title":"匹配阶段","slug":"匹配阶段","link":"#匹配阶段","children":[]},{"level":3,"title":"执行阶段","slug":"执行阶段","link":"#执行阶段","children":[]}]},{"level":2,"title":"springboot自动装配","slug":"springboot自动装配","link":"#springboot自动装配","children":[]},{"level":2,"title":"循环依赖-铺垫","slug":"循环依赖-铺垫","link":"#循环依赖-铺垫","children":[{"level":3,"title":"一级缓存-只实现了singleton scope","slug":"一级缓存-只实现了singleton-scope","link":"#一级缓存-只实现了singleton-scope","children":[]},{"level":3,"title":"二级缓存","slug":"二级缓存","link":"#二级缓存","children":[]},{"level":3,"title":"三级缓存","slug":"三级缓存","link":"#三级缓存","children":[]},{"level":3,"title":"set循环注入","slug":"set循环注入","link":"#set循环注入","children":[]}]},{"level":2,"title":"乐观锁和悲观锁","slug":"乐观锁和悲观锁","link":"#乐观锁和悲观锁","children":[]},{"level":2,"title":"创建一个饿汉式单例","slug":"创建一个饿汉式单例","link":"#创建一个饿汉式单例","children":[]},{"level":2,"title":"创建一个懒汉式单例","slug":"创建一个懒汉式单例","link":"#创建一个懒汉式单例","children":[]}],"relativePath":"java/java面试题.md","lastUpdated":1677681209000}'),c={name:"java/java面试题.md"},i=l('<h1 id="java面试题" tabindex="-1">java面试题 <a class="header-anchor" href="#java面试题" aria-hidden="true">#</a></h1><p>作者: fbk 时间：2023-2-21 地点：天津</p><blockquote><p>足够优秀再大方拥有</p></blockquote><h2 id="hashmap" tabindex="-1">HashMap <a class="header-anchor" href="#hashmap" aria-hidden="true">#</a></h2><h3 id="_1-7的hashmap和1-8的hashmap的有什么区别" tabindex="-1">1.7的HashMap和1.8的HashMap的有什么区别 <a class="header-anchor" href="#_1-7的hashmap和1-8的hashmap的有什么区别" aria-hidden="true">#</a></h3><ol><li>1.7数组+链表</li><li>1.8数组+（链表|红黑树）</li></ol><h3 id="为什么要使用红黑树" tabindex="-1">为什么要使用红黑树 <a class="header-anchor" href="#为什么要使用红黑树" aria-hidden="true">#</a></h3><ol><li>红黑树的出现时用来避免DOS攻击的，防止链表超长时的性能下降，树化应当是偶然的情况</li></ol><h3 id="为什么一上来不树化" tabindex="-1">为什么一上来不树化 <a class="header-anchor" href="#为什么一上来不树化" aria-hidden="true">#</a></h3><ol><li>hash表的查找，更新的时间复杂度是0(1)，但是红黑树的查找，更新的时间复杂度是O（log2n）,TreeNode占用的空间也比普通的Node打，如果必要，尽量还是使用链表</li><li>hash值如果足够随机，则在hash表内按泊松分布，在负载因子是0.75的情况下，长度超过8得分链表出现的概率微乎其微，选择8就是为了让树化的几率足够小</li></ol><h3 id="树化的条件" tabindex="-1">树化的条件 <a class="header-anchor" href="#树化的条件" aria-hidden="true">#</a></h3><ol><li>链表的长度超过树化阈值(8),链表的容量超过64</li></ol><h3 id="退化的条件" tabindex="-1">退化的条件 <a class="header-anchor" href="#退化的条件" aria-hidden="true">#</a></h3><ol><li>在扩容时如果拆分树时，树元素的个数&lt;=6就会发生退化</li><li>remove树节点时，如果root,root.left,root.right,root.left.left有一个为null，就会发生退化</li></ol><h3 id="索引如何计算" tabindex="-1">索引如何计算 <a class="header-anchor" href="#索引如何计算" aria-hidden="true">#</a></h3><p>计算对象的hashCode(),在进行调用hashMap的hash()方法进行二次哈希，最后&amp;(capacity-1)得到索引</p><h3 id="hashcode都有了-为什么还要提供二次hash" tabindex="-1">hashCode都有了，为什么还要提供二次hash <a class="header-anchor" href="#hashcode都有了-为什么还要提供二次hash" aria-hidden="true">#</a></h3><ol><li>二次hash是为了综合高位数据，让hash分布更加均匀</li></ol><h3 id="数组的容量为什么选择2的n次方幂" tabindex="-1">数组的容量为什么选择2的n次方幂 <a class="header-anchor" href="#数组的容量为什么选择2的n次方幂" aria-hidden="true">#</a></h3><ol><li>计算索引的时候，如果数组的容量是2的n次方幂的时候可以使用位与运算代替，效率更高(二次hash的值&amp;(数组容量-1))</li></ol><h3 id="数组扩容后怎么判断要要移位" tabindex="-1">数组扩容后怎么判断要要移位 <a class="header-anchor" href="#数组扩容后怎么判断要要移位" aria-hidden="true">#</a></h3><ol><li>二次hash&amp;当前数组容量如果位0，不变化，如果不为0，则变化，移动的位置就是桶下标+二次hash&amp;当前数组容量的结果</li></ol><h3 id="计算索引时-如果时" tabindex="-1">计算索引时，如果时 <a class="header-anchor" href="#计算索引时-如果时" aria-hidden="true">#</a></h3><h3 id="hashtable和concurrenthashmap" tabindex="-1">HashTable和ConcurrentHashMap <a class="header-anchor" href="#hashtable和concurrenthashmap" aria-hidden="true">#</a></h3><ol><li>HashTable和ConcurrentHashMap都是线程安全的</li><li>hashTable都对应一把锁，只有一个线程操作他</li><li>1.8之前concurrentHashMap使用了segment+数组+链表的结构，每个segment对应一把锁</li><li>1.8开始concurrentHashMap将数组的每个头节点作为锁</li></ol><p>一开始segment的初始容量是16个<code>(数组的容量也要符合2^n)</code>，也就证明可以有16个线程同时进行操作 <img src="'+p+`" alt=""> 在添加key为a的一项数据，a的原始hash是97，经过concurrentHashMap</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> hash </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">spread</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hashCode</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个方法会再次生成一个二次hash，通过二次哈希我们将他转换为二进制</p><p>最终的结果就是<code>1100 1011 1110 1100 1000 1100 0001 0000</code>,找到这个数的高次位<code>1100</code>换算成10进制就是12，所以存放在12的segment的下标，在segment下标位12的地方，还要进行细分索引位置，上述二级制结果的最后一位就是存放在segment位置的下标</p><h4 id="扩容的条件" tabindex="-1">扩容的条件 <a class="header-anchor" href="#扩容的条件" aria-hidden="true">#</a></h4><ol><li>排除初始化集合的大小，在以后向集合添加元素，当集合的元素长度&gt;=集合的长度的四分之三，就要进行扩容，对集合大小*2</li><li>在一开始初始化集合长度是要考虑集合的<code>capacity和factor</code>这两个因素，capacity表示将来要放多少个元素 <ul><li>假设capacity是12，factor是0.75，初始化集合长度是16的话，放入集合12个元素，集合容量还是要进行扩容，所以集合的长度应该设置为32</li></ul></li></ol><h3 id="扩容的流程" tabindex="-1">扩容的流程 <a class="header-anchor" href="#扩容的流程" aria-hidden="true">#</a></h3><ol><li>一个数组在满足里边的数组容量大于等于四分之三的情况下，那么就要进行扩容，扩容会在每个数组的末尾开始，每个segment的下标在经过扩容后会显示forwardingNode</li><li>segment下标下如果只有一个元素，那么就是直接将这个元素进行复制到新扩容的数组中去</li><li>如果是多个元素的情况下，就要考虑重新对链表的元素排序</li><li>假设在扩容的时候我们进行了put或者get，在迁移之前也就是segment没有变成forwardingNode的情况下，可以进行get或者put，</li><li>如果put或者get的是当前正在迁移的链表，只能将这个线程进行阻塞</li><li>如果是get或者put是后续已经处理的segment下标，也就是变成forwardingNode的下标，是不可以去新的数组中取出元素的，而是要帮忙将老的线程扩容到新的线程 <img src="`+e+`" alt=""></li></ol><h2 id="arraylist" tabindex="-1">ArrayList <a class="header-anchor" href="#arraylist" aria-hidden="true">#</a></h2><ol><li>无参构造arrayList在初始化容器容量为0</li><li>在之后每次扩容都是<code>当前数组的长度+当前数组的长度&gt;&gt;1</code></li><li>初始化添加一个集合的情况</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Integer</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> list</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addAll</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">List</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//当前list的长度为10</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Integer</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> list</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addAll</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">List</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">,,</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//此时list的长度是11</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在每次添加数组的时候，调用集合的<code>addAll方法</code>，如果添加的数组长度&gt;10,就会选取添加的数组长度作为初始容量</p><h2 id="iterator" tabindex="-1">iterator <a class="header-anchor" href="#iterator" aria-hidden="true">#</a></h2><h3 id="iterator-failfast-fail" tabindex="-1">iterator_FailFast_Fail <a class="header-anchor" href="#iterator-failfast-fail" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Person</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Person</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// CopyOnWriteArrayList&lt;Person&gt; personList = new CopyOnWriteArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">        list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Person</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> list</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol><li>在<code>System.out.println(person);</code>中添加断点条件为<code>person.name.equals(&quot;3&quot;)</code>,对list进行操作添加新的元素<code>list.add(new Person(&quot;5&quot;,5))</code>,在遍历完3之后会立刻报错，跳出迭代器</li><li>vector也是一个failFast模式</li></ol><h3 id="iterator-failsafe-fail" tabindex="-1">iterator_FailSafe_Fail <a class="header-anchor" href="#iterator-failsafe-fail" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">CopyOnWriteArrayList</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Person</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">CopyOnWriteArrayList</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">        list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Person</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> list</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">person</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol><li>还是上边的步骤，添加后不会报错，但是集合在遍历到4就结束循环，不会便利到5</li></ol><h2 id="linkedlist" tabindex="-1">linkedList <a class="header-anchor" href="#linkedlist" aria-hidden="true">#</a></h2><ol><li>arrayList的随机访问性能远远大于linkedList性能，因为linkedList是可以散乱在内存分布的，所以他是使用的指针进行指向，所以查找的时候是远远不如arrayList通过下标查找的块</li><li>linkedList和arrayList在向两端插入元素的时候速度基本差不多，但是向数组</li><li>因为CPU的缓存速度是远远大于内存速度的，ArrayList是一个内存相连的数组，所以在加载第n个元素中，会把n附近的元素也读入CPU缓存中，因为CPU判断有很大的几率会读入第nge元素附近的元素，提高了ArrayList的查找性能 ，但是LinkedList作为内存分布不在一块，所以在获取元素中放入CPU缓存还是吃亏的，因为不确定第n个元素的周围是否存在元素</li></ol><h2 id="spring-refresh" tabindex="-1">spring refresh <a class="header-anchor" href="#spring-refresh" aria-hidden="true">#</a></h2><h3 id="解析属性的注解" tabindex="-1">解析属性的注解 <a class="header-anchor" href="#解析属性的注解" aria-hidden="true">#</a></h3><p>在这个步骤我们可以注解在类上的属性的获取properties文件的值</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @Author 房博坤</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @Date 2023/2/22 16:15</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @Version 1.0.1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestEnviroment</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">NoSuchFieldException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">IOException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">获取@value值</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">QualifierAnnotationAutowireCandidateResolver</span><span style="color:#A6ACCD;"> resolver </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">QualifierAnnotationAutowireCandidateResolver</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> resolver</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSuggestedValue</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DependencyDescriptor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Bean1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDeclaredField</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">解析value的值</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> javaHome </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> resolver</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSuggestedValue</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DependencyDescriptor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Bean1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDeclaredField</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">javaHome</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">javaHome</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">解析sqlEl表达式</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> expression </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> resolver</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSuggestedValue</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DependencyDescriptor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Bean1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDeclaredField</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">expression</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">expression</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">getEnvironment</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">resolvePlaceholders</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">expression</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Environment</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getEnvironment</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">IOException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">StandardEnvironment</span><span style="color:#A6ACCD;"> env </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StandardEnvironment</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        env</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPropertySources</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">addLast</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ResourcePropertySource</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jdbc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ClassPathResource</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jdbc properties</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> env</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bean1</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Value</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Value</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\${JAVA_HOME}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> javaHome</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Value</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#{&#39;class version:&#39;+&#39;\${java.class.version}&#39;}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> expression</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><p>可以通过<code>QualifierAnnotationAutowireCandidateResolver</code>类的<code>getSuggestedValue(new DependencyDescriptor(Bean1.class.getDeclaredField(&quot;name&quot;), false));</code>获取属性注解@value的值</p><h3 id="obtainfreshbeanfactory" tabindex="-1">obtainFreshBeanFactory <a class="header-anchor" href="#obtainfreshbeanfactory" aria-hidden="true">#</a></h3><ul><li><p>beanFactory相当于ApplicationContext的成员变量，对于拓展spring的功能基本上是在beanFacotry实现的</p></li><li><p>获取beanFactory，beanFactory负责bean的创建，依赖注入和初始化</p></li><li><p>BeanDefinition作为bean的设立蓝图，规定了bean的特征，如单例多例，依赖关系，初始销毁</p></li><li><p>registerBean和registerBeanDefination的区别是什么 1.</p></li></ul><ol><li>在最开始可以获取默认的beanFactory</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">一开始</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">DefaultListableBeanFactory</span><span style="color:#A6ACCD;"> beanFactory </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DefaultListableBeanFactory</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">beanFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBeanDefinitionNames</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>从xml获取加载bean定义</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">从xml获取</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">XmlBeanDefinitionReader</span><span style="color:#A6ACCD;"> reader1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">XmlBeanDefinitionReader</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">beanFactory</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        reader1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadBeanDefinitions</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ClassPathResource</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ld.xml</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">beanFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBeanDefinitionNames</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="3"><li>从配置类进行获取</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">从配置类获取</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        beanFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerBeanDefinition</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">config1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> BeanDefinitionBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">genericBeanDefinition</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Config1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">getBeanDefinition</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ConfigurationClassPostProcessor</span><span style="color:#A6ACCD;"> postProcessor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ConfigurationClassPostProcessor</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        postProcessor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postProcessBeanDefinitionRegistry</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">beanFactory</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">beanFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBeanDefinitionNames</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="4"><li>包扫描获取</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">包扫描</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ClassPathBeanDefinitionScanner</span><span style="color:#A6ACCD;"> scanner </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ClassPathBeanDefinitionScanner</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">beanFactory</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        scanner</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scan</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">day04.refresh.sub</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">beanFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBeanDefinitionNames</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Config1</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Bean2</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bean2</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Bean2</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bean1</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bean2</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="准备bean工厂" tabindex="-1">准备bean工厂 <a class="header-anchor" href="#准备bean工厂" aria-hidden="true">#</a></h3><p><code>完善beanFactory</code><img src="`+o+`" alt=""></p><ul><li>standardBeanExpressionResolver来解析SQLEL</li><li>ResoueceEditorRegister会注释类型转换器，并且ApplicationContext提供的Enviroment完成\${}解析</li><li>特殊bean指beanFactory以及ApplicationContext，通过registerResolveableDependency来注册</li><li>ApplicationContextAwareProcessor用来解析Aware接口</li><li>BeanPostProcedss相当于对beanFactory的功能增强，让他可以识别更对的注解如@Autowire等等</li></ul><h3 id="postprocessbeanfactory" tabindex="-1">postProcessBeanFactory <a class="header-anchor" href="#postprocessbeanfactory" aria-hidden="true">#</a></h3><p><code>子类拓展器</code></p><p>一般ApplciationContext都要利用呀注册新的scope，完善web的BeanFactory</p><h3 id="invokebenafactorypostprocessors" tabindex="-1">invokeBenaFactoryPostProcessors <a class="header-anchor" href="#invokebenafactorypostprocessors" aria-hidden="true">#</a></h3><p><code>bean后处理器的作用</code></p><ul><li>beanFactory后处理器，充当beanFactory拓展点</li><li>ConfigurationClassPostProcessor 解析<code>@Configuration,@Bean,@Import,@PropertySource</code></li></ul><h3 id="registerbeanpostprocessors" tabindex="-1">registerBeanPostProcessors <a class="header-anchor" href="#registerbeanpostprocessors" aria-hidden="true">#</a></h3><h3 id="拓展beanfactory处理器" tabindex="-1">拓展beanFactory处理器 <a class="header-anchor" href="#拓展beanfactory处理器" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestBeanPostProcessor</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">GenericApplicationContext</span><span style="color:#A6ACCD;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GenericApplicationContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">DefaultListableBeanFactory</span><span style="color:#A6ACCD;"> beanFactory </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDefaultListableBeanFactory</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        beanFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerBeanDefinition</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bean1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> BeanDefinitionBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">genericBeanDefinition</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Bean1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">getBeanDefinition</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        beanFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerBeanDefinition</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bean2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> BeanDefinitionBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">genericBeanDefinition</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Bean2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">getBeanDefinition</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        beanFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerBeanDefinition</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bean3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> BeanDefinitionBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">genericBeanDefinition</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Bean3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">getBeanDefinition</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">refresh</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        beanFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBean</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Bean1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//在执行的过程中发现并不能执行注解相关操作，那么就要配置后处理器进行解析注解</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bean1</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">Bean2</span><span style="color:#A6ACCD;"> bean2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">Bean3</span><span style="color:#A6ACCD;"> bean3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Autowired</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setBean2</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Bean2</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">bean2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">bean2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> bean2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Resource</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setBean3</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Bean3</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">bean3</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">执行了注解</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">bean3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> bean3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Aspect</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bean2</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Before</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">execution(* foo())</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bean3</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Aspect1</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">before</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">before...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">foo</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>没有加入拓展器我们就不能识别这些注解，所以要去beanFactory去注册可以解析@Autowired注解解析器</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//解析@autowared,@value注解</span></span>
<span class="line"><span style="color:#A6ACCD;">        beanFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerBeanDefinition</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">processor1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">BeanDefinitionBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">genericBeanDefinition</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">AutowiredAnnotationBeanPostProcessor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">getBeanDefinition</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//解析resource，preDestroy，PostConstruct注解</span></span>
<span class="line"><span style="color:#A6ACCD;">        beanFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerBeanDefinition</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">processor2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">BeanDefinitionBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">genericBeanDefinition</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">CommonAnnotationBeanPostProcessor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">getBeanDefinition</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//解析aspect和after，before等注解</span></span>
<span class="line"><span style="color:#A6ACCD;">        beanFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerBeanDefinition</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">processor3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">BeanDefinitionBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">genericBeanDefinition</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">AnnotationAwareAspectJAutoProxyCreator</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">getBeanDefinition</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>通过向beanFactory注册注释解析器就可以实现注解解析</p><h3 id="initmessagesource" tabindex="-1">initMessageSource <a class="header-anchor" href="#initmessagesource" aria-hidden="true">#</a></h3><p>applicationContext进行功能增强，国际化增强</p><p>先找到ApplicationContext里边是否存在messageSource的bean，如果没有，则提供空的MessageSource实现，这个功能只存在ApplicationContext当中</p><h3 id="initapplicationeventmulticaster" tabindex="-1">initApplicationEventMulticaster <a class="header-anchor" href="#initapplicationeventmulticaster" aria-hidden="true">#</a></h3><ul><li>用来发布事件给监听器</li><li>可以从容器中找到名为ApplicationEventMulticaster的bean作为时间监听广播器，若没有，也会创建新的事件广播器</li><li>可以调用ApplicationContext.publishEvent来发布事件</li></ul><h3 id="onrresh" tabindex="-1">onRresh <a class="header-anchor" href="#onrresh" aria-hidden="true">#</a></h3><p><code>空实现</code></p><h3 id="registerlisteners" tabindex="-1">registerListeners <a class="header-anchor" href="#registerlisteners" aria-hidden="true">#</a></h3><ul><li><p>用来接收事件</p></li><li><p>一部分监听器是事先编程添加的，另一部分监听器来自容器中的bean，还有一部分来源于@EventListener的解析</p></li><li><p>接收事件实现ApplicationListener接口，重写其中的onApplicationEvent(E e)方法即可</p></li></ul><h3 id="finishbeanfactoryinitlialization" tabindex="-1">finishBeanFactoryInitlialization <a class="header-anchor" href="#finishbeanfactoryinitlialization" aria-hidden="true">#</a></h3><ul><li>conversionService是一套转换机制，作为对PropertyEditor的补充</li><li>单例池用来缓存所有的单例对象，对象创建都分为三部分，每一阶段都有不同的bean后处理器参与，拓展功能</li></ul><h3 id="finishrefresh" tabindex="-1">finishRefresh <a class="header-anchor" href="#finishrefresh" aria-hidden="true">#</a></h3><ul><li>控制容器内需要生命周期管理的bean</li><li>如果容器中名称为lifecycleProcessor的bean就用它，否则创建默认生命周期管理器，相当于这个生命周期start，继承lifeCycle的bean就开始start，生命周期end，继承lifeCycle的bean就开始end</li></ul><h2 id="springbean生命周期" tabindex="-1">springBean生命周期 <a class="header-anchor" href="#springbean生命周期" aria-hidden="true">#</a></h2><h3 id="处理名称-检查缓存" tabindex="-1">处理名称，检查缓存 <a class="header-anchor" href="#处理名称-检查缓存" aria-hidden="true">#</a></h3><ul><li>先把bean别名解析为实际名称，在进行后续处理</li><li>若要FactoryBean本身，需要使用&amp;名称获取</li><li>singletonObjects是一级缓存，放单例成品对象</li><li>singletonFactories是三级缓存，放单例工厂</li><li>earlySingletonObjects是二级缓存，放单例工厂的产品，可称为提前单例对象</li></ul><h3 id="处理父子容器" tabindex="-1">处理父子容器 <a class="header-anchor" href="#处理父子容器" aria-hidden="true">#</a></h3><ul><li>父子容器的bean名称可以重复</li><li>优先找子容器的bean，找到了直接返回，找不到向父容器继续查找</li></ul><h3 id="dependson" tabindex="-1">dependsOn <a class="header-anchor" href="#dependson" aria-hidden="true">#</a></h3><p>大部分bean是有依赖关系的，比如说a依赖b，就会先创建b</p><p>如果a和b没有相互依赖，但还是想让b先创建，就会使用a dependsOn b，让b先创建</p><h3 id="按scope创建bean" tabindex="-1">按scope创建bean <a class="header-anchor" href="#按scope创建bean" aria-hidden="true">#</a></h3><h4 id="单例bean" tabindex="-1">单例bean <a class="header-anchor" href="#单例bean" aria-hidden="true">#</a></h4><h5 id="创建流程" tabindex="-1">创建流程 <a class="header-anchor" href="#创建流程" aria-hidden="true">#</a></h5><ul><li>context使用refresh</li><li>调用getBean初始化(init)bean</li><li>context关闭，销毁bean</li></ul><h4 id="多例bean创建" tabindex="-1">多例bean创建 <a class="header-anchor" href="#多例bean创建" aria-hidden="true">#</a></h4><ul><li>多例bean从getBean开始创建</li></ul><h4 id="request-bean" tabindex="-1">request bean <a class="header-anchor" href="#request-bean" aria-hidden="true">#</a></h4><p>从首次getBean被创建，到request结束前被销毁</p><h3 id="创建bean" tabindex="-1">创建bean <a class="header-anchor" href="#创建bean" aria-hidden="true">#</a></h3><h4 id="创建bean实例阶段" tabindex="-1">创建bean实例阶段 <a class="header-anchor" href="#创建bean实例阶段" aria-hidden="true">#</a></h4><h4 id="依赖注入" tabindex="-1">依赖注入 <a class="header-anchor" href="#依赖注入" aria-hidden="true">#</a></h4><p>在beanFactory中使用<code>registerBeanDefinition</code>去注册注解解析器</p><h4 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-hidden="true">#</a></h4><table><thead><tr><th>要点</th><th>总结</th></tr></thead><tbody><tr><td>内置Aware接口的装配</td><td>包括BeanNameAware，BeanFactory等</td></tr><tr><td>拓展Aware接口的装配</td><td>由ApplicationContextAwareProcessor解析</td></tr><tr><td>@PostConstruct</td><td>由commonAnnotationBeanPostProcessor解析，执行时机在postProcessBeforeInitalizalization</td></tr><tr><td>InitializingBean</td><td>通过接口回调执行初始化</td></tr><tr><td>initMethod(即<code>&lt;bean init-method&gt;</code>或@Bean(initMethod))</td><td>根据BeanDefination得到初始化方法执行初始化</td></tr><tr><td>创建aop代理</td><td>使用AnnotationAwareAspectJAutoProxyCreator注册注解解析器</td></tr></tbody></table><h4 id="创建阶段" tabindex="-1">创建阶段 <a class="header-anchor" href="#创建阶段" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @Author 房博坤</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @Date 2023/2/23 21:37</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @Version 1.0.1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestInitialization</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">GenericApplicationContext</span><span style="color:#A6ACCD;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GenericApplicationContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerBean</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">CommonAnnotationBeanPostProcessor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerBean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bean1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">Bean1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">bd</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;">bd</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setInitMethodName</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">initMethod</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">refresh</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bean1</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InitializingBean</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BeanFactoryAware</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setBeanFactory</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BeanFactory</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">beanFactory</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BeansException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">PostConstruct</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">initMethod</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">afterPropertiesSet</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Exception</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><ol><li>首先执行的是<code>BeanFactoryAware</code>方法是<code>setBeanFactory</code>,也就是aware接口的方法</li><li>其次执行的是使用<code>@PostConsuctor</code>注解的方法</li><li>再执行的是<code>InitiaLizationBean</code>的方法</li><li>最后执行的是使用<code>registerBean</code>注册的初始化方法<code>setInitMethodName</code></li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">4</span></span>
<span class="line"><span style="color:#A6ACCD;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">3</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="注册可销毁的bean" tabindex="-1">注册可销毁的bean <a class="header-anchor" href="#注册可销毁的bean" aria-hidden="true">#</a></h4><ul><li>判断并等级可销毁的bean <ol><li>如果实现了disposableBean或者AutoCloseAble接口，则为可销毁bean</li><li>如果自定义了destoryMethod，则为可销毁的bean</li><li>如果采用了@Bean没有指定destoryMethod，则可以采用自动推断的方式获取销毁方法名(close,shutDown)</li><li>如果有preDestory注解的方法</li></ol></li><li>储存位置 <ol><li>singleton scope的可销毁bean会储存在beanFactory的成员当中</li><li>自定义的scope的可销毁bean会储存在对应的域当中(request的bean)</li><li>porperty scope不会储存，需要自己找到此对象销毁</li></ol></li></ul><p><code>存储时都会封装成一个DisposableBeanAdapter类型对销毁方法的调用进行适配</code></p><h4 id="销毁bean" tabindex="-1">销毁bean <a class="header-anchor" href="#销毁bean" aria-hidden="true">#</a></h4><ul><li>singletonBean的销毁在ApplicationContext.close时，此时会找得到所有的DisposableBean的名字，逐一销毁</li><li>自定义scope bean的销毁在作用域对象生命周期结束</li><li>propotype bean的销毁可以通过自己手动调用AutowireCapableBeanFactory.destoryBean方法执行销毁</li><li>同一bean中不同形式的调用次序 <ul><li>优先后处理器销毁，@PreDestory</li><li>其次DisposableBena接口销毁</li><li>最后destoryMethod销毁（包括自定义名称，推断名称，autoCloseable接口）</li></ul></li></ul><h2 id="spring事务" tabindex="-1">spring事务 <a class="header-anchor" href="#spring事务" aria-hidden="true">#</a></h2><ol><li><p>在添加<code>@Transactional</code>注解时，spring默认只是对runtimeExpection和Error这两个类的子类才会进行回滚操作</p></li><li><p>可以使用<code>@Transaction(rollbackFor=FileNotFoundExpection.class)</code>添加特定的异常类让在触发这个错误的时候进行回滚</p></li><li><p>一般直接可以使用<code>@Transaction(rollbackFor=Expection.class)</code></p></li><li><p>自己加了<code>try catch</code>代码块并不会全局抛出异常，所以也不会回滚代码</p><ul><li>解决方法：在catch块中添加<code>throw new RuntimeExpection(e)</code></li><li>在catch块中添加<code>TransactionInterceptor.currentTransactionStatues().setRollbackOnly()</code></li><li>如果是在aspect切面<code>try catch</code>异常，那么也不会捕获异常，可以使用前两种方法，也可以提高前面执行的优先级,只用<code>@Order</code></li></ul></li><li><p>如果方法使用default修饰的话，也不会在异常抛出回滚事务，只能使用public才能回滚</p></li><li><p>设置父子容器，如果父容器开启了<code>事务回滚的注解</code>，子容器继承他，但是子容器扫描的范围并且他的包扫描的范围比父容器还大，并且在这个项目中，存在两个service5类，其中一个是父包，自包可以扫描的，另一个只能子包扫描，这时进行依赖注入的时候，就会默认从子包扫描的类中去注入service5，但是子包又没有开启事务管理，所以<code>@Transaction</code>无效，所以在今后的项目中，不要让子包扫描到不该扫的包</p></li><li><p>使用<code>@Transaction</code>需要代理对象才能起作用，从applicationContext容器中获取对用的类型生成代理对象，如果代理对象里边的方法使用this，默认使用的是当前的方法也就是没有代理类，那么就事务就不会生效</p><ul><li>解决方法</li><li>使用@Autowire注入自己，注入的代理对象调用事务方法</li><li>使用<code>AppContext.currentProxy</code>去得到当前的代理对象，然后调用方法，还需要在父容器中设置<code>@EnableAspectjAutoProxy(exposeProxy=true)</code></li></ul></li><li><p>如果同时有两个线程同时执行转账操作</p></li></ol><table><thead><tr><th>余额\\账户</th><th>A</th><th>B</th></tr></thead><tbody><tr><td>1000</td><td>----</td><td>-----</td></tr><tr><td>1000</td><td>----</td><td>-----</td></tr></tbody></table><ol><li>账号A首先进行查询,没有任何锁保护的情况下，账户B也查询了余额</li><li>两个线程查询的A余额都是1000，所以会对A账户进行两次转钱的操作，导致账户A的余额会变成负数</li></ol><ul><li>解决方法 <ol><li>如果给转账的方法添加synchronize修饰符，保证查询和转账的原子性，但是不能保证事务提交的原子性，还是会发生余额为负的情况</li><li>在线程的层面加锁实现</li><li>数据库层面：在查询余额后的sql语句加上for update，保证查询sql的原子性</li></ol></li></ul><h2 id="springmvc-执行流程" tabindex="-1">springMvc 执行流程 <a class="header-anchor" href="#springmvc-执行流程" aria-hidden="true">#</a></h2><h3 id="初始化阶段" tabindex="-1">初始化阶段 <a class="header-anchor" href="#初始化阶段" aria-hidden="true">#</a></h3><ol><li>在web容器第一次调用dispatcherServlet时候，会创建其对象并执行init方法</li><li>init方法会创建spring web容器并调用refresh方法</li><li>refresh会创建并初始化SpringMVC的重要组件，如multipleResolver，HandlerMapping，HandlerApapter，HandlerExpectionResolver，ViewResolver等，除了mutipleResolver，上述的组件都可以创建多个</li><li>容器初始化后，会将上一步初始化好的重要组件，赋值给dispatcherServlet的成员变量</li></ol><h3 id="匹配阶段" tabindex="-1">匹配阶段 <a class="header-anchor" href="#匹配阶段" aria-hidden="true">#</a></h3><ol><li>用户发送统一的请求到达前端控制器DispatcherServlet</li><li>DispatcherServlet遍历所有HandlerMapping，找到路径匹配的处理器 <ul><li>HandlerMapping有多个，每个HandlerMapping会返回不同的处理器对象，谁先匹配，返回谁的处理器，其中能识别@RequestMapping的优先级最高</li><li>对于@RequestMapping的处理器时HandlerMethod，包含了控制器对象和控制器方法信息</li><li>路径与处理器的映射关系在HandlerMapping初始化就建立好了</li></ul></li><li>将HandlerMethod连同匹配到的拦截器，生成HandlerExecutiaonChain返回</li><li>遍历HandlerAdapter处理器适配器，找到能处理HandlerMethod的适配器对象开始匹配</li></ol><h3 id="执行阶段" tabindex="-1">执行阶段 <a class="header-anchor" href="#执行阶段" aria-hidden="true">#</a></h3><ol><li>拦截器preHandler</li><li>由HandlerApapter调用HandlerMethod <ul><li>调用前处理不同类型的handler</li><li>调用后处理不同类型的返回值</li></ul></li><li>如果第二步没有异常</li></ol><ul><li>返回ModelAndView</li><li>执行拦截器PostHandler</li><li>解析视图（ViewResolver），得到View对象，进行视图解析</li></ul><ol start="4"><li>第二步有异常的化，进入HandlerExpectionResolver异常处理流程</li><li>最后都会执行afterCompletion方法</li><li>如果控制器标注了@ResponseBody注解，则在第二部，就会生成JSON结果，并标记ModleAndView处理好，就不会执行第三步的视图渲染，但是还会执行postHandler还有afterCompletion</li></ol><h2 id="springboot自动装配" tabindex="-1">springboot自动装配 <a class="header-anchor" href="#springboot自动装配" aria-hidden="true">#</a></h2><p>在<code>springBootApplication</code>注解中含有</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Target</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;">ElementType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TYPE</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Retention</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">RetentionPolicy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RUNTIME</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Documented</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Inherited</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">SpringBootConfiguration</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">EnableAutoConfiguration</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">ComponentScan</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">excludeFilters</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{@</span><span style="color:#C792EA;">Filter</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> FilterType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">CUSTOM</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">classes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">TypeExcludeFilter</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Filter</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> FilterType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">CUSTOM</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">classes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">AutoConfigurationExcludeFilter</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">)}</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ol><li>@EnableAutoConfiguration</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">GenericApplicationContext</span><span style="color:#A6ACCD;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GenericApplicationContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        AnnotationConfigUtils</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerAnnotationConfigProcessors</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDefaultListableBeanFactory</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerBean</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FialFastVsFailSafe</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">refresh</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">AutoConfigurationPackages</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDefaultListableBeanFactory</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Configuration</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">EnableAutoConfiguration</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Demo1</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">failFast</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>可以输出当前类的包所在路径 2. @import 用来加载META-INF/spring.factories的文件自动配置类</p><h2 id="循环依赖-铺垫" tabindex="-1">循环依赖-铺垫 <a class="header-anchor" href="#循环依赖-铺垫" aria-hidden="true">#</a></h2><h3 id="一级缓存-只实现了singleton-scope" tabindex="-1">一级缓存-只实现了singleton scope <a class="header-anchor" href="#一级缓存-只实现了singleton-scope" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//获取bean，如果存在，则返回存在的，不存在则返回创建的</span></span>
<span class="line"><span style="color:#C792EA;">A</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">singletion</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">!=null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> a</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    a</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">A</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    singletion</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">put</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="一级缓存的弊端" tabindex="-1">一级缓存的弊端 <a class="header-anchor" href="#一级缓存的弊端" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">B</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setB</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">B</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">A</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setB</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">A</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>在上述的代码中，a，b的对象实例在singletion都需要创建，但是它们都需要对方的实例，set是在init方法执行之前执行的，所以没有对方的实例，就不会执行init，所以死锁了</p><h3 id="二级缓存" tabindex="-1">二级缓存 <a class="header-anchor" href="#二级缓存" aria-hidden="true">#</a></h3><ul><li>一级缓存singleObjects</li><li>二级缓存singletonFactories <img src="`+r+'" alt=""></li></ul><ol><li>new A()后创建的实例虽然还没有给成员变量赋值+没有执行init方法，那就先放入二级缓存</li><li>a.setB(?)就会像二级缓存中查找是否有B的实例，没有的话，就创建new B,放如二级缓存</li><li>此时在二级缓存中的B并不是init后的完成的B实例，A也不是，但是spring为了完成任务将半成品的a去set到了b成员变量，然后执行init，最后放入一级缓存</li><li>a继续执行向下的步骤</li></ol><h3 id="三级缓存" tabindex="-1">三级缓存 <a class="header-anchor" href="#三级缓存" aria-hidden="true">#</a></h3><ul><li>三级缓存：earlySingletonObjects <img src="'+t+`" alt=""></li></ul><ol><li>判断一级缓存中有没有实例，没有实例的话，创建一个半成品放入二级缓存</li><li>a进行set的时候从二级缓存中获取，如果没有的话，就去创建b实例</li><li>b获取a向二级缓存取出半成品a，spring检测如果是循环依赖的将a创建一个工厂对象放入三级缓存中并返回三级缓存的a的实例存入b</li><li>将b的工厂对象返回并在a进行set</li><li>创建代理，如果代理已经创建则返回三级缓存中的工厂对象</li></ol><h3 id="set循环注入" tabindex="-1">set循环注入 <a class="header-anchor" href="#set循环注入" aria-hidden="true">#</a></h3><ol><li>getBean(a)创建a的实例</li><li>populdate(b)，检测到有b的成员变量属性</li><li>getBean(b)创建b的实例</li><li>populate(a)创建a的实例</li><li>由图可以看出，在a.setB(?)之前就会将a的实例放入三级缓存当中</li></ol><h2 id="乐观锁和悲观锁" tabindex="-1">乐观锁和悲观锁 <a class="header-anchor" href="#乐观锁和悲观锁" aria-hidden="true">#</a></h2><ol><li>悲观锁的代表是synchronize和Lock锁 <ul><li>核心思想是[线程只能占有勒索，才能去操作共享变量，每次只有一个线程占锁成功，获取锁失败的线程，都得停下来]</li><li>线程从运行到阻塞，再从阻塞到唤醒，涉及线程的上下文切换，如果性能严重，会发生泄漏</li><li>线程在获取synchronize和Lock锁时，如果锁已经被占用了，都会做几次重试操作，减少阻塞机会</li></ul></li><li>乐观锁是AtomicInteger，使用cas保证原子性 <ul><li>核心思想是[无需加锁，每次只有一个线程能够修改共享变量，其他失败的线程不需要停止，可以不断重试直到成功]</li><li>由于线程一直运行所以没有上下文切换</li><li>需要多核CPU支持，并且线程数不能超过CPU核心数</li></ul></li></ol><h2 id="创建一个饿汉式单例" tabindex="-1">创建一个饿汉式单例 <a class="header-anchor" href="#创建一个饿汉式单例" aria-hidden="true">#</a></h2><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Singleton1</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Serializable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//饿汉式创建，加载当前类就创建singleton,只要类被初始化了，就会创建singleton</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">SingeleTop</span><span style="color:#A6ACCD;"> singeleTop</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SingeleTop</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Singleton1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">执行了构造方法</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">SingeleTop</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> singeleTop</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">otherMethod</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">调用这个方法前就要创建对象实例了</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Singleton1</span><span style="color:#A6ACCD;"> sin</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Singleton1</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        sin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">otherMethod</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ol><li>在调用otherMethod前就开始加载类，创建singleton变量</li></ol><p>如何破解单例对象</p><ol><li>创建反射</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reflection</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> clazz</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> throws NoSuchMethodException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> InvocationTargetException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> InstantiationException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> IllegalAccessException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Constructor</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> constructor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> clazz</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDeclaredConstructor</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        constructor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAccessible</span><span style="color:#89DDFF;">(true);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">创建实例</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">TryModel</span><span style="color:#A6ACCD;"> tryModel1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">TryModel</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> constructor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">newInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>预防策略</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Singleton</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">singeleTop</span><span style="color:#89DDFF;">!=null){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RuntimeExpection</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">运行异常</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>serializable创建对象破坏单例</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">serializable</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> instance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> throws IOException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ClassNotFoundException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ByteArrayOutputStream</span><span style="color:#A6ACCD;"> bas </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ByteArrayOutputStream</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ObjectOutputStream</span><span style="color:#A6ACCD;"> oos </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ObjectOutputStream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">bas</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        oos</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeObject</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ObjectInputStream</span><span style="color:#A6ACCD;"> ois </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ObjectInputStream</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ByteArrayInputStream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">bas</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toByteArray</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">反序列化创建单例</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">ois</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readObject</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>预防策略</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//在singleton1类上重写resolve方法，返回当前对象singleTop</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ReadResolve</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> singleTon</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li>unsafe破坏单例对象</li></ol><ul><li>目前没有解决方法</li></ul><h2 id="创建一个懒汉式单例" tabindex="-1">创建一个懒汉式单例 <a class="header-anchor" href="#创建一个懒汉式单例" aria-hidden="true">#</a></h2><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Singleton3</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Serializable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Singleton3</span><span style="color:#89DDFF;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Singleton3</span><span style="color:#A6ACCD;"> singleton3</span><span style="color:#89DDFF;">=null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Singleton3</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">singleton3</span><span style="color:#89DDFF;">==null){</span></span>
<span class="line"><span style="color:#A6ACCD;">            singleton3</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Singleton3</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> singleton3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>上述方法存在的缺陷就是当多线程同时执行getInstance方法，此时就有可能创建多个实例，不符合单例模式</li><li>解决方法</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Singleton3</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Serializable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Singleton3</span><span style="color:#89DDFF;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Singleton3</span><span style="color:#A6ACCD;"> singleton3</span><span style="color:#89DDFF;">=null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> synchronize </span><span style="color:#C792EA;">Singleton3</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">singleton3</span><span style="color:#89DDFF;">==null){</span></span>
<span class="line"><span style="color:#A6ACCD;">            singleton3</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Singleton3</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> singleton3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>为getInstancea加上一个锁，这样可以保证只会创建一个单例对象</li><li>但是只需要创建的时候加锁保证单例创建，后续if会自动跳过创建，使用类锁太耗费性能</li><li>在代码块上添加锁</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Singleton3</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Serializable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Singleton3</span><span style="color:#89DDFF;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Singleton3</span><span style="color:#A6ACCD;"> INSTANCE</span><span style="color:#89DDFF;">=null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Singleton3</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INSTANCE</span><span style="color:#89DDFF;">==null){</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#82AAFF;">synchronize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Singleton</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INSTANCE</span><span style="color:#89DDFF;">==null){</span></span>
<span class="line"><span style="color:#A6ACCD;">                INSATNCE</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Singleton3</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> INSATNCE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,179),D=[i];function y(F,A,C,b,u,d){return n(),a("div",null,D)}const g=s(c,[["render",y]]);export{m as __pageData,g as default};
