import{_ as s,o as a,c as n,a as l}from"./app.1adc42ab.js";const d=JSON.parse('{"title":"jvm-垃圾回收概念","description":"","frontmatter":{},"headers":[{"level":2,"title":"system.gc","slug":"system-gc","link":"#system-gc","children":[{"level":3,"title":"手动进行GC","slug":"手动进行gc","link":"#手动进行gc","children":[]},{"level":3,"title":"手动 GC 理解不可达对象的回收行为","slug":"手动-gc-理解不可达对象的回收行为","link":"#手动-gc-理解不可达对象的回收行为","children":[]}]}],"relativePath":"jvm/jvm8.md","lastUpdated":null}'),e={name:"jvm/jvm8.md"},p=l(`<h1 id="jvm-垃圾回收概念" tabindex="-1">jvm-垃圾回收概念 <a class="header-anchor" href="#jvm-垃圾回收概念" aria-hidden="true">#</a></h1><p>作者: fbk 时间：2023-2-9 地点：济南</p><h2 id="system-gc" tabindex="-1">system.gc <a class="header-anchor" href="#system-gc" aria-hidden="true">#</a></h2><ol><li>通过system.gc()或者runtime.gc()调用，会显示触发Full GC,同时老年代和新生代进行回收，尝试释放被丢弃对象占用的位置</li><li>然而System.gc()调用附带一个免责声明，无法保证对垃圾收集器的调用</li><li>JVM实现者可以通过System.gc() 调用来决定JVM的GC行为。而一般情况下，垃圾回收应该是自动进行的，无须手动触发，否则就太过于麻烦了。在一些特殊情况下，如我们正在编写一个性能基准，我们可以在运行之间调用System.gc()</li></ol><h3 id="手动进行gc" tabindex="-1">手动进行GC <a class="header-anchor" href="#手动进行gc" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SystemGCTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SystemGCTest</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">gc</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;">//提醒jvm的垃圾回收器执行gc,但是不确定是否马上执行gc</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//与Runtime.getRuntime().gc();的作用一样。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//        System.runFinalization();//强制调用使用引用的对象的finalize()方法</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//如果发生了GC，这个finalize()一定会被调用</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">finalize</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Throwable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        super</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">finalize</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SystemGCTest 重写了finalize()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>输出结果不确定：有时候会调用 finalize() 方法，有时候并不会调用</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">SystemGCTest 重写了finalize()</span></span>
<span class="line"><span style="color:#A6ACCD;">或</span></span>
<span class="line"><span style="color:#A6ACCD;">空</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="手动-gc-理解不可达对象的回收行为" tabindex="-1">手动 GC 理解不可达对象的回收行为 <a class="header-anchor" href="#手动-gc-理解不可达对象的回收行为" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"></div></div>`,10),o=[p];function t(c,r,i,y,C,A){return a(),n("div",null,o)}const m=s(e,[["render",t]]);export{d as __pageData,m as default};
