import{_ as l,o as i,c as e,a}from"./app.1ab3fa21.js";const h="/assets/数据表示范围.8f3b3fb5.png",r="/assets/层次化结构.f5b85eff.png",t="/assets/磁盘时间.923f38ba.png",c="/assets/磁盘时间例1.c93239c4.png",d="/assets/磁盘时间例2.4cea70a2.png",n="/assets/串并联.8cb405d1.png",s="/assets/海明校验码.52e062bf.png",o="/assets/进程状态.b1765f1c.png",p="/assets/pv.274f784c.png",u="/assets/pv案例.ee92a868.png",A=JSON.parse('{"title":"1","description":"","frontmatter":{},"headers":[{"level":2,"title":"数据的表示","slug":"数据的表示","link":"#数据的表示","children":[{"level":3,"title":"数据的表示范围","slug":"数据的表示范围","link":"#数据的表示范围","children":[]}]},{"level":2,"title":"计算机结构","slug":"计算机结构","link":"#计算机结构","children":[]},{"level":2,"title":"流水线","slug":"流水线","link":"#流水线","children":[]},{"level":2,"title":"流水线吞吐率计算","slug":"流水线吞吐率计算","link":"#流水线吞吐率计算","children":[]},{"level":2,"title":"流水线加速比","slug":"流水线加速比","link":"#流水线加速比","children":[]},{"level":2,"title":"流水线的效率","slug":"流水线的效率","link":"#流水线的效率","children":[]},{"level":2,"title":"层次化的存储结构","slug":"层次化的存储结构","link":"#层次化的存储结构","children":[]},{"level":2,"title":"cahche","slug":"cahche","link":"#cahche","children":[]},{"level":2,"title":"局部性原理","slug":"局部性原理","link":"#局部性原理","children":[]},{"level":2,"title":"主存分类","slug":"主存分类","link":"#主存分类","children":[]},{"level":2,"title":"磁盘结构和参数","slug":"磁盘结构和参数","link":"#磁盘结构和参数","children":[]},{"level":2,"title":"总线","slug":"总线","link":"#总线","children":[]},{"level":2,"title":"串联系统-并联系统","slug":"串联系统-并联系统","link":"#串联系统-并联系统","children":[]},{"level":2,"title":"差错控制-CRC与海明校验码","slug":"差错控制-crc与海明校验码","link":"#差错控制-crc与海明校验码","children":[]},{"level":2,"title":"进程状态转换","slug":"进程状态转换","link":"#进程状态转换","children":[]},{"level":2,"title":"进程的同步和互斥（PV）","slug":"进程的同步和互斥-pv","link":"#进程的同步和互斥-pv","children":[]},{"level":2,"title":"PV操作","slug":"pv操作","link":"#pv操作","children":[]},{"level":2,"title":"死锁问题","slug":"死锁问题","link":"#死锁问题","children":[]},{"level":2,"title":"死锁地避免","slug":"死锁地避免","link":"#死锁地避免","children":[]}],"relativePath":"软件设计师/1.md","lastUpdated":1677076303000}'),_={name:"软件设计师/1.md"},g=a('<h1 id="_1" tabindex="-1">1 <a class="header-anchor" href="#_1" aria-hidden="true">#</a></h1><p>作者: fbk 时间：2023-2-21 地点：济南</p><blockquote><p>足够优秀再大方拥有</p></blockquote><h2 id="数据的表示" tabindex="-1">数据的表示 <a class="header-anchor" href="#数据的表示" aria-hidden="true">#</a></h2><ul><li>原码</li><li>反码 <ul><li>正数的原码和反码相同</li><li>负数的原码<code>除符号位</code>取反</li></ul></li><li>补码 <ul><li>正数的补码和原码相同</li><li>负数的补码是反码+1</li></ul></li><li>移码：作为浮点运算的介码，不管是正数还是负数，都在补码的基础上对<code>符号位取反</code></li></ul><h3 id="数据的表示范围" tabindex="-1">数据的表示范围 <a class="header-anchor" href="#数据的表示范围" aria-hidden="true">#</a></h3><p><img src="'+h+'" alt=""></p><h2 id="计算机结构" tabindex="-1">计算机结构 <a class="header-anchor" href="#计算机结构" aria-hidden="true">#</a></h2><ul><li>运算器 <ol><li>算术逻辑单元ALU： 跟运算相关</li><li>累加寄存器AC： 常用于ALU执行算数逻辑运算提供数据并暂存运算结果的寄存器</li><li>数据缓冲寄存器DR： 对内存储器进行读写操作的时候，用来暂存数据的寄存器</li><li>状态条件寄存器PSW： 记录运算中产生的标志信息，每一位单独使用，成为标志位（进位，溢出，中断…）</li></ol></li><li>控制器：控制整个计算机各部件有条不紊的工作，其基本功能是取指令与执行指令 <ol><li>程序计数器PC： 用来存放指令地址，运行时用来获取下一条指令的位置。</li><li>指令寄存器IR： 存储正在执行的指令，存储位数由指令字长决定。</li><li>指令译码器ID： 分析指令的操作码，来决定操作的性质与分法。</li><li>时序部件： CPU执行指令时根据时序部件发出的时钟信号进行相应操作，在取指阶段读取指令，在分析和执行阶段读取数据。</li></ol></li></ul><h2 id="流水线" tabindex="-1">流水线 <a class="header-anchor" href="#流水线" aria-hidden="true">#</a></h2><ul><li>如果把流水线的一条指令分为取值，分析和执行三部分，且三部分的时间分别是取指2ns，分析2ns，执行1ns</li><li>流水线周期是执行时间最长的一段，也就是2ns</li><li>100条指令全部执行完毕需要多长时间 <ul><li>1条指令执行的时间<code>1条指令执行的时间+（指令条数-1）*流水线周期</code></li><li>流水线计算理论公式是<code>(t1+t2+...tk)+(n-1)*t</code></li><li>流水线计算实践公式是<code>(k+n-1)*t</code></li></ul></li></ul><h2 id="流水线吞吐率计算" tabindex="-1">流水线吞吐率计算 <a class="header-anchor" href="#流水线吞吐率计算" aria-hidden="true">#</a></h2><h2 id="流水线加速比" tabindex="-1">流水线加速比 <a class="header-anchor" href="#流水线加速比" aria-hidden="true">#</a></h2><p>完成同样一批任务，不使用流水线所用的时间与使用流水线所用的时间之比称为流水线加速比</p><h2 id="流水线的效率" tabindex="-1">流水线的效率 <a class="header-anchor" href="#流水线的效率" aria-hidden="true">#</a></h2><p>流水线的设备利用率</p><h2 id="层次化的存储结构" tabindex="-1">层次化的存储结构 <a class="header-anchor" href="#层次化的存储结构" aria-hidden="true">#</a></h2><p><img src="'+r+'" alt=""></p><h2 id="cahche" tabindex="-1">cahche <a class="header-anchor" href="#cahche" aria-hidden="true">#</a></h2><ul><li>cahce的功能：提高CPU的传出数据</li><li>子啊计算机的系统体系中，cache是访问速度最快的一层</li><li>使用cache改善系统性能的依据是程序的局部性原理</li></ul><p>如果以h代表队cache的访问命中率，t1表示cache的周期时间，t2表示主存储器周期时间，以读操作为例，使用cache+主存储器的系统平均周期位t3</p><p>t3=h*t1+(1-h)*t2</p><p>1-h被称为失效率</p><h2 id="局部性原理" tabindex="-1">局部性原理 <a class="header-anchor" href="#局部性原理" aria-hidden="true">#</a></h2><ul><li>空间局部性</li><li>时间局部性</li></ul><h2 id="主存分类" tabindex="-1">主存分类 <a class="header-anchor" href="#主存分类" aria-hidden="true">#</a></h2><ul><li>随机存取存储器：断电后存储的信息丢失</li><li>只读存储器：断电后存储的信息不丢失</li></ul><h2 id="磁盘结构和参数" tabindex="-1">磁盘结构和参数 <a class="header-anchor" href="#磁盘结构和参数" aria-hidden="true">#</a></h2><p>存取时间=寻道时间+等待时间（平均定位时间+转动延迟） <img src="'+t+'" alt=""></p><ul><li>第一空 <img src="'+c+'" alt=""></li></ul><ol><li>开始读取R0的数据，消耗3ns的时间，但是这样的话就不能读取到R1的数据，所以圆盘需要绕一周才能读取R1的数据</li><li>因为有11个扇区，所以绕一周的时间加上自己去读取的时间就是33+3</li><li>一共需要自己读取10个扇区数据，因为R0是直接读的，所以只需要计算R1到R10</li><li>也就是(33+3)*10+6=366</li></ol><ul><li>第二空</li></ul><p><img src="'+d+'" alt=""></p><ol><li>这样读取也就是先读取R0的数据，然后经过3ns解析，此时数据正好经过的是R6，也就是不需要转一圈就可以接着读取R1</li><li>所以时间是每个读取解析的时间6ns乘上11个</li></ol><h2 id="总线" tabindex="-1">总线 <a class="header-anchor" href="#总线" aria-hidden="true">#</a></h2><ul><li>内部总线</li><li>系统总线 <ul><li>数据总线</li><li>地址总线</li><li>控制总线</li></ul></li><li>外部总线</li></ul><h2 id="串联系统-并联系统" tabindex="-1">串联系统-并联系统 <a class="header-anchor" href="#串联系统-并联系统" aria-hidden="true">#</a></h2><p><img src="'+n+'" alt=""></p><h2 id="差错控制-crc与海明校验码" tabindex="-1">差错控制-CRC与海明校验码 <a class="header-anchor" href="#差错控制-crc与海明校验码" aria-hidden="true">#</a></h2><p><img src="'+s+'" alt=""></p><p>校验码都是存放在2的n次方位，也就是2^r&gt;=x+r+1</p><p>x就是信息位的个数，r就是检验位</p><p>确定校验码位3位，也就是2^3&gt;=8,只能放在2^0,2^1,2^2这几个地方</p><h2 id="进程状态转换" tabindex="-1">进程状态转换 <a class="header-anchor" href="#进程状态转换" aria-hidden="true">#</a></h2><p><img src="'+o+'" alt=""></p><h2 id="进程的同步和互斥-pv" tabindex="-1">进程的同步和互斥（PV） <a class="header-anchor" href="#进程的同步和互斥-pv" aria-hidden="true">#</a></h2><ul><li>互斥：千军万马过独木桥</li><li>同步：速度有差异，在一定情况停下等待</li></ul><h2 id="pv操作" tabindex="-1">PV操作 <a class="header-anchor" href="#pv操作" aria-hidden="true">#</a></h2><ul><li>临界资源：诸进程间需要互斥方式对其进行共享的资源</li><li>临界区：每个进程中访问临界资源的那段代码称为临界区</li><li>信号量：是一种特殊的变量</li></ul><p><img src="'+p+'" alt=""></p><p>p相当于把一个进程在不符合条件的情况下放入进程队列，而v操作就相当于是否取出进程队列的操作，p就是阻塞，v就是唤醒</p><p><img src="'+u+'" alt=""></p><ol><li>如果把a1，a2，b1，b2去掉的话，可以设想一下，收银员可能会立刻执行收费，但是这样不符合逻辑</li><li>所以在b1，如果没有人付款，就要一直进行p操作，直到a1有人付款，就会执行v操作唤醒b1</li><li>如果有人想要离开，为了确定他是否真的付了款，所以要在a2一直等待b2提示是否付款成功，所以a2就执行p操作，b2就执行v操作</li></ol><h2 id="死锁问题" tabindex="-1">死锁问题 <a class="header-anchor" href="#死锁问题" aria-hidden="true">#</a></h2><p>如果线程中有三个进程A,B,C,这三个进程都需要5个系统资源，那么至少需要几个资源？</p><ul><li>如果只给她分配10个资源，那么334依然导致死锁问题</li><li>如果分配13个，那么每个我们可以给他先分配4个资源，然后最后的资源不管给谁，他都可以完成5个资源的要求，从而释放资源</li><li>所以公式就是<code>线程个数*(每个线程需要的系统资源-1)+1</code></li></ul><h2 id="死锁地避免" tabindex="-1">死锁地避免 <a class="header-anchor" href="#死锁地避免" aria-hidden="true">#</a></h2><ul><li>有序资源分配法：先分给a，后分给b，再分给c，但是这样存在的问题就是效率太低</li><li>银行家算法 <ul><li>当一个线程对资源的最大需求不超过系统中的资源数时可以接纳线程</li><li>线程可以分期请求资源，但请求的总数不能超过最大需求量</li><li>当线程现有的资源不能满足进程尚需资源时，对线程的请求可以延迟分配，但总能使进程在有限的时间得到资源</li></ul></li></ul>',58),b=[g];function f(v,m,k,x,R,C){return i(),e("div",null,b)}const V=l(_,[["render",f]]);export{A as __pageData,V as default};
