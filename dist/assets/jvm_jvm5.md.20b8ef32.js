import{_ as s,o as n,c as a,a as l}from"./app.aadc4c29.js";const e="/assets/内存布局.b7bb94e4.png",p="/assets/句柄访问.eec6087a.png",c="/assets/直接指针.bb2e35f4.png",o="/assets/执行引擎.74a935c5.png",h=JSON.parse('{"title":"jvm","description":"","frontmatter":{},"headers":[{"level":2,"title":"对象的实例化内存布局与访问定位","slug":"对象的实例化内存布局与访问定位","link":"#对象的实例化内存布局与访问定位","children":[{"level":3,"title":"对象的实例化","slug":"对象的实例化","link":"#对象的实例化","children":[]},{"level":3,"title":"对象内存布局","slug":"对象内存布局","link":"#对象内存布局","children":[]},{"level":3,"title":"对象的访问定位","slug":"对象的访问定位","link":"#对象的访问定位","children":[]}]},{"level":2,"title":"执行引擎","slug":"执行引擎","link":"#执行引擎","children":[{"level":3,"title":"执行引擎概述","slug":"执行引擎概述","link":"#执行引擎概述","children":[]}]}],"relativePath":"jvm/jvm5.md","lastUpdated":null}'),i={name:"jvm/jvm5.md"},r=l(`<h1 id="jvm" tabindex="-1">jvm <a class="header-anchor" href="#jvm" aria-hidden="true">#</a></h1><p>作者: fbk 时间：2023-2-3 地点：济南</p><h2 id="对象的实例化内存布局与访问定位" tabindex="-1">对象的实例化内存布局与访问定位 <a class="header-anchor" href="#对象的实例化内存布局与访问定位" aria-hidden="true">#</a></h2><h3 id="对象的实例化" tabindex="-1">对象的实例化 <a class="header-anchor" href="#对象的实例化" aria-hidden="true">#</a></h3><h4 id="对象创建的方式" tabindex="-1">对象创建的方式 <a class="header-anchor" href="#对象创建的方式" aria-hidden="true">#</a></h4><ol><li>new最常见的创建，单例对象使用getInstance(),XXXFactory的静态方法</li><li>Class的newInstance方法：在JDK9里面被标记为过时的方法，因为只能调用空参构造器，并且权限必须为 public</li><li>Constructor的newInstance(Xxxx)：反射的方式，可以调用空参的，或者带参的构造器</li><li>调用clone：不需要任何构造器，要求当前的类需要实现cloneable接口中的clone方法</li><li>使用序列化：从文件中，从网络中获取一个对象的二进制流，序列化一般用于Socket的网络传输</li><li>第三方库 Objenesis</li></ol><h4 id="对象创建的步骤" tabindex="-1">对象创建的步骤 <a class="header-anchor" href="#对象创建的步骤" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ObjectTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"> public static void main(java.lang.String[]);</span></span>
<span class="line"><span style="color:#A6ACCD;">    descriptor: ([Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#A6ACCD;">    flags: ACC_PUBLIC, ACC_STATIC</span></span>
<span class="line"><span style="color:#A6ACCD;">    Code:</span></span>
<span class="line"><span style="color:#A6ACCD;">      stack=2, locals=2, args_size=1</span></span>
<span class="line"><span style="color:#A6ACCD;">         0: new           #2                  // class java/lang/Object</span></span>
<span class="line"><span style="color:#A6ACCD;">         3: dup           </span></span>
<span class="line"><span style="color:#A6ACCD;">         4: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">         7: astore_1</span></span>
<span class="line"><span style="color:#A6ACCD;">         8: return</span></span>
<span class="line"><span style="color:#A6ACCD;">      LineNumberTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 9: 0</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 10: 8</span></span>
<span class="line"><span style="color:#A6ACCD;">      LocalVariableTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        Start  Length  Slot  Name   Signature</span></span>
<span class="line"><span style="color:#A6ACCD;">            0       9     0  args   [Ljava/lang/String;</span></span>
<span class="line"><span style="color:#A6ACCD;">            8       1     1   obj   Ljava/lang/Object;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><code>1.判断对象对应的类是否加载，链接，初始化</code></p><ul><li>虚拟机遇到new指令，首先检查这个指令的参数是否能在Metaspace的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化（类元信息是否存在）</li><li>如果类没有加载，那么在双亲委派的机制下，使用当前类加载器以ClassLoader + 包名 + 类名为key进行查找对应的.class文件，如果没有找到文件，则抛出ClassNotFoundException异常，如果找到，则进行类加载，并生成对应的Class对象。</li></ul><p><code>2.为对象分配内存</code></p><ul><li>首先计算对象占用的空间，接着在堆中划分一块内存给新对象，如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节大小</li><li>如果内存规整：采用指针碰撞分配内存 <ul><li>如果内存是规整的，那么虚拟机将采用的是指针碰撞法（Bump The Point）来为对象分配内存。</li><li>意思是所有用过的内存在一边，空闲的内存放另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针往空闲内存那边挪动一段与对象大小相等的距离罢了。</li></ul></li></ul><p><code>3.处理并发问题</code></p><ul><li>采用CAS+失败重试保证更新的原子性</li><li>每个线程预先分配TLAB - 通过设置 -XX:+UseTLAB参数来设置（区域加锁机制）</li><li>在Eden区给每个线程分配一块区域</li></ul><p><code>4.初始化分配的空间</code></p><ul><li>所有属性设置默认值，保证对象实例字段在不赋值可以直接使用</li><li>给对象属性赋值的顺序：</li><li>属性的默认值初始化</li><li>显示初始化/代码块初始化（并列关系，谁先谁后看代码编写的顺序）</li><li>构造器初始化</li></ul><p><code>5.设置对象的对象头</code></p><p>将对象的所属类（即类的元数据信息）、对象的HashCode和对象的GC信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置方式取决于JVM实现。</p><p><code>6.执行init方法进行初始化</code></p><ol><li>在Java程序的视角看来，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量</li><li>因此一般来说（由字节码中跟随invokespecial指令所决定），new指令之后会接着就是执行init方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完成创建出来。</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 测试对象实例化的过程</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  ① 加载类元信息 - ② 为对象分配内存 - ③ 处理并发问题  - ④ 属性的默认初始化（零值初始化）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  - ⑤ 设置对象头的信息 - ⑥ 属性的显式初始化、代码块中初始化、构造器中初始化</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  给对象的属性赋值的操作：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  ① 属性的默认初始化 - ② 显式初始化 / ③ 代码块中初始化 - ④ 构造器中初始化</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Customer</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1001</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Account</span><span style="color:#A6ACCD;"> acct</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">匿名客户</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Customer</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        acct </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Account</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Account</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><code>Customer字节码</code></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"> 0 aload_0</span></span>
<span class="line"><span style="color:#A6ACCD;"> 1 invokespecial #1 &lt;java/lang/Object.&lt;init&gt;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> 4 aload_0</span></span>
<span class="line"><span style="color:#A6ACCD;"> 5 sipush 1001</span></span>
<span class="line"><span style="color:#A6ACCD;"> 8 putfield #2 &lt;com/atguigu/java/Customer.id&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">11 aload_0</span></span>
<span class="line"><span style="color:#A6ACCD;">12 ldc #3 &lt;匿名客户&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">14 putfield #4 &lt;com/atguigu/java/Customer.name&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">17 aload_0</span></span>
<span class="line"><span style="color:#A6ACCD;">18 new #5 &lt;com/atguigu/java/Account&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">21 dup</span></span>
<span class="line"><span style="color:#A6ACCD;">22 invokespecial #6 &lt;com/atguigu/java/Account.&lt;init&gt;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">25 putfield #7 &lt;com/atguigu/java/Customer.acct&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">28 return</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>init() 方法的字节码指令： <ul><li>属性的默认值初始化：id = 1001;</li><li>显示初始化/代码块初始化：name = &quot;匿名客户&quot;;</li><li>构造器初始化：acct = new Account();</li></ul></li></ul><h3 id="对象内存布局" tabindex="-1">对象内存布局 <a class="header-anchor" href="#对象内存布局" aria-hidden="true">#</a></h3><p><img src="`+e+'" alt=""></p><h3 id="对象的访问定位" tabindex="-1">对象的访问定位 <a class="header-anchor" href="#对象的访问定位" aria-hidden="true">#</a></h3><p><code>JVM是如何通过栈帧中的对象引用访问到其内部的对象实例</code></p><p>栈帧的reference引用堆区对象实例，堆区对象实例引入方法区的instanceKlass</p><p><code>对象的两种访问方式：句柄访问和直接指针</code></p><ul><li>句柄访问 <ul><li>缺点：在栈空间中开辟一块空间作为句柄池，句柄池本身也会占用空间，通过两次访问才能找到堆中的对象，效率低</li><li>优点：reference中储存稳定句柄地址，对象被移动（垃圾收集时移动对象很普遍）时只会改变句柄中实例数据指针即可，reference本身不需要被修改 <img src="'+p+'" alt=""></li></ul></li><li>直接指针（HotSpot使用） <ul><li>优点：直接指针是局部变量表中的引用，直接指向堆中的实例，在对象实例中有类型指针，指向的是方法区中的对象类型数据</li><li>缺点：对象被移动（垃圾收集时移动对象很普遍）时需要修改 reference 的值 <img src="'+c+'" alt=""></li></ul></li></ul><h2 id="执行引擎" tabindex="-1">执行引擎 <a class="header-anchor" href="#执行引擎" aria-hidden="true">#</a></h2><h3 id="执行引擎概述" tabindex="-1">执行引擎概述 <a class="header-anchor" href="#执行引擎概述" aria-hidden="true">#</a></h3><p><img src="'+o+'" alt=""></p><ol><li>执行引擎是java虚拟机核心的组成部分</li><li><code>虚拟机</code>是一个相对于<code>物理机</code>的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而<code>虚拟机的执行引擎则是由软件自行实现的</code>，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，<code>能够执行那些不被硬件直接支持的指令集格式。</code></li><li>JVM的主要任务是负责<code>装载字节码到其内部</code>，但字节码不能够直接运行在操作系统上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM所识别的字节码指令、符号表，以及其他辅助信息。</li><li>那么，如果想要让一个Java程序运行起来，执行引擎（Execution Engine）的任务就是<code>将字节码指令解释/编译为对应平台上的本地机器指令才可以。</code>简单来说，JVM中的执行引擎充当了将高级语言翻译为机器语言的译者。</li></ol><h4 id="执行引擎工作过程" tabindex="-1">执行引擎工作过程 <a class="header-anchor" href="#执行引擎工作过程" aria-hidden="true">#</a></h4><ol><li>执行引擎在执行过程中需要执行什么样的字节码指令完全依赖于<code>PC寄存器（程序计数器）</code></li><li>每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址。</li><li>当然方法在执行的过程中，</li></ol>',38),t=[r];function C(b,u,A,d,y,D){return n(),a("div",null,t)}const F=s(i,[["render",C]]);export{h as __pageData,F as default};
