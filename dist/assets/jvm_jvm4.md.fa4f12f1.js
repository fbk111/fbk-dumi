import{_ as s,o as n,c as a,a as l}from"./app.1adc42ab.js";const p="/assets/方法区.d748d5f0.png",e="/assets/方法区实例.4eb20904.png",o="/assets/类加载.7e227412.png",r="/assets/元空间和永久代.1b79e878.png",c="/assets/方法区加载.fb29196b.png",t="/assets/1.a08e4472.png",i="/assets/2.4213e932.png",C="/assets/3.7260ff68.png",y="/assets/4.b9a48766.png",A="/assets/5.f4605cae.png",D="/assets/6.e487c78e.png",F="/assets/7.fb65452b.png",b="/assets/8.95c99c0b.png",u="/assets/9.f7469e2f.png",d="/assets/10.df5b89fa.png",m="/assets/11.fbed9ef2.png",h="/assets/12.bbaf87d5.png",g="/assets/13.17bc13cb.png",v="/assets/14.6df6984c.png",f="/assets/15.6b2c6231.png",E="/assets/16.34ede2f3.png",j="/assets/jdk1.6.ff19a4f0.png",S="/assets/jdk7.635052b5.png",_="/assets/jdk8.410fc191.png",V=JSON.parse('{"title":"jvm-方法区","description":"","frontmatter":{},"headers":[{"level":2,"title":"方法区","slug":"方法区","link":"#方法区","children":[{"level":3,"title":"栈-堆-方法区","slug":"栈-堆-方法区","link":"#栈-堆-方法区","children":[]}]},{"level":2,"title":"方法区理解","slug":"方法区理解","link":"#方法区理解","children":[{"level":3,"title":"方法区在哪","slug":"方法区在哪","link":"#方法区在哪","children":[]},{"level":3,"title":"方法区基本理解","slug":"方法区基本理解","link":"#方法区基本理解","children":[]},{"level":3,"title":"HotSpot方法区演进","slug":"hotspot方法区演进","link":"#hotspot方法区演进","children":[]}]},{"level":2,"title":"设置方法区的大小和OOM","slug":"设置方法区的大小和oom","link":"#设置方法区的大小和oom","children":[{"level":3,"title":"JDK8","slug":"jdk8","link":"#jdk8","children":[]},{"level":3,"title":"方法区OOM","slug":"方法区oom","link":"#方法区oom","children":[]},{"level":3,"title":"如何解决OOM","slug":"如何解决oom","link":"#如何解决oom","children":[]}]},{"level":2,"title":"方法区的内部结构","slug":"方法区的内部结构","link":"#方法区的内部结构","children":[{"level":3,"title":"方法区的储存","slug":"方法区的储存","link":"#方法区的储存","children":[]},{"level":3,"title":"non-final类型的类变量","slug":"non-final类型的类变量","link":"#non-final类型的类变量","children":[]},{"level":3,"title":"全局常量static-final","slug":"全局常量static-final","link":"#全局常量static-final","children":[]},{"level":3,"title":"运行时常量池","slug":"运行时常量池","link":"#运行时常量池","children":[]},{"level":3,"title":"常量池","slug":"常量池","link":"#常量池","children":[]},{"level":3,"title":"运行时常量池","slug":"运行时常量池-1","link":"#运行时常量池-1","children":[]}]},{"level":2,"title":"方法区使用","slug":"方法区使用","link":"#方法区使用","children":[{"level":3,"title":"字节码执行流程","slug":"字节码执行流程","link":"#字节码执行流程","children":[]}]},{"level":2,"title":"方法区演进","slug":"方法区演进","link":"#方法区演进","children":[{"level":3,"title":"永久代演进过程","slug":"永久代演进过程","link":"#永久代演进过程","children":[]},{"level":3,"title":"为什么永久代会被元空间替代","slug":"为什么永久代会被元空间替代","link":"#为什么永久代会被元空间替代","children":[]},{"level":3,"title":"字符串常量池","slug":"字符串常量池","link":"#字符串常量池","children":[]}]},{"level":2,"title":"方法区垃圾回收","slug":"方法区垃圾回收","link":"#方法区垃圾回收","children":[]},{"level":2,"title":"直接内存","slug":"直接内存","link":"#直接内存","children":[]}],"relativePath":"jvm/jvm4.md","lastUpdated":1675436020000}'),k={name:"jvm/jvm4.md"},M=l('<h1 id="jvm-方法区" tabindex="-1">jvm-方法区 <a class="header-anchor" href="#jvm-方法区" aria-hidden="true">#</a></h1><p>作者: fbk 时间：2023-2-1 地点：济南</p><h2 id="方法区" tabindex="-1">方法区 <a class="header-anchor" href="#方法区" aria-hidden="true">#</a></h2><h3 id="栈-堆-方法区" tabindex="-1">栈-堆-方法区 <a class="header-anchor" href="#栈-堆-方法区" aria-hidden="true">#</a></h3><p><code>ThreadLocal</code>:如何保证多个线程在并发环境的安全性 <img src="'+p+`" alt=""></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">Person</span><span style="color:#A6ACCD;"> person</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+e+`" alt=""></p><ol><li>Person类.class存在在方法区</li><li>person变量存在java栈的局部变量表中</li><li>真正的person对象存放在java堆中</li><li>在person对象中，有个指针指向方法区的person类型数据，表明这个person对象是用方法区的Person类new出来的</li></ol><h2 id="方法区理解" tabindex="-1">方法区理解 <a class="header-anchor" href="#方法区理解" aria-hidden="true">#</a></h2><h3 id="方法区在哪" tabindex="-1">方法区在哪 <a class="header-anchor" href="#方法区在哪" aria-hidden="true">#</a></h3><ol><li>《Java虚拟机规范》中明确说明：尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择去进行垃圾收集或者进行压缩。但对于HotSpotJVM而言，方法区还有一个别名叫做Non-Heap（非堆），目的就是要和堆分开。</li><li>方法区可以看作是独立存在于java堆的内存空间</li></ol><h3 id="方法区基本理解" tabindex="-1">方法区基本理解 <a class="header-anchor" href="#方法区基本理解" aria-hidden="true">#</a></h3><p><code>方法区主要是存放Class，而堆中主要存放实例对象</code></p><ol><li>方法区是多线程共享的对象，是各个线程存在的共享区域，多个线程同时加载一个类的时候，只有一个线程能加载该类，其他的线程只能等待，等类加载完毕，其他线程可以直接使用该类，<code>类的加载只能一次</code></li><li>方法区在JVM启动的时候被创建，并且他的实际物理内存空间中和java堆区一样是不连续的</li><li>方法区的大小，跟堆空间一样，可以选择固定的大小，或者拓展</li><li>方法区的大小决定了系统可以保存多少类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误：<code>java.lang.OutofMemoryError:PermGen space</code>或者<code>java.lang.OutOfMemoryError:Metaspace</code></li></ol><ul><li>加载大量的jar包</li><li>Tomcat部署的工程过多</li><li>大量的动态的生成反射类</li></ul><ol start="5"><li>关闭JVM就会释放这个内存的区域</li></ol><div class="language-JAVA line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MethodAreaDemo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">start...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1000000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">InterruptedException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">end...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>加载了1600多类</code><img src="`+o+'" alt=""></p><h3 id="hotspot方法区演进" tabindex="-1">HotSpot方法区演进 <a class="header-anchor" href="#hotspot方法区演进" aria-hidden="true">#</a></h3><ol><li>在JDK7中，习惯把方法区称为永久代，在JDK8中，使用元空间代替永久代，可以把方法区比作java接口，永久代或者元空间比作java中具体的实现类</li><li>本质上，方法区和永久代不等价，但是在HotSpot可以看作是等价的</li><li>而到了JDK8，终于完全废弃了永久代的概念，改用与JRockit、J9一样在本地内存中实现的元空间（Metaspace）来代替</li><li>元空间和永久代类似，都是JVM方法区的实现，元空间和永久代的最大区别是元空间直接使用物理内存，而永久代使用的是虚拟机中的内存 <img src="'+r+`" alt=""></li></ol><h2 id="设置方法区的大小和oom" tabindex="-1">设置方法区的大小和OOM <a class="header-anchor" href="#设置方法区的大小和oom" aria-hidden="true">#</a></h2><blockquote><p>方法区的大小是可以改变的</p></blockquote><h3 id="jdk8" tabindex="-1">JDK8 <a class="header-anchor" href="#jdk8" aria-hidden="true">#</a></h3><ol><li>元空间的数据大小可以用<code>-XX:MetaspaceSize 和 -XX:MaxMetaspaceSize </code>设定</li><li>默认值依赖于平台，Windows下，-XX:MetaspaceSize 约为21M，-XX:MaxMetaspaceSize的值是-1，即没有限制。</li><li>与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生溢出，虚拟机一样会抛出异常OutOfMemoryError:Metaspace</li><li>-XX:MetaspaceSize：设置初始的元空间大小。对于一个 64位 的服务器端 JVM 来说，其默认的 -XX:MetaspaceSize值为21MB。这就是初始的高水位线，一旦触及这个水位线，Full GC将会被触发并卸载没用的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于GC后释放了多少元空间。如果释放的空间不足，那么在不超过MaxMetaspaceSize时，适当提高该值。如果释放空间过多，则适当降低该值。</li><li>如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到Full GC多次调用。为了避免频繁地GC，建议将-XX:MetaspaceSize设置为一个相对较高的值。</li></ol><h3 id="方法区oom" tabindex="-1">方法区OOM <a class="header-anchor" href="#方法区oom" aria-hidden="true">#</a></h3><p>代码：OOMTest类继承ClassLoader类，获取defineClass（）方法，可以进行类加载</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">OOMTest</span><span style="color:#A6ACCD;"> oomTest </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OOMTest</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//创建classWriter对象，用于生成二进制字节码</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">ClassWriter</span><span style="color:#A6ACCD;"> classWriter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ClassWriter</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//指明版本号，修饰符，类名，包名，父类，接口</span></span>
<span class="line"><span style="color:#A6ACCD;">                classWriter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">visit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Opcodes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">V1_8</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Opcodes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ACC_PUBLIC</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Class</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">java/lang/Object</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null);</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//返回byte[]</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> code </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> classWriter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toByteArray</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//类的加载</span></span>
<span class="line"><span style="color:#A6ACCD;">                oomTest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineClass</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Class</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> code</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> code</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">//Class对象</span></span>
<span class="line"><span style="color:#A6ACCD;">                j</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>如果不设置元空间上限</p><p><code>输出结果</code></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">10000</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>设置元空间的上限</p><p><code>-XX:MetaspaceSize=10m -XX:MaxMetaspaceSize=10m</code></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">8531</span></span>
<span class="line"><span style="color:#A6ACCD;">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Metaspace</span></span>
<span class="line"><span style="color:#A6ACCD;">	at java.lang.ClassLoader.defineClass1(Native Method)</span></span>
<span class="line"><span style="color:#A6ACCD;">	at java.lang.ClassLoader.defineClass(ClassLoader.java:763)</span></span>
<span class="line"><span style="color:#A6ACCD;">	at java.lang.ClassLoader.defineClass(ClassLoader.java:642)</span></span>
<span class="line"><span style="color:#A6ACCD;">	at com.atguigu.java.OOMTest.main(OOMTest.java:29)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="如何解决oom" tabindex="-1">如何解决OOM <a class="header-anchor" href="#如何解决oom" aria-hidden="true">#</a></h3><ol><li>要解决OOM异常或heap space的异常，一般的手段是首先通过内存映像分析工具（如Ec1ipse Memory Analyzer）对dump出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢出（Memory Overflow）</li><li>内存泄漏就是有大量的引用指向某些对象，但是这些对象以后不会使用了，但是因为它们还和GC ROOT有关联，所以导致以后这些对象也不会被回收，这就是内存泄漏的问题</li><li>如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots的引用链。于是就能找到泄漏对象是通过怎样的路径与GC Roots相关联并导致垃圾收集器无法自动回收它们的。掌握了泄漏对象的类型信息，以及GC Roots引用链的信息，就可以比较准确地定位出泄漏代码的位置。</li><li>如果不存在内存泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数（-Xmx与-Xms），与机器物理内存对比看是否还可以调大，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</li></ol><h2 id="方法区的内部结构" tabindex="-1">方法区的内部结构 <a class="header-anchor" href="#方法区的内部结构" aria-hidden="true">#</a></h2><h3 id="方法区的储存" tabindex="-1">方法区的储存 <a class="header-anchor" href="#方法区的储存" aria-hidden="true">#</a></h3><h4 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-hidden="true">#</a></h4><p>《深入理解Java虚拟机》书中对方法区（Method Area）存储内容描述如下：它用于存储已<code>被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等</code>。 <img src="`+c+`" alt=""><code>类型信息</code></p><p>不管是class，interface，enum，annotation，JVM必须在方法区储存一下信息</p><ol><li>这个类型的完整有效名是（全名=包名.类名）</li><li>这个类型直接父类的完整有效名（对于interface或是java.lang.Object，都没有父类）</li><li>这个类型的修饰符（final，public，abstract）</li><li>这个类型直接接口的有序列表</li></ol><p><code>域</code></p><blockquote><p>常说的成员变量</p></blockquote><ol><li>JVM必须在方法区中保存类型所有域的相关信息以及域的声明顺序</li><li>域的相关信息：域名称，域类型，域修饰符（public，private，protected，static，final，volatile，transient的某个子集）</li></ol><p><code>方法信息</code></p><ol><li>方法名称</li><li>方法的返回类型（包括void类型），void在class中对应的void.class</li><li>方法参数的数量和类型</li><li>方法的修饰符（public，private，protected，static，final，synchronized，native，abstract的一个子集）</li><li>方法的字节码（bytecodes），操作数栈，局部变量表及大小（abstract和native方法除外）</li><li>异常表（abstract和native方法除外），异常表记录每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MethodInnerStructTest</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Comparable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Serializable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">测试方法的内部结构</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test1</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">count = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test2</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cal</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> cal</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Exception</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">compareTo</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">o</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><code>javap -v -p MethodInnerStrucTest.class &gt; test.txt</code></p><p><code>类型信息</code></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">//类型信息      </span></span>
<span class="line"><span style="color:#A6ACCD;">public class com.atguigu.java.MethodInnerStrucTest extends java.lang.Object implements java.lang.Comparable&lt;java.lang.String&gt;, java.io.Serializable</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>域信息</code></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">//域信息</span></span>
<span class="line"><span style="color:#A6ACCD;">  public int num;</span></span>
<span class="line"><span style="color:#A6ACCD;">    descriptor: I</span></span>
<span class="line"><span style="color:#A6ACCD;">    flags: ACC_PUBLIC</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  private static java.lang.String str;</span></span>
<span class="line"><span style="color:#A6ACCD;">    descriptor: Ljava/lang/String;</span></span>
<span class="line"><span style="color:#A6ACCD;">    flags: ACC_PRIVATE, ACC_STATIC</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>方法信息</code></p><ol><li>descriptor: ()V 表示方法返回值类型为 void</li><li>flags: ACC_PUBLIC 表示方法权限修饰符为 public</li><li>stack=3 表示操作数栈深度为 3</li><li>locals=2 表示局部变量个数为 2 个（实力方法包含 this）</li><li>test1() 方法虽然没有参数，但是其 args_size=1 ，这时因为将 this 作为了参数</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test1</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    descriptor</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">V</span></span>
<span class="line"><span style="color:#A6ACCD;">    flags</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ACC_PUBLIC</span></span>
<span class="line"><span style="color:#A6ACCD;">    Code</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      stack</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> locals</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args_size</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> bipush        </span><span style="color:#F78C6C;">20</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> istore_1</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> getstatic     #</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;">           #4                  </span><span style="color:#676E95;font-style:italic;">// class java/lang/StringBuilder</span></span>
<span class="line"><span style="color:#A6ACCD;">         9</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> dup</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> invokespecial #</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">13</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> ldc           #</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// String count =</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">15</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> invokevirtual #</span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iload_1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">19</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> invokevirtual #</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">22</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> invokevirtual #</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">25</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> invokevirtual #</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;font-style:italic;">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">28</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#A6ACCD;">      LineNumberTable</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        line </span><span style="color:#F78C6C;">17</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        line </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#A6ACCD;">        line </span><span style="color:#F78C6C;">19</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">28</span></span>
<span class="line"><span style="color:#A6ACCD;">      LocalVariableTable</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Start</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">Length</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">Slot</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">Name</span><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">Signature</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">      </span><span style="color:#F78C6C;">29</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;">   Lcom</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">atguigu</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">java</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">MethodInnerStrucTest</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">      </span><span style="color:#F78C6C;">26</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> count   </span><span style="color:#C792EA;">I</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="non-final类型的类变量" tabindex="-1">non-final类型的类变量 <a class="header-anchor" href="#non-final类型的类变量" aria-hidden="true">#</a></h3><ol><li>静态变量和类关联在一起，随着类加载</li><li>类变量和类实例共享，即使没有类实例，不创建实例就可以访问</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Demo2</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Order</span><span style="color:#A6ACCD;"> order</span><span style="color:#89DDFF;">=null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">order</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        order</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hello</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Order</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> number</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hello</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">hello!</span></span>
<span class="line"><span style="color:#A6ACCD;">1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="全局常量static-final" tabindex="-1">全局常量static-final <a class="header-anchor" href="#全局常量static-final" aria-hidden="true">#</a></h3><ol><li>全局常量是<code>static final</code>修饰的</li><li>全局常量在编译阶段就分配了内存</li><li>全局变量是在链接（准备阶段）分配内存的</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Order</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> number </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Order</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> number </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="运行时常量池" tabindex="-1">运行时常量池 <a class="header-anchor" href="#运行时常量池" aria-hidden="true">#</a></h3><ol><li>方法区，内部包含了运行时常量池</li><li>字节码文件，内部包含了常量池。（之前的字节码文件中已经看到了很多Constant pool的东西，这个就是常量池）</li><li>要弄清楚方法区，需要理解清楚ClassFile，因为加载类的信息都在方法区。</li><li>要弄清楚方法区的运行时常量池，需要理解清楚ClassFile中的常量池。</li></ol><h3 id="常量池" tabindex="-1">常量池 <a class="header-anchor" href="#常量池" aria-hidden="true">#</a></h3><ol><li>一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述符信息外。还包含一项信息就是常量池表（Constant Pool Table），包括各种字面量和对类型、域和方法的符号引用。</li><li>字面量： 10 ， “我是某某”这种数字和字符串都是字面量 <code>为什么需要常量池</code></li><li>一个java源文件中的类、接口，编译后产生一个字节码文件。而Java中的字节码需要数据支持，通常这种数据会很大以至于不能直接储存到字节码中，但是可以储存到常量池，这个字节码包含了指向常量池引用，在动态链接的时候会用到运行时常量池</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SimpleClass</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sayHello</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol><li>虽然上述代码只有194字节，但是里面却使用了String、System、PrintStream及Object等结构。</li><li>比如说我们这个文件中有6个地方用到了”hello”这个字符串，如果不用常量池，就需要在6个地方全写一遍，造成臃肿。我们可以将”hello”等所需用到的结构信息记录在常量池中，并通过引用的方式，来加载、调用所需的结构</li><li>这里的代码量其实很少了，如果代码多的话，引用的结构将会更多，这里就需要用到常量池了。</li></ol><p><code>常量池存储的数据</code></p><ol><li>数量值</li><li>字符串值</li><li>类引用</li><li>字段引用</li><li>方法引用 <code>常量池引用</code> 常量池可以看作是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型。</li></ol><h3 id="运行时常量池-1" tabindex="-1">运行时常量池 <a class="header-anchor" href="#运行时常量池-1" aria-hidden="true">#</a></h3><ol><li>运行时常量池是方法区的一部分</li><li>常量池表是class字节码文件的一部分，用于存放编译器生成的各种字面量与符号引用，<code>这部分内容将类加载后存放到方法区的运行时常量池</code></li><li>运行时常量池，在加载类和接口到虚拟机后，就会创建运行时常量池</li><li>JVM为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的。</li><li>运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。此时不再是常量池中的符号地址了，这里换为真实地址。</li><li>运行时常量池，相对于Class文件常量池的另一重要特征是：具备动态性。</li><li>运行时常量池类似于传统编程语言中的符号表（symbol table），但是它所包含的数据却比符号表要更加丰富一些。</li><li>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则JVM会抛OutofMemoryError异常。</li></ol><h2 id="方法区使用" tabindex="-1">方法区使用 <a class="header-anchor" href="#方法区使用" aria-hidden="true">#</a></h2><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MethodAreaDemo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">500</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">public class com.atguigu.java1.MethodAreaDemo</span></span>
<span class="line"><span style="color:#A6ACCD;">  minor version: 0</span></span>
<span class="line"><span style="color:#A6ACCD;">  major version: 51</span></span>
<span class="line"><span style="color:#A6ACCD;">  flags: ACC_PUBLIC, ACC_SUPER</span></span>
<span class="line"><span style="color:#A6ACCD;">Constant pool:</span></span>
<span class="line"><span style="color:#A6ACCD;">   #1 = Methodref          #5.#24         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">   #2 = Fieldref           #25.#26        // java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#A6ACCD;">   #3 = Methodref          #27.#28        // java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#A6ACCD;">   #4 = Class              #29            // com/atguigu/java1/MethodAreaDemo</span></span>
<span class="line"><span style="color:#A6ACCD;">   #5 = Class              #30            // java/lang/Object</span></span>
<span class="line"><span style="color:#A6ACCD;">   #6 = Utf8               &lt;init&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   #7 = Utf8               ()V</span></span>
<span class="line"><span style="color:#A6ACCD;">   #8 = Utf8               Code</span></span>
<span class="line"><span style="color:#A6ACCD;">   #9 = Utf8               LineNumberTable</span></span>
<span class="line"><span style="color:#A6ACCD;">  #10 = Utf8               LocalVariableTable</span></span>
<span class="line"><span style="color:#A6ACCD;">  #11 = Utf8               this</span></span>
<span class="line"><span style="color:#A6ACCD;">  #12 = Utf8               Lcom/atguigu/java1/MethodAreaDemo;</span></span>
<span class="line"><span style="color:#A6ACCD;">  #13 = Utf8               main</span></span>
<span class="line"><span style="color:#A6ACCD;">  #14 = Utf8               ([Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#A6ACCD;">  #15 = Utf8               args</span></span>
<span class="line"><span style="color:#A6ACCD;">  #16 = Utf8               [Ljava/lang/String;</span></span>
<span class="line"><span style="color:#A6ACCD;">  #17 = Utf8               x</span></span>
<span class="line"><span style="color:#A6ACCD;">  #18 = Utf8               I</span></span>
<span class="line"><span style="color:#A6ACCD;">  #19 = Utf8               y</span></span>
<span class="line"><span style="color:#A6ACCD;">  #20 = Utf8               a</span></span>
<span class="line"><span style="color:#A6ACCD;">  #21 = Utf8               b</span></span>
<span class="line"><span style="color:#A6ACCD;">  #22 = Utf8               SourceFile</span></span>
<span class="line"><span style="color:#A6ACCD;">  #23 = Utf8               MethodAreaDemo.java</span></span>
<span class="line"><span style="color:#A6ACCD;">  #24 = NameAndType        #6:#7          // &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">  #25 = Class              #31            // java/lang/System</span></span>
<span class="line"><span style="color:#A6ACCD;">  #26 = NameAndType        #32:#33        // out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#A6ACCD;">  #27 = Class              #34            // java/io/PrintStream</span></span>
<span class="line"><span style="color:#A6ACCD;">  #28 = NameAndType        #35:#36        // println:(I)V</span></span>
<span class="line"><span style="color:#A6ACCD;">  #29 = Utf8               com/atguigu/java1/MethodAreaDemo</span></span>
<span class="line"><span style="color:#A6ACCD;">  #30 = Utf8               java/lang/Object</span></span>
<span class="line"><span style="color:#A6ACCD;">  #31 = Utf8               java/lang/System</span></span>
<span class="line"><span style="color:#A6ACCD;">  #32 = Utf8               out</span></span>
<span class="line"><span style="color:#A6ACCD;">  #33 = Utf8               Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#A6ACCD;">  #34 = Utf8               java/io/PrintStream</span></span>
<span class="line"><span style="color:#A6ACCD;">  #35 = Utf8               println</span></span>
<span class="line"><span style="color:#A6ACCD;">  #36 = Utf8               (I)V</span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  public com.atguigu.java1.MethodAreaDemo();</span></span>
<span class="line"><span style="color:#A6ACCD;">    descriptor: ()V</span></span>
<span class="line"><span style="color:#A6ACCD;">    flags: ACC_PUBLIC</span></span>
<span class="line"><span style="color:#A6ACCD;">    Code:</span></span>
<span class="line"><span style="color:#A6ACCD;">      stack=1, locals=1, args_size=1</span></span>
<span class="line"><span style="color:#A6ACCD;">         0: aload_0</span></span>
<span class="line"><span style="color:#A6ACCD;">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">         4: return</span></span>
<span class="line"><span style="color:#A6ACCD;">      LineNumberTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 7: 0</span></span>
<span class="line"><span style="color:#A6ACCD;">      LocalVariableTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        Start  Length  Slot  Name   Signature</span></span>
<span class="line"><span style="color:#A6ACCD;">            0       5     0  this   Lcom/atguigu/java1/MethodAreaDemo;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  public static void main(java.lang.String[]);</span></span>
<span class="line"><span style="color:#A6ACCD;">    descriptor: ([Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#A6ACCD;">    flags: ACC_PUBLIC, ACC_STATIC</span></span>
<span class="line"><span style="color:#A6ACCD;">    Code:</span></span>
<span class="line"><span style="color:#A6ACCD;">      stack=3, locals=5, args_size=1</span></span>
<span class="line"><span style="color:#A6ACCD;">         0: sipush        500</span></span>
<span class="line"><span style="color:#A6ACCD;">         3: istore_1</span></span>
<span class="line"><span style="color:#A6ACCD;">         4: bipush        100</span></span>
<span class="line"><span style="color:#A6ACCD;">         6: istore_2</span></span>
<span class="line"><span style="color:#A6ACCD;">         7: iload_1</span></span>
<span class="line"><span style="color:#A6ACCD;">         8: iload_2</span></span>
<span class="line"><span style="color:#A6ACCD;">         9: idiv</span></span>
<span class="line"><span style="color:#A6ACCD;">        10: istore_3</span></span>
<span class="line"><span style="color:#A6ACCD;">        11: bipush        50</span></span>
<span class="line"><span style="color:#A6ACCD;">        13: istore        4</span></span>
<span class="line"><span style="color:#A6ACCD;">        15: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#A6ACCD;">        18: iload_3</span></span>
<span class="line"><span style="color:#A6ACCD;">        19: iload         4</span></span>
<span class="line"><span style="color:#A6ACCD;">        21: iadd</span></span>
<span class="line"><span style="color:#A6ACCD;">        22: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#A6ACCD;">        25: return</span></span>
<span class="line"><span style="color:#A6ACCD;">      LineNumberTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 9: 0</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 10: 4</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 11: 7</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 12: 11</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 13: 15</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 14: 25</span></span>
<span class="line"><span style="color:#A6ACCD;">      LocalVariableTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        Start  Length  Slot  Name   Signature</span></span>
<span class="line"><span style="color:#A6ACCD;">            0      26     0  args   [Ljava/lang/String;</span></span>
<span class="line"><span style="color:#A6ACCD;">            4      22     1     x   I</span></span>
<span class="line"><span style="color:#A6ACCD;">            7      19     2     y   I</span></span>
<span class="line"><span style="color:#A6ACCD;">           11      15     3     a   I</span></span>
<span class="line"><span style="color:#A6ACCD;">           15      11     4     b   I</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">SourceFile: &quot;MethodAreaDemo.java&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br></div></div><h3 id="字节码执行流程" tabindex="-1">字节码执行流程 <a class="header-anchor" href="#字节码执行流程" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MethodAreaDead</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">500</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol><li>初始阶段</li></ol><p>方法区加载字节码文件，将字节码指令在虚拟机栈帧的操作数栈执行指令 <img src="`+t+'" alt=""> 2. 将500压入操作数栈 <img src="'+i+'" alt=""> 3. 执行字节码指令3，将500存入操作数栈顶，然后执行，500存入局部变量表中 <img src="'+C+'" alt=""> 4. 继续执行 <img src="'+y+'" alt=""> 5. 将2存入局部变量表中 <img src="'+A+'" alt=""> 6. 执行相除的方法，读取本地变量表中的1和2，压入操作数栈中 <img src="'+D+'" alt=""> 7. <img src="'+F+'" alt=""> 8. 入栈，执行相除的方法 <img src="'+b+'" alt=""> 9. 将除法的结果压入操作数栈中 <img src="'+u+'" alt=""> 10. 将栈顶的50存入局部变量表的索引为4中保存 <img src="'+d+'" alt=""> 11. <img src="'+m+'" alt=""> 12. <img src="'+h+'" alt=""> 13. <img src="'+g+'" alt=""> 14. <img src="'+v+'" alt=""> 15. 执行方法，加载类，进行打印 <img src="'+f+'" alt=""> 16. 返回 <img src="'+E+'" alt=""></p><h2 id="方法区演进" tabindex="-1">方法区演进 <a class="header-anchor" href="#方法区演进" aria-hidden="true">#</a></h2><h3 id="永久代演进过程" tabindex="-1">永久代演进过程 <a class="header-anchor" href="#永久代演进过程" aria-hidden="true">#</a></h3><ol><li>首先明确：只有Hotspot才有永久代。BEA JRockit、IBMJ9等来说，是不存在永久代的概念的。原则上如何实现方法区属于虚拟机实现细节，不受《Java虚拟机规范》管束，并不要求统一</li><li>HotSpot方法区演进</li></ol><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>jdk1.6之前</td><td>有永久代，静态变量储存在永久代上</td></tr><tr><td>jdk1.7</td><td>有永久代，但已经逐步失去<code>去永久代</code>，字符串常量池，静态变量移除，保存在堆中</td></tr><tr><td>jdk1.8中</td><td>无永久代，类型信息，字段，方法，常量保存在本地内存的元空间，但字符串常量池、静态变量仍然在堆中。</td></tr></tbody></table><p><code>jdk1.6</code><img src="'+j+'" alt=""><code>jdk7</code><img src="'+S+'" alt=""><code>jdk8</code><img src="'+_+`" alt=""></p><h3 id="为什么永久代会被元空间替代" tabindex="-1">为什么永久代会被元空间替代 <a class="header-anchor" href="#为什么永久代会被元空间替代" aria-hidden="true">#</a></h3><h3 id="字符串常量池" tabindex="-1">字符串常量池 <a class="header-anchor" href="#字符串常量池" aria-hidden="true">#</a></h3><p><code>字符串常量池StringTable为什么要调整位置</code></p><ul><li>JDK1.7中将StringTable放到堆内存，因为永久代回收效率很低，在进行FullGC的时候才会执行永久代的垃圾回收，而FullGC是堆区域中老年代内存不足，才会进行FullGC</li><li>这就导致StringTable回收效率不高，但是在开发中会有大量的字符串被创建，回收效率很低，导致永久代内存不足。放到堆里，能及时回收内存。 <code>静态变量放在哪</code></li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 结论：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 1、静态引用对应的对象实体(也就是这个new byte[1024 * 1024 * 100])始终都存在堆空间，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 2、只是那个变量(相当于下面的arr变量名)在JDK6,JDK7,JDK8存放位置中有所变化</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * jdk7：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * -Xms200m -Xmx200m -XX:PermSize=300m -XX:MaxPermSize=300m -XX:+PrintGCDetails</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * jdk 8：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * -Xms200m -Xmx200m -XX:MetaspaceSize=300m -XX:MaxMetaspaceSize=300m -XX:+PrintGCDetails</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StaticFieldTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">//100MB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">StaticFieldTest</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>变量名存放在哪</code></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">com</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">atguigu</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">java1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 《深入理解Java虚拟机》中的案例：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * staticObj、instanceObj、localObj存放在哪里？</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StaticObjTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Test</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ObjectHolder</span><span style="color:#A6ACCD;"> staticObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ObjectHolder</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ObjectHolder</span><span style="color:#A6ACCD;"> instanceObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ObjectHolder</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">ObjectHolder</span><span style="color:#A6ACCD;"> localObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ObjectHolder</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">done</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ObjectHolder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Test</span><span style="color:#A6ACCD;"> test </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> StaticObjTest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Test</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        test</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><ul><li>jdk1.6环境下 <ul><li>随着staticOb随着Test类型信息存放在方法区</li><li>instanceObj随着Test对象实例存放在java堆中</li><li>localObj存放在foo方法栈帧的局部变量表中</li><li>测试发现：三个对象的数据在内存中的地址都落在Eden区范围内，所以结论：只要是对象实例必然会在Java堆中分配。</li></ul></li></ul><h2 id="方法区垃圾回收" tabindex="-1">方法区垃圾回收 <a class="header-anchor" href="#方法区垃圾回收" aria-hidden="true">#</a></h2><ol><li><p>有些人认为方法区（如Hotspot虚拟机中的元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如JDK11时期的ZGC收集器就不支持类卸载）。</p></li><li><p>一般来说这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻。但是这部分区域的回收有时又确实是必要的。以前sun公司的Bug列表中，曾出现过的若干个严重的Bug就是由于低版本的HotSpot虚拟机对此区域未完全回收而导致内存泄漏。</p></li><li><p>方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再使用的类型。</p></li><li><p>先来说说方法区内常量池之中主要存放的两大类常量：字面量和符号引用。字面量比较接近Java语言层次的常量概念，如文本字符串、被声明为final的常量值等。而符号引用则属于编译原理方面的概念，包括下面三类常量：</p><ul><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法的名称和描述符</li></ul></li><li><p>HotSpot虚拟机对常量池的回收策略是很明确的，只要常量池中的常量没有被任何地方引用，就可以被回收。</p></li><li><p>回收废弃常量与回收Java堆中的对象非常类似。（关于常量的回收比较简单，重点是类的回收）</p></li></ol><h2 id="直接内存" tabindex="-1">直接内存 <a class="header-anchor" href="#直接内存" aria-hidden="true">#</a></h2>`,96),O=[M];function B(T,x,L,q,X,J){return n(),a("div",null,O)}const P=s(k,[["render",B]]);export{V as __pageData,P as default};
