import{_ as s}from"./chunks/jvm中文.db4606ad.js";import{_ as n,o as a,c as l,a as p}from"./app.1adc42ab.js";const e="/assets/ailjdk.90b8e0c9.jpg",o="/assets/线程内存空间.44e01638.png",r="/assets/pc简介.69d985c0.png",i="/assets/操作数栈.43b96fff.png",c="/assets/执行流程1.b309a54e.png",t="/assets/执行流程2.8fc20636.png",C="/assets/执行流程3.025f96c3.png",A="/assets/执行流程4.4c2b323a.png",y="/assets/执行流程5.747beeea.png",b="/assets/动态链接.4ee62d57.png",D="/assets/gc存在位置.42ca044f.png",S=JSON.parse('{"title":"jvm-基础","description":"","frontmatter":{},"headers":[{"level":2,"title":"运行时数据区","slug":"运行时数据区","link":"#运行时数据区","children":[]},{"level":2,"title":"线程内存空间","slug":"线程内存空间","link":"#线程内存空间","children":[]},{"level":2,"title":"runtime","slug":"runtime","link":"#runtime","children":[]},{"level":2,"title":"线程","slug":"线程","link":"#线程","children":[{"level":3,"title":"JVM线程","slug":"jvm线程","link":"#jvm线程","children":[]},{"level":3,"title":"JVM系统线程","slug":"jvm系统线程","link":"#jvm系统线程","children":[]}]},{"level":2,"title":"程序计数器（PC计数器）","slug":"程序计数器-pc计数器","link":"#程序计数器-pc计数器","children":[{"level":3,"title":"作用","slug":"作用","link":"#作用","children":[]}]},{"level":2,"title":"本地方法栈","slug":"本地方法栈","link":"#本地方法栈","children":[]},{"level":2,"title":"虚拟机栈","slug":"虚拟机栈","link":"#虚拟机栈","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"内存中的栈和堆","slug":"内存中的栈和堆","link":"#内存中的栈和堆","children":[]},{"level":3,"title":"基本内容","slug":"基本内容","link":"#基本内容","children":[]},{"level":3,"title":"作用","slug":"作用-1","link":"#作用-1","children":[]},{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"虚拟机栈可能的异常","slug":"虚拟机栈可能的异常","link":"#虚拟机栈可能的异常","children":[]},{"level":3,"title":"储存单位","slug":"储存单位","link":"#储存单位","children":[]},{"level":3,"title":"运行原理","slug":"运行原理","link":"#运行原理","children":[]},{"level":3,"title":"内存结构","slug":"内存结构","link":"#内存结构","children":[]}]},{"level":2,"title":"局部变量表","slug":"局部变量表","link":"#局部变量表","children":[]},{"level":2,"title":"操作数栈","slug":"操作数栈","link":"#操作数栈","children":[{"level":3,"title":"特点","slug":"特点-1","link":"#特点-1","children":[]},{"level":3,"title":"作用","slug":"作用-2","link":"#作用-2","children":[]},{"level":3,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":3,"title":"栈顶缓存技术","slug":"栈顶缓存技术","link":"#栈顶缓存技术","children":[]},{"level":3,"title":"方法调用","slug":"方法调用","link":"#方法调用","children":[]}]},{"level":2,"title":"方法返回地址","slug":"方法返回地址","link":"#方法返回地址","children":[]},{"level":2,"title":"面试题","slug":"面试题","link":"#面试题","children":[{"level":3,"title":"举例栈溢出的情况","slug":"举例栈溢出的情况","link":"#举例栈溢出的情况","children":[]},{"level":3,"title":"调正栈大小，就能保证栈不溢出吗","slug":"调正栈大小-就能保证栈不溢出吗","link":"#调正栈大小-就能保证栈不溢出吗","children":[]},{"level":3,"title":"分配的栈内存越大越好吗","slug":"分配的栈内存越大越好吗","link":"#分配的栈内存越大越好吗","children":[]},{"level":3,"title":"垃圾回收是否涉及到了虚拟机栈","slug":"垃圾回收是否涉及到了虚拟机栈","link":"#垃圾回收是否涉及到了虚拟机栈","children":[]},{"level":3,"title":"方法中定义的局部变量是否线程安全？","slug":"方法中定义的局部变量是否线程安全","link":"#方法中定义的局部变量是否线程安全","children":[]}]}],"relativePath":"jvm/jvm2.md","lastUpdated":1675090210000}'),u={name:"jvm/jvm2.md"},d=p('<h1 id="jvm-基础" tabindex="-1">jvm-基础 <a class="header-anchor" href="#jvm-基础" aria-hidden="true">#</a></h1><p>作者: fbk 时间：2023-1-28 地点：济南</p><h2 id="运行时数据区" tabindex="-1">运行时数据区 <a class="header-anchor" href="#运行时数据区" aria-hidden="true">#</a></h2><p><img src="'+s+'" alt=""> 在上阶段经历类的加载-验证-准备-解析-初始化阶段完成后，会在运行时数据区（Runtime Data Area）进行</p><ol><li><p>内存是非常重要的系统资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM内存布局规定了Java在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。不同的JVM对于内存的划分方式和管理机制存在着部分差异。结合JVM虚拟机规范，来探讨一下经典的JVM内存布局。</p></li><li><p>我们通过磁盘或者网络IO得到的数据，都需要先加载到内存中，然后CPU从内存中获取数据进行读取，也就是说内存充当了CPU和磁盘之间的桥梁</p></li></ol><p><img src="'+e+'" alt=""></p><h2 id="线程内存空间" tabindex="-1">线程内存空间 <a class="header-anchor" href="#线程内存空间" aria-hidden="true">#</a></h2><p><img src="'+o+'" alt=""> 其中红的是线程共享的，包括堆内存和方法去，绿色的是每个线程单独拥有的，包括本地方法栈，虚拟机栈，方法区</p><h2 id="runtime" tabindex="-1">runtime <a class="header-anchor" href="#runtime" aria-hidden="true">#</a></h2><p>每个JVM只有一个Runtime实例，即为运行时环境</p><h2 id="线程" tabindex="-1">线程 <a class="header-anchor" href="#线程" aria-hidden="true">#</a></h2><h3 id="jvm线程" tabindex="-1">JVM线程 <a class="header-anchor" href="#jvm线程" aria-hidden="true">#</a></h3><ol><li>线程是一个程序运行单元，一个JVM中可以包含多个线程</li><li>在HostPot JVM中，每个线程都与操作系统的线程映射</li></ol><ul><li>在JVM中创建了一个线程，此时操作系统的本地线程也同时创建，操作系统会调用java线程的run方法，执行完后，java线程销毁，操作系统线程销毁</li></ul><h3 id="jvm系统线程" tabindex="-1">JVM系统线程 <a class="header-anchor" href="#jvm系统线程" aria-hidden="true">#</a></h3><ol><li>虚拟机线程</li><li>周期任务线程</li><li>GC线程</li><li>编译线程</li><li>信号调度线程</li></ol><h2 id="程序计数器-pc计数器" tabindex="-1">程序计数器（PC计数器） <a class="header-anchor" href="#程序计数器-pc计数器" aria-hidden="true">#</a></h2><h3 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-hidden="true">#</a></h3><p><img src="'+r+`" alt=""><code>使用PC寄存器存储字节码指令地址有什么用呢？或者问为什么使用 PC 寄存器来记录当前线程的执行地址呢？</code></p><ol><li>因为CPU需要不停切换线程，所以在线程切换完后，可以知道是从哪开始的</li><li>JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令</li></ol><p><code>PC寄存器为什么被设定为私有的？</code></p><ol><li>我们都知道所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停地做任务切换，这样必然导致经常中断或恢复，如何保证分毫无差呢？为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程都分配一个PC寄存器，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。</li><li>由于CPU时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</li><li>这样必然导致经常中断或恢复，如何保证分毫无差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。</li></ol><h2 id="本地方法栈" tabindex="-1">本地方法栈 <a class="header-anchor" href="#本地方法栈" aria-hidden="true">#</a></h2><h2 id="虚拟机栈" tabindex="-1">虚拟机栈 <a class="header-anchor" href="#虚拟机栈" aria-hidden="true">#</a></h2><h3 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-hidden="true">#</a></h3><ol><li>由于跨平台性的设计，java的指令都是根据栈来设计的，不同平台CPU的架构不同，所以不能设计为基于寄存器的【如果设计成基于寄存器的，耦合度高，性能会有所提升，因为可以对具体的CPU架构进行优化，但是跨平台性大大降低】。</li><li>优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令</li></ol><h3 id="内存中的栈和堆" tabindex="-1">内存中的栈和堆 <a class="header-anchor" href="#内存中的栈和堆" aria-hidden="true">#</a></h3><ol><li>首先栈是运行时的单位，而堆是存储的单位。</li><li>即：栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。堆解决的是数据存储的问题，即数据怎么放，放哪里</li></ol><h3 id="基本内容" tabindex="-1">基本内容 <a class="header-anchor" href="#基本内容" aria-hidden="true">#</a></h3><ul><li>虚拟机栈是什么 <ul><li>java虚拟机栈，每个线程都会创建一个虚拟机栈，每个虚拟机栈储存多个栈帧，对应着一次次的java方法调用，栈是线程私有的</li></ul></li></ul><h3 id="作用-1" tabindex="-1">作用 <a class="header-anchor" href="#作用-1" aria-hidden="true">#</a></h3><ul><li>主管java程序的运行，保存的是方法中的（8种基本数据，对象的引用地址），部分结果，方法的返回</li></ul><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-hidden="true">#</a></h3><ul><li>栈是一种快速有效的分配方式，访问速度仅次于程序计数器</li><li>JVM直接对Java栈的操作只有两个： <ul><li>每个方法执行，伴随着进栈（入栈、压栈）</li><li>执行结束后的出栈工作</li></ul></li><li>对于栈来说不存在垃圾回收问题</li><li>栈不需要GC，但是可能存在OOM</li></ul><h3 id="虚拟机栈可能的异常" tabindex="-1">虚拟机栈可能的异常 <a class="header-anchor" href="#虚拟机栈可能的异常" aria-hidden="true">#</a></h3><ol><li>当一个虚拟机栈的大小固定，每个线程创建请求的虚拟机栈容量超过虚拟机栈允许的最大容量，就会出现stackoverFlowError</li><li>java虚拟机栈会动态的扩展容量，如果没有申请到足够的内存，就会出现ssc（stackOutofMemory）</li></ol><h3 id="储存单位" tabindex="-1">储存单位 <a class="header-anchor" href="#储存单位" aria-hidden="true">#</a></h3><ul><li>每个线程都有自己的栈，栈中的数据都是以栈帧（Stack Frame）的格式存在</li><li>在这个线程上正在执行的每个方法都各自对应一个栈帧（Stack Frame）。</li><li>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息。</li></ul><h3 id="运行原理" tabindex="-1">运行原理 <a class="header-anchor" href="#运行原理" aria-hidden="true">#</a></h3><h3 id="内存结构" tabindex="-1">内存结构 <a class="header-anchor" href="#内存结构" aria-hidden="true">#</a></h3><p>虚拟机中的每个栈帧都储存着</p><ul><li>局部变量表</li><li>操作数栈</li><li>动态链接（或指向运行时常量池的方法引用）</li><li>方法返回地址</li><li>一些附加信息</li></ul><h2 id="局部变量表" tabindex="-1">局部变量表 <a class="header-anchor" href="#局部变量表" aria-hidden="true">#</a></h2><ol><li>局部变量表也被称为局部变量表或本地变量表</li><li>定义为一个数字数组，主要存储方法中的局部变量</li><li>由于局部变量定义在线程的栈上，是线程的私有数据，因此不存在数据安全问题</li><li>局部变量表所需的容量大小是在编译器时期确定的</li><li>方法嵌套的次数由栈的大小决定，栈的内存越大，方法嵌套越多</li><li>局部变量表中的变量只在当前的方法调用</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Slf4j</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Demo2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Demo2</span><span style="color:#A6ACCD;"> demo2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Demo2</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">       demo2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Demo2</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Demo1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * 1. static是静态方法也叫类方法，在JVM初始化的时候，就会在内存分配一块内存，成为静态区</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * 2. this指向的是这个对象，this指针指向堆区中的类对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Demo2</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(this);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(this.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="操作数栈" tabindex="-1">操作数栈 <a class="header-anchor" href="#操作数栈" aria-hidden="true">#</a></h2><h3 id="特点-1" tabindex="-1">特点 <a class="header-anchor" href="#特点-1" aria-hidden="true">#</a></h3><ol><li>每个独立栈帧中除了包含局部变量表，还包括一个后进先出的操作数栈</li><li>操作数栈，在方法执行的过程中，根据字节码指令，往栈中写入数据或者提取数据</li><li>某些字节码指令压入操作数栈，其余的字节码在操作数栈出栈，并且把结果压入栈</li></ol><h3 id="作用-2" tabindex="-1">作用 <a class="header-anchor" href="#作用-2" aria-hidden="true">#</a></h3><ol><li>操作数栈中，主要保存计算过程中的中间结果，为计算过程中的临时变量储存空间</li><li>JVM</li></ol><h3 id="操作" tabindex="-1">操作 <a class="header-anchor" href="#操作" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testAddOperation</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">//byte、short、char、boolean：都以int型来保存</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">15</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> k </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// int m = 800;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"> 0 bipush 15</span></span>
<span class="line"><span style="color:#A6ACCD;"> 2 istore_1</span></span>
<span class="line"><span style="color:#A6ACCD;"> 3 bipush 8</span></span>
<span class="line"><span style="color:#A6ACCD;"> 5 istore_2</span></span>
<span class="line"><span style="color:#A6ACCD;"> 6 iload_1</span></span>
<span class="line"><span style="color:#A6ACCD;"> 7 iload_2</span></span>
<span class="line"><span style="color:#A6ACCD;"> 8 iadd</span></span>
<span class="line"><span style="color:#A6ACCD;"> 9 istore_3</span></span>
<span class="line"><span style="color:#A6ACCD;">10 return</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="`+i+'" alt=""><code>分析</code></p><p>可以看到使用javap -verbose后可以分析出，操作数栈是2，局部变量表是4，下面就来分析一下每个字节码执行的流程 <img src="'+c+'" alt=""></p><ol><li>执行流程1其中pc寄存器记录打那个前指令地址为0，因为15可以是byte类型操作数栈将15入栈和出栈，最后转换为int类型储存在局部变量表中索引为1的位置，因为方法并不是一个static静态方法，所以局部变量表中的索引为0的位置是储存当前实例对象this</li></ol><p><img src="'+t+'" alt=""></p><ol start="2"><li>程序计数器位置改变到2，在局部变量中储存15int类型</li></ol><p><img src="'+C+'" alt=""> 3. 和上述储存一样，依旧是将8储存到局部变量表中</p><p><img src="'+A+'" alt=""></p><ol start="4"><li>进行相加，首先在局部变量中加载15，8并且放进操作数栈</li></ol><p><img src="'+y+`" alt=""></p><ol start="5"><li>字节码指令完成下相加操作局部变量表创建新的空间储存新变量</li></ol><h3 id="栈顶缓存技术" tabindex="-1">栈顶缓存技术 <a class="header-anchor" href="#栈顶缓存技术" aria-hidden="true">#</a></h3><ol><li>因为在字节码执行的过程中，需要不断地在操作数栈中进行入栈和出栈的指令，所以会频繁的操作内存的读和写，也就必定会影响CPU的执行速度</li><li>所以在HostPot JVM中采用的是栈顶缓存技术降低内存的读和写，将栈顶元素全部缓存在CPU的寄存器中</li><li>寄存器的特点，指令更少，执行速度更快，但是指令集更多</li></ol><h4 id="动态链接" tabindex="-1">动态链接 <a class="header-anchor" href="#动态链接" aria-hidden="true">#</a></h4><ol><li>每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用。包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接（Dynamic Linking），比如：invokedynamic指令</li><li>在Java源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用（Symbolic Reference）保存在class文件的常量池里。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DynamicLinkingTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">methodA</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">methodA()....</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">methodB</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">methodB()....</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">methodA</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        num</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Classfile </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">F</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">IDEAWorkSpaceSourceCode</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">JVMDemo</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">production</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">chapter05</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">com</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">atguigu</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">java1</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">DynamicLinkingTest</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">Last</span><span style="color:#A6ACCD;"> modified </span><span style="color:#F78C6C;">2020</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> size </span><span style="color:#F78C6C;">712</span><span style="color:#A6ACCD;"> bytes</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">MD5</span><span style="color:#A6ACCD;"> checksum e56913c945f897c7ee6c0a608629bca8</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">Compiled</span><span style="color:#A6ACCD;"> from </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">DynamicLinkingTest.java</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">com</span><span style="color:#A6ACCD;">.atguigu.java1.DynamicLinkingTest</span></span>
<span class="line"><span style="color:#A6ACCD;">  minor version: 0</span></span>
<span class="line"><span style="color:#A6ACCD;">  major version: 52</span></span>
<span class="line"><span style="color:#A6ACCD;">  flags: ACC_PUBLIC, ACC_SUPER</span></span>
<span class="line"><span style="color:#A6ACCD;">Constant pool:</span></span>
<span class="line"><span style="color:#A6ACCD;">   #1 = Methodref          #9.#23         </span><span style="color:#676E95;font-style:italic;">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">   #2 = Fieldref           #8.#24         </span><span style="color:#676E95;font-style:italic;">// com/atguigu/java1/DynamicLinkingTest.num:I</span></span>
<span class="line"><span style="color:#A6ACCD;">   #3 = Fieldref           #25.#26        </span><span style="color:#676E95;font-style:italic;">// java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#A6ACCD;">   #4 = String             #27            </span><span style="color:#676E95;font-style:italic;">// methodA()....</span></span>
<span class="line"><span style="color:#A6ACCD;">   #5 = Methodref          #28.#29        </span><span style="color:#676E95;font-style:italic;">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#A6ACCD;">   #6 = String             #30            </span><span style="color:#676E95;font-style:italic;">// methodB()....</span></span>
<span class="line"><span style="color:#A6ACCD;">   #7 = Methodref          #8.#31         </span><span style="color:#676E95;font-style:italic;">// com/atguigu/java1/DynamicLinkingTest.methodA:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">   #8 = Class              #32            </span><span style="color:#676E95;font-style:italic;">// com/atguigu/java1/DynamicLinkingTest</span></span>
<span class="line"><span style="color:#A6ACCD;">   #9 = Class              #33            </span><span style="color:#676E95;font-style:italic;">// java/lang/Object</span></span>
<span class="line"><span style="color:#A6ACCD;">  #10 = Utf8               num</span></span>
<span class="line"><span style="color:#A6ACCD;">  #11 = Utf8               I</span></span>
<span class="line"><span style="color:#A6ACCD;">  #12 = Utf8               </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">init</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  #13 = Utf8               ()V</span></span>
<span class="line"><span style="color:#A6ACCD;">  #14 = Utf8               Code</span></span>
<span class="line"><span style="color:#A6ACCD;">  #15 = Utf8               LineNumberTable</span></span>
<span class="line"><span style="color:#A6ACCD;">  #16 = Utf8               LocalVariableTable</span></span>
<span class="line"><span style="color:#A6ACCD;">  #17 = Utf8               this</span></span>
<span class="line"><span style="color:#A6ACCD;">  #18 = Utf8               Lcom/atguigu/java1/DynamicLinkingTest;</span></span>
<span class="line"><span style="color:#A6ACCD;">  #19 = Utf8               methodA</span></span>
<span class="line"><span style="color:#A6ACCD;">  #20 = Utf8               methodB</span></span>
<span class="line"><span style="color:#A6ACCD;">  #21 = Utf8               SourceFile</span></span>
<span class="line"><span style="color:#A6ACCD;">  #22 = Utf8               DynamicLinkingTest.java</span></span>
<span class="line"><span style="color:#A6ACCD;">  #23 = NameAndType        #12:#13        </span><span style="color:#676E95;font-style:italic;">// &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">  #24 = NameAndType        #10:#11        </span><span style="color:#676E95;font-style:italic;">// num:I</span></span>
<span class="line"><span style="color:#A6ACCD;">  #25 = Class              #34            </span><span style="color:#676E95;font-style:italic;">// java/lang/System</span></span>
<span class="line"><span style="color:#A6ACCD;">  #26 = NameAndType        #35:#36        </span><span style="color:#676E95;font-style:italic;">// out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#A6ACCD;">  #27 = Utf8               methodA()....</span></span>
<span class="line"><span style="color:#A6ACCD;">  #28 = Class              #37            </span><span style="color:#676E95;font-style:italic;">// java/io/PrintStream</span></span>
<span class="line"><span style="color:#A6ACCD;">  #29 = NameAndType        #38:#39        </span><span style="color:#676E95;font-style:italic;">// println:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#A6ACCD;">  #30 = Utf8               methodB()....</span></span>
<span class="line"><span style="color:#A6ACCD;">  #31 = NameAndType        #19:#13        </span><span style="color:#676E95;font-style:italic;">// methodA:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">  #32 = Utf8               com/atguigu/java1/DynamicLinkingTest</span></span>
<span class="line"><span style="color:#A6ACCD;">  #33 = Utf8               java/lang/Object</span></span>
<span class="line"><span style="color:#A6ACCD;">  #34 = Utf8               java/lang/System</span></span>
<span class="line"><span style="color:#A6ACCD;">  #35 = Utf8               out</span></span>
<span class="line"><span style="color:#A6ACCD;">  #36 = Utf8               Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#A6ACCD;">  #37 = Utf8               java/io/PrintStream</span></span>
<span class="line"><span style="color:#A6ACCD;">  #38 = Utf8               println</span></span>
<span class="line"><span style="color:#A6ACCD;">  #39 = Utf8               (Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    descriptor</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">I</span></span>
<span class="line"><span style="color:#A6ACCD;">    flags</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> com.atguigu.java1.</span><span style="color:#82AAFF;">DynamicLinkingTest</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    descriptor: ()V</span></span>
<span class="line"><span style="color:#A6ACCD;">    flags: ACC_PUBLIC</span></span>
<span class="line"><span style="color:#A6ACCD;">    Code:</span></span>
<span class="line"><span style="color:#A6ACCD;">      stack=2, locals=1, args_size=1</span></span>
<span class="line"><span style="color:#A6ACCD;">         0: aload_0</span></span>
<span class="line"><span style="color:#A6ACCD;">         1: invokespecial #1                  </span><span style="color:#676E95;font-style:italic;">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">         4: aload_0</span></span>
<span class="line"><span style="color:#A6ACCD;">         5: bipush        10</span></span>
<span class="line"><span style="color:#A6ACCD;">         7: putfield      #2                  </span><span style="color:#676E95;font-style:italic;">// Field num:I</span></span>
<span class="line"><span style="color:#A6ACCD;">        10: return</span></span>
<span class="line"><span style="color:#A6ACCD;">      LineNumberTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 7: 0</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 9: 4</span></span>
<span class="line"><span style="color:#A6ACCD;">      LocalVariableTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        Start  Length  Slot  Name   Signature</span></span>
<span class="line"><span style="color:#A6ACCD;">            0      11     0  this   Lcom/atguigu/java1/DynamicLinkingTest</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">methodA</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    descriptor: ()V</span></span>
<span class="line"><span style="color:#A6ACCD;">    flags: ACC_PUBLIC</span></span>
<span class="line"><span style="color:#A6ACCD;">    Code:</span></span>
<span class="line"><span style="color:#A6ACCD;">      stack=2, locals=1, args_size=1</span></span>
<span class="line"><span style="color:#A6ACCD;">         0: getstatic     #3                  </span><span style="color:#676E95;font-style:italic;">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#A6ACCD;">         3: ldc           #4                  </span><span style="color:#676E95;font-style:italic;">// String methodA()....</span></span>
<span class="line"><span style="color:#A6ACCD;">         5: invokevirtual #5                  </span><span style="color:#676E95;font-style:italic;">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#A6ACCD;">         8: return</span></span>
<span class="line"><span style="color:#A6ACCD;">      LineNumberTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 12: 0</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 13: 8</span></span>
<span class="line"><span style="color:#A6ACCD;">      LocalVariableTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Start</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">Length</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">Slot</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">Name</span><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">Signature</span></span>
<span class="line"><span style="color:#A6ACCD;">            0       9     0  this   Lcom/atguigu/java1/DynamicLinkingTest;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  public </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">methodB</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    descriptor: ()V</span></span>
<span class="line"><span style="color:#A6ACCD;">    flags: ACC_PUBLIC</span></span>
<span class="line"><span style="color:#A6ACCD;">    Code:</span></span>
<span class="line"><span style="color:#A6ACCD;">      stack=3, locals=1, args_size=1</span></span>
<span class="line"><span style="color:#A6ACCD;">         0: getstatic     #3                  </span><span style="color:#676E95;font-style:italic;">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#A6ACCD;">         3: ldc           #6                  </span><span style="color:#676E95;font-style:italic;">// String methodB()....</span></span>
<span class="line"><span style="color:#A6ACCD;">         5: invokevirtual #5                  </span><span style="color:#676E95;font-style:italic;">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#A6ACCD;">         8: aload_0</span></span>
<span class="line"><span style="color:#A6ACCD;">         9: invokevirtual #7                  </span><span style="color:#676E95;font-style:italic;">// Method methodA:()V</span></span>
<span class="line"><span style="color:#A6ACCD;">        12: aload_0</span></span>
<span class="line"><span style="color:#A6ACCD;">        13: dup</span></span>
<span class="line"><span style="color:#A6ACCD;">        14: getfield      #2                  </span><span style="color:#676E95;font-style:italic;">// Field num:I</span></span>
<span class="line"><span style="color:#A6ACCD;">        17: iconst_1</span></span>
<span class="line"><span style="color:#A6ACCD;">        18: iadd</span></span>
<span class="line"><span style="color:#A6ACCD;">        19: putfield      #2                  </span><span style="color:#676E95;font-style:italic;">// Field num:I</span></span>
<span class="line"><span style="color:#A6ACCD;">        22: return</span></span>
<span class="line"><span style="color:#A6ACCD;">      LineNumberTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 16: 0</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 18: 8</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 20: 12</span></span>
<span class="line"><span style="color:#A6ACCD;">        line 21: 22</span></span>
<span class="line"><span style="color:#A6ACCD;">      LocalVariableTable:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Start</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">Length</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">Slot</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">Name</span><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">Signature</span></span>
<span class="line"><span style="color:#A6ACCD;">            0      23     0  this   Lcom/atguigu/java1/DynamicLinkingTest;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">SourceFile: &quot;DynamicLinkingTest.java&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br></div></div><p>在解析后的字节码中可以看到在methodB中调用了methodA方法，字节码指令是<code>invokevirtual #7</code>,调用num属性的时候的字节码指令是<code>getfield #2</code>,在上述字节码文件中，我们看到有一个区域名为Constant Pool,成为常量池，在学习String基础的时候，我们经常听到String是储存在方法区的常量池中，最左边的符号也就是符号引用</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">   #</span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Methodref          #</span><span style="color:#F78C6C;">8.</span><span style="color:#A6ACCD;">#</span><span style="color:#F78C6C;">31</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">// com/atguigu/java1/DynamicLinkingTest.methodA:()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>#7中调用了方法的引用 <img src="`+b+`" alt=""> 为什么要使用常量池</p><ol><li>因为在不同的方法中，都可能调用常量或者方法，所以只要储存一份，在使用的时候去调用，节省空间</li><li>常量池的作用：提供一份符号或者常量，便于指令识别</li></ol><h3 id="方法调用" tabindex="-1">方法调用 <a class="header-anchor" href="#方法调用" aria-hidden="true">#</a></h3><h4 id="动态链接和静态链接" tabindex="-1">动态链接和静态链接 <a class="header-anchor" href="#动态链接和静态链接" aria-hidden="true">#</a></h4><ul><li>静态链接</li></ul><p>当一个字节码文件被装载到JVM内部中，如果被调用的目标方法在在编译时期确定，且运行的时候不会发生改变，这种情况下调用方法的符号引用转化为直接引用的过程成为静态链接</p><ul><li>动态链接</li></ul><p>如果被调用的方法在编译期无法被确定下来，也就是说，只能够在程序运行期将调用的方法的符号转换为直接引用，由于这种引用转换过程具备动态性，因此也被称之为动态链接。</p><h4 id="早期绑定和晚期绑定" tabindex="-1">早期绑定和晚期绑定 <a class="header-anchor" href="#早期绑定和晚期绑定" aria-hidden="true">#</a></h4><h4 id="动态语言和静态语言" tabindex="-1">动态语言和静态语言 <a class="header-anchor" href="#动态语言和静态语言" aria-hidden="true">#</a></h4><ol><li>动态类型语言和静态类型语言两者的区别就在于对类型的检查是在编译期还是在运行期，满足前者就是静态类型语言，反之是动态类型语言。</li><li>说的再直白一点就是，静态类型语言是判断变量自身的类型信息；动态类型语言是判断变量值的类型信息，变量没有类型信息，变量值才有类型信息，这是动态语言的一个重要特征。</li></ol><blockquote><p>java是静态语言，js是动态语言</p></blockquote><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//在编译时期就进行检查</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//在运行时期检查</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 运行时期检查</span></span>
<span class="line"><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">18</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="java重写方法的本质" tabindex="-1">java重写方法的本质 <a class="header-anchor" href="#java重写方法的本质" aria-hidden="true">#</a></h4><ol><li>找到操作数栈顶的第一个元素所执行的对象的实际类型，记作C。</li><li>如果在类型C中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验。</li></ol><ul><li>如果通过则返回这个方法的直接引用，查找过程结束</li><li>如果不通过，则返回java.lang.IllegalAccessError 异常</li></ul><ol start="3"><li>否则，按照继承关系从下往上依次对C的各个父类进行第2步的搜索和验证过程。</li><li>如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常。</li></ol><h2 id="方法返回地址" tabindex="-1">方法返回地址 <a class="header-anchor" href="#方法返回地址" aria-hidden="true">#</a></h2><ol><li>存放调用该方法的PC寄存器的值，一个方法的结束，有两种情况</li></ol><ul><li>正常执行</li><li>出现异常情况，非正常退出</li></ul><ol start="2"><li>无论是哪种方式退出，在方法退出后都返回该方法被调用的位置，方法正常退出的时候，调用者pc计数器的值作为返回地址，调用该方法的指令的下一条指令，通过异常信息返回，返回地址是通过异常表确定</li><li>本质上，方法的退出就是当前栈帧出栈的过程。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置PC寄存器值等，让调用者方法继续执行下去。</li><li>正常完成出口和异常完成出口的区别在于：通过异常完成出口退出的不会给他的上层调用者产生任何的返回值。</li></ol><h2 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-hidden="true">#</a></h2><h3 id="举例栈溢出的情况" tabindex="-1">举例栈溢出的情况 <a class="header-anchor" href="#举例栈溢出的情况" aria-hidden="true">#</a></h3><ul><li>如果内存空间不足，在虚拟机栈分配内存的时候得不到计划分配的内存大小，就会出现sdf</li><li>因为虚拟机栈内存是动态变化的，就可能出现oom</li></ul><h3 id="调正栈大小-就能保证栈不溢出吗" tabindex="-1">调正栈大小，就能保证栈不溢出吗 <a class="header-anchor" href="#调正栈大小-就能保证栈不溢出吗" aria-hidden="true">#</a></h3><p>不能保证，只能降低sdf概率</p><h3 id="分配的栈内存越大越好吗" tabindex="-1">分配的栈内存越大越好吗 <a class="header-anchor" href="#分配的栈内存越大越好吗" aria-hidden="true">#</a></h3><p>不是，一定时间降低了oom的概率，但是会挤占其他的线程空间，因为整个虚拟机的内存空间是有限的</p><h3 id="垃圾回收是否涉及到了虚拟机栈" tabindex="-1">垃圾回收是否涉及到了虚拟机栈 <a class="header-anchor" href="#垃圾回收是否涉及到了虚拟机栈" aria-hidden="true">#</a></h3><p>不会 <img src="`+D+'" alt=""></p><h3 id="方法中定义的局部变量是否线程安全" tabindex="-1">方法中定义的局部变量是否线程安全？ <a class="header-anchor" href="#方法中定义的局部变量是否线程安全" aria-hidden="true">#</a></h3><ul><li>单线程操作，局部变量安全</li><li>多线程同时操作局部变量，可能存在不安全</li></ul>',105),m=[d];function h(F,g,v,f,E,j){return a(),l("div",null,m)}const L=n(u,[["render",h]]);export{S as __pageData,L as default};
